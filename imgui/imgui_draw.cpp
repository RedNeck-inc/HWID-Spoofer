// dear imgui, v1.77 WIP
// (drawing and font code)

/*

Index of this file:

// [SECTION] STB libraries implementation
// [SECTION] Style functions
// [SECTION] ImDrawList
// [SECTION] ImDrawListSplitter
// [SECTION] ImDrawData
// [SECTION] Helpers ShadeVertsXXX functions
// [SECTION] ImFontConfig
// [SECTION] ImFontAtlas
// [SECTION] ImFontAtlas glyph ranges helpers
// [SECTION] ImFontGlyphRangesBuilder
// [SECTION] ImFont
// [SECTION] ImGui Internal Render Helpers
// [SECTION] Decompression code
// [SECTION] Default font data (ProggyClean.ttf)

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.hpp"

// Atom includes
#include "../constant/character.hpp"
#include "../constant/hash.hpp"
#include "../constant/secure_string.hpp"
#include "../constant/string.hpp"

#include "../win32/math.hpp"
#include "../win32/string.hpp"

using namespace horizon;

#ifndef IMGUI_DISABLE

#ifndef IMGUI_DEFINE_MATH_OPERATORS
#define IMGUI_DEFINE_MATH_OPERATORS
#endif
#include "imgui_internal.hpp"

#include <stdio.h>      // vsnprintf, sscanf, printf
#if !defined(alloca)
#if defined(__GLIBC__) || defined(__sun) || defined(__APPLE__) || defined(__NEWLIB__)
#include <alloca.h>     // alloca (glibc uses <alloca.h>. Note that Cygwin may have _WIN32 defined, so the order matters here)
#elif defined(_WIN32)
#include <malloc.h>     // alloca
#if !defined(alloca)
#define alloca _alloca  // for clang with MS Codegen
#endif
#else
#include <stdlib.h>     // alloca
#endif
#endif

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127) // condition expression is constant
#pragma warning (disable: 4505) // unreferenced local function has been removed (stb stuff)
#pragma warning (disable: 4996) // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#pragma clang diagnostic ignored "-Wold-style-cast"         // warning : use of old-style cast                              // yes, they are more terse.
#pragma clang diagnostic ignored "-Wfloat-equal"            // warning : comparing floating point with == or != is unsafe   // storing and comparing against same constants ok.
#pragma clang diagnostic ignored "-Wglobal-constructors"    // warning : declaration requires a global destructor           // similar to above, not sure what the exact difference is.
#pragma clang diagnostic ignored "-Wsign-conversion"        // warning : implicit conversion changes signedness             //
#if __has_warning("-Wzero-as-null-pointer-constant")
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning : zero as null pointer constant              // some standard header variations use #define NULL 0
#endif
#if __has_warning("-Wcomma")
#pragma clang diagnostic ignored "-Wcomma"                  // warning : possible misuse of comma operator here             //
#endif
#if __has_warning("-Wreserved-id-macro")
#pragma clang diagnostic ignored "-Wreserved-id-macro"      // warning : macro name is a reserved identifier                //
#endif
#if __has_warning("-Wdouble-promotion")
#pragma clang diagnostic ignored "-Wdouble-promotion"       // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#endif
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wpragmas"                  // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wunused-function"          // warning: 'xxxx' defined but not used
#pragma GCC diagnostic ignored "-Wdouble-promotion"         // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"               // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wstack-protector"          // warning: stack protector not protecting local variables: variable length buffer
#pragma GCC diagnostic ignored "-Wclass-memaccess"          // [__GNUC__ >= 8] warning: 'memset/memcpy' clearing/writing an object of type 'xxxx' with no trivial copy-assignment; use assignment or value-initialization instead
#endif

//-------------------------------------------------------------------------
// [SECTION] STB libraries implementation
//-------------------------------------------------------------------------

// Compile time options:
//#define IMGUI_STB_NAMESPACE           ImStb
//#define IMGUI_STB_TRUETYPE_FILENAME   "my_folder/stb_truetype.h"
//#define IMGUI_STB_RECT_PACK_FILENAME  "my_folder/stb_rect_pack.h"
//#define IMGUI_DISABLE_STB_TRUETYPE_IMPLEMENTATION
//#define IMGUI_DISABLE_STB_RECT_PACK_IMPLEMENTATION

#ifdef IMGUI_STB_NAMESPACE
namespace IMGUI_STB_NAMESPACE
{
#endif

#ifdef _MSC_VER
#pragma warning (push)
#pragma warning (disable: 4456)                             // declaration of 'xx' hides previous local declaration
#endif

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-function"
#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wimplicit-fallthrough"
#pragma clang diagnostic ignored "-Wcast-qual"              // warning : cast from 'const xxxx *' to 'xxx *' drops const qualifier //
#endif

#if defined(__GNUC__)
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"              // warning: comparison is always true due to limited range of data type [-Wtype-limits]
#pragma GCC diagnostic ignored "-Wcast-qual"                // warning: cast from type 'const xxxx *' to type 'xxxx *' casts away qualifiers
#endif

#ifndef STB_RECT_PACK_IMPLEMENTATION                        // in case the user already have an implementation in the _same_ compilation unit (e.g. unity builds)
#ifndef IMGUI_DISABLE_STB_RECT_PACK_IMPLEMENTATION
#define STBRP_STATIC
#define STBRP_ASSERT(x)     do { IM_ASSERT(x); } while (0)
#define STBRP_SORT          ImQsort
#define STB_RECT_PACK_IMPLEMENTATION
#endif
#ifdef IMGUI_STB_RECT_PACK_FILENAME
#include IMGUI_STB_RECT_PACK_FILENAME
#else
#include "imstb_rectpack.hpp"
#endif
#endif

#ifndef STB_TRUETYPE_IMPLEMENTATION                         // in case the user already have an implementation in the _same_ compilation unit (e.g. unity builds)
#ifndef IMGUI_DISABLE_STB_TRUETYPE_IMPLEMENTATION
#define STBTT_malloc(x,u)   ((void)(u), IM_ALLOC(x))
#define STBTT_free(x,u)     ((void)(u), IM_FREE(x))
#define STBTT_assert(x)     do { IM_ASSERT(x); } while(0)
#define STBTT_fmod(x,y)     ImFmod(x,y)
#define STBTT_sqrt(x)       ImSqrt(x)
#define STBTT_pow(x,y)      ImPow(x,y)
#define STBTT_fabs(x)       ImFabs(x)
#define STBTT_ifloor(x)     ((int)ImFloorStd(x))
#define STBTT_iceil(x)      ((int)ImCeil(x))
#define STBTT_STATIC
#define STB_TRUETYPE_IMPLEMENTATION
#else
#define STBTT_DEF extern
#endif
#ifdef IMGUI_STB_TRUETYPE_FILENAME
#include IMGUI_STB_TRUETYPE_FILENAME
#else
#include "imstb_truetype.hpp"
#endif
#endif

#if defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#if defined(_MSC_VER)
#pragma warning (pop)
#endif

#ifdef IMGUI_STB_NAMESPACE
} // namespace ImStb
using namespace IMGUI_STB_NAMESPACE;
#endif

//-----------------------------------------------------------------------------
// [SECTION] Style functions
//-----------------------------------------------------------------------------

void ImGui::StyleColorsDark( ImGuiStyle* dst )
{
  ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();
  ImVec4* colors = style->Colors;

  colors[ ImGuiCol_Text ] = ImVec4( 1.00f, 1.00f, 1.00f, 1.00f );
  colors[ ImGuiCol_TextDisabled ] = ImVec4( 0.50f, 0.50f, 0.50f, 1.00f );
  colors[ ImGuiCol_WindowBg ] = ImVec4( 0.06f, 0.06f, 0.06f, 0.94f );
  colors[ ImGuiCol_ChildBg ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.00f );
  colors[ ImGuiCol_PopupBg ] = ImVec4( 0.08f, 0.08f, 0.08f, 0.94f );
  colors[ ImGuiCol_Border ] = ImVec4( 0.43f, 0.43f, 0.50f, 0.50f );
  colors[ ImGuiCol_BorderShadow ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.00f );
  colors[ ImGuiCol_FrameBg ] = ImVec4( 0.16f, 0.29f, 0.48f, 0.54f );
  colors[ ImGuiCol_FrameBgHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.40f );
  colors[ ImGuiCol_FrameBgActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.67f );
  colors[ ImGuiCol_TitleBg ] = ImVec4( 0.04f, 0.04f, 0.04f, 1.00f );
  colors[ ImGuiCol_TitleBgActive ] = ImVec4( 0.16f, 0.29f, 0.48f, 1.00f );
  colors[ ImGuiCol_TitleBgCollapsed ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.51f );
  colors[ ImGuiCol_MenuBarBg ] = ImVec4( 0.14f, 0.14f, 0.14f, 1.00f );
  colors[ ImGuiCol_ScrollbarBg ] = ImVec4( 0.02f, 0.02f, 0.02f, 0.53f );
  colors[ ImGuiCol_ScrollbarGrab ] = ImVec4( 0.31f, 0.31f, 0.31f, 1.00f );
  colors[ ImGuiCol_ScrollbarGrabHovered ] = ImVec4( 0.41f, 0.41f, 0.41f, 1.00f );
  colors[ ImGuiCol_ScrollbarGrabActive ] = ImVec4( 0.51f, 0.51f, 0.51f, 1.00f );
  colors[ ImGuiCol_CheckMark ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_SliderGrab ] = ImVec4( 0.24f, 0.52f, 0.88f, 1.00f );
  colors[ ImGuiCol_SliderGrabActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_Button ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.40f );
  colors[ ImGuiCol_ButtonHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_ButtonActive ] = ImVec4( 0.06f, 0.53f, 0.98f, 1.00f );
  colors[ ImGuiCol_Header ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.31f );
  colors[ ImGuiCol_HeaderHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.80f );
  colors[ ImGuiCol_HeaderActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_Separator ] = colors[ ImGuiCol_Border ];
  colors[ ImGuiCol_SeparatorHovered ] = ImVec4( 0.10f, 0.40f, 0.75f, 0.78f );
  colors[ ImGuiCol_SeparatorActive ] = ImVec4( 0.10f, 0.40f, 0.75f, 1.00f );
  colors[ ImGuiCol_ResizeGrip ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.25f );
  colors[ ImGuiCol_ResizeGripHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.67f );
  colors[ ImGuiCol_ResizeGripActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.95f );
  colors[ ImGuiCol_Tab ] = ImLerp( colors[ ImGuiCol_Header ], colors[ ImGuiCol_TitleBgActive ], 0.80f );
  colors[ ImGuiCol_TabHovered ] = colors[ ImGuiCol_HeaderHovered ];
  colors[ ImGuiCol_TabActive ] = ImLerp( colors[ ImGuiCol_HeaderActive ], colors[ ImGuiCol_TitleBgActive ], 0.60f );
  colors[ ImGuiCol_TabUnfocused ] = ImLerp( colors[ ImGuiCol_Tab ], colors[ ImGuiCol_TitleBg ], 0.80f );
  colors[ ImGuiCol_TabUnfocusedActive ] = ImLerp( colors[ ImGuiCol_TabActive ], colors[ ImGuiCol_TitleBg ], 0.40f );
  colors[ ImGuiCol_PlotLines ] = ImVec4( 0.61f, 0.61f, 0.61f, 1.00f );
  colors[ ImGuiCol_PlotLinesHovered ] = ImVec4( 1.00f, 0.43f, 0.35f, 1.00f );
  colors[ ImGuiCol_PlotHistogram ] = ImVec4( 0.90f, 0.70f, 0.00f, 1.00f );
  colors[ ImGuiCol_PlotHistogramHovered ] = ImVec4( 1.00f, 0.60f, 0.00f, 1.00f );
  colors[ ImGuiCol_TextSelectedBg ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.35f );
  colors[ ImGuiCol_DragDropTarget ] = ImVec4( 1.00f, 1.00f, 0.00f, 0.90f );
  colors[ ImGuiCol_NavHighlight ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_NavWindowingHighlight ] = ImVec4( 1.00f, 1.00f, 1.00f, 0.70f );
  colors[ ImGuiCol_NavWindowingDimBg ] = ImVec4( 0.80f, 0.80f, 0.80f, 0.20f );
  colors[ ImGuiCol_ModalWindowDimBg ] = ImVec4( 0.80f, 0.80f, 0.80f, 0.35f );
}

void ImGui::StyleColorsClassic( ImGuiStyle* dst )
{
  ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();
  ImVec4* colors = style->Colors;

  colors[ ImGuiCol_Text ] = ImVec4( 0.90f, 0.90f, 0.90f, 1.00f );
  colors[ ImGuiCol_TextDisabled ] = ImVec4( 0.60f, 0.60f, 0.60f, 1.00f );
  colors[ ImGuiCol_WindowBg ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.70f );
  colors[ ImGuiCol_ChildBg ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.00f );
  colors[ ImGuiCol_PopupBg ] = ImVec4( 0.11f, 0.11f, 0.14f, 0.92f );
  colors[ ImGuiCol_Border ] = ImVec4( 0.50f, 0.50f, 0.50f, 0.50f );
  colors[ ImGuiCol_BorderShadow ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.00f );
  colors[ ImGuiCol_FrameBg ] = ImVec4( 0.43f, 0.43f, 0.43f, 0.39f );
  colors[ ImGuiCol_FrameBgHovered ] = ImVec4( 0.47f, 0.47f, 0.69f, 0.40f );
  colors[ ImGuiCol_FrameBgActive ] = ImVec4( 0.42f, 0.41f, 0.64f, 0.69f );
  colors[ ImGuiCol_TitleBg ] = ImVec4( 0.27f, 0.27f, 0.54f, 0.83f );
  colors[ ImGuiCol_TitleBgActive ] = ImVec4( 0.32f, 0.32f, 0.63f, 0.87f );
  colors[ ImGuiCol_TitleBgCollapsed ] = ImVec4( 0.40f, 0.40f, 0.80f, 0.20f );
  colors[ ImGuiCol_MenuBarBg ] = ImVec4( 0.40f, 0.40f, 0.55f, 0.80f );
  colors[ ImGuiCol_ScrollbarBg ] = ImVec4( 0.20f, 0.25f, 0.30f, 0.60f );
  colors[ ImGuiCol_ScrollbarGrab ] = ImVec4( 0.40f, 0.40f, 0.80f, 0.30f );
  colors[ ImGuiCol_ScrollbarGrabHovered ] = ImVec4( 0.40f, 0.40f, 0.80f, 0.40f );
  colors[ ImGuiCol_ScrollbarGrabActive ] = ImVec4( 0.41f, 0.39f, 0.80f, 0.60f );
  colors[ ImGuiCol_CheckMark ] = ImVec4( 0.90f, 0.90f, 0.90f, 0.50f );
  colors[ ImGuiCol_SliderGrab ] = ImVec4( 1.00f, 1.00f, 1.00f, 0.30f );
  colors[ ImGuiCol_SliderGrabActive ] = ImVec4( 0.41f, 0.39f, 0.80f, 0.60f );
  colors[ ImGuiCol_Button ] = ImVec4( 0.35f, 0.40f, 0.61f, 0.62f );
  colors[ ImGuiCol_ButtonHovered ] = ImVec4( 0.40f, 0.48f, 0.71f, 0.79f );
  colors[ ImGuiCol_ButtonActive ] = ImVec4( 0.46f, 0.54f, 0.80f, 1.00f );
  colors[ ImGuiCol_Header ] = ImVec4( 0.40f, 0.40f, 0.90f, 0.45f );
  colors[ ImGuiCol_HeaderHovered ] = ImVec4( 0.45f, 0.45f, 0.90f, 0.80f );
  colors[ ImGuiCol_HeaderActive ] = ImVec4( 0.53f, 0.53f, 0.87f, 0.80f );
  colors[ ImGuiCol_Separator ] = ImVec4( 0.50f, 0.50f, 0.50f, 0.60f );
  colors[ ImGuiCol_SeparatorHovered ] = ImVec4( 0.60f, 0.60f, 0.70f, 1.00f );
  colors[ ImGuiCol_SeparatorActive ] = ImVec4( 0.70f, 0.70f, 0.90f, 1.00f );
  colors[ ImGuiCol_ResizeGrip ] = ImVec4( 1.00f, 1.00f, 1.00f, 0.16f );
  colors[ ImGuiCol_ResizeGripHovered ] = ImVec4( 0.78f, 0.82f, 1.00f, 0.60f );
  colors[ ImGuiCol_ResizeGripActive ] = ImVec4( 0.78f, 0.82f, 1.00f, 0.90f );
  colors[ ImGuiCol_Tab ] = ImLerp( colors[ ImGuiCol_Header ], colors[ ImGuiCol_TitleBgActive ], 0.80f );
  colors[ ImGuiCol_TabHovered ] = colors[ ImGuiCol_HeaderHovered ];
  colors[ ImGuiCol_TabActive ] = ImLerp( colors[ ImGuiCol_HeaderActive ], colors[ ImGuiCol_TitleBgActive ], 0.60f );
  colors[ ImGuiCol_TabUnfocused ] = ImLerp( colors[ ImGuiCol_Tab ], colors[ ImGuiCol_TitleBg ], 0.80f );
  colors[ ImGuiCol_TabUnfocusedActive ] = ImLerp( colors[ ImGuiCol_TabActive ], colors[ ImGuiCol_TitleBg ], 0.40f );
  colors[ ImGuiCol_PlotLines ] = ImVec4( 1.00f, 1.00f, 1.00f, 1.00f );
  colors[ ImGuiCol_PlotLinesHovered ] = ImVec4( 0.90f, 0.70f, 0.00f, 1.00f );
  colors[ ImGuiCol_PlotHistogram ] = ImVec4( 0.90f, 0.70f, 0.00f, 1.00f );
  colors[ ImGuiCol_PlotHistogramHovered ] = ImVec4( 1.00f, 0.60f, 0.00f, 1.00f );
  colors[ ImGuiCol_TextSelectedBg ] = ImVec4( 0.00f, 0.00f, 1.00f, 0.35f );
  colors[ ImGuiCol_DragDropTarget ] = ImVec4( 1.00f, 1.00f, 0.00f, 0.90f );
  colors[ ImGuiCol_NavHighlight ] = colors[ ImGuiCol_HeaderHovered ];
  colors[ ImGuiCol_NavWindowingHighlight ] = ImVec4( 1.00f, 1.00f, 1.00f, 0.70f );
  colors[ ImGuiCol_NavWindowingDimBg ] = ImVec4( 0.80f, 0.80f, 0.80f, 0.20f );
  colors[ ImGuiCol_ModalWindowDimBg ] = ImVec4( 0.20f, 0.20f, 0.20f, 0.35f );
}

// Those light colors are better suited with a thicker font than the default one + FrameBorder
void ImGui::StyleColorsLight( ImGuiStyle* dst )
{
  ImGuiStyle* style = dst ? dst : &ImGui::GetStyle();
  ImVec4* colors = style->Colors;

  colors[ ImGuiCol_Text ] = ImVec4( 0.00f, 0.00f, 0.00f, 1.00f );
  colors[ ImGuiCol_TextDisabled ] = ImVec4( 0.60f, 0.60f, 0.60f, 1.00f );
  colors[ ImGuiCol_WindowBg ] = ImVec4( 0.94f, 0.94f, 0.94f, 1.00f );
  colors[ ImGuiCol_ChildBg ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.00f );
  colors[ ImGuiCol_PopupBg ] = ImVec4( 1.00f, 1.00f, 1.00f, 0.98f );
  colors[ ImGuiCol_Border ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.30f );
  colors[ ImGuiCol_BorderShadow ] = ImVec4( 0.00f, 0.00f, 0.00f, 0.00f );
  colors[ ImGuiCol_FrameBg ] = ImVec4( 1.00f, 1.00f, 1.00f, 1.00f );
  colors[ ImGuiCol_FrameBgHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.40f );
  colors[ ImGuiCol_FrameBgActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.67f );
  colors[ ImGuiCol_TitleBg ] = ImVec4( 0.96f, 0.96f, 0.96f, 1.00f );
  colors[ ImGuiCol_TitleBgActive ] = ImVec4( 0.82f, 0.82f, 0.82f, 1.00f );
  colors[ ImGuiCol_TitleBgCollapsed ] = ImVec4( 1.00f, 1.00f, 1.00f, 0.51f );
  colors[ ImGuiCol_MenuBarBg ] = ImVec4( 0.86f, 0.86f, 0.86f, 1.00f );
  colors[ ImGuiCol_ScrollbarBg ] = ImVec4( 0.98f, 0.98f, 0.98f, 0.53f );
  colors[ ImGuiCol_ScrollbarGrab ] = ImVec4( 0.69f, 0.69f, 0.69f, 0.80f );
  colors[ ImGuiCol_ScrollbarGrabHovered ] = ImVec4( 0.49f, 0.49f, 0.49f, 0.80f );
  colors[ ImGuiCol_ScrollbarGrabActive ] = ImVec4( 0.49f, 0.49f, 0.49f, 1.00f );
  colors[ ImGuiCol_CheckMark ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_SliderGrab ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.78f );
  colors[ ImGuiCol_SliderGrabActive ] = ImVec4( 0.46f, 0.54f, 0.80f, 0.60f );
  colors[ ImGuiCol_Button ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.40f );
  colors[ ImGuiCol_ButtonHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_ButtonActive ] = ImVec4( 0.06f, 0.53f, 0.98f, 1.00f );
  colors[ ImGuiCol_Header ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.31f );
  colors[ ImGuiCol_HeaderHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.80f );
  colors[ ImGuiCol_HeaderActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 1.00f );
  colors[ ImGuiCol_Separator ] = ImVec4( 0.39f, 0.39f, 0.39f, 0.62f );
  colors[ ImGuiCol_SeparatorHovered ] = ImVec4( 0.14f, 0.44f, 0.80f, 0.78f );
  colors[ ImGuiCol_SeparatorActive ] = ImVec4( 0.14f, 0.44f, 0.80f, 1.00f );
  colors[ ImGuiCol_ResizeGrip ] = ImVec4( 0.80f, 0.80f, 0.80f, 0.56f );
  colors[ ImGuiCol_ResizeGripHovered ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.67f );
  colors[ ImGuiCol_ResizeGripActive ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.95f );
  colors[ ImGuiCol_Tab ] = ImLerp( colors[ ImGuiCol_Header ], colors[ ImGuiCol_TitleBgActive ], 0.90f );
  colors[ ImGuiCol_TabHovered ] = colors[ ImGuiCol_HeaderHovered ];
  colors[ ImGuiCol_TabActive ] = ImLerp( colors[ ImGuiCol_HeaderActive ], colors[ ImGuiCol_TitleBgActive ], 0.60f );
  colors[ ImGuiCol_TabUnfocused ] = ImLerp( colors[ ImGuiCol_Tab ], colors[ ImGuiCol_TitleBg ], 0.80f );
  colors[ ImGuiCol_TabUnfocusedActive ] = ImLerp( colors[ ImGuiCol_TabActive ], colors[ ImGuiCol_TitleBg ], 0.40f );
  colors[ ImGuiCol_PlotLines ] = ImVec4( 0.39f, 0.39f, 0.39f, 1.00f );
  colors[ ImGuiCol_PlotLinesHovered ] = ImVec4( 1.00f, 0.43f, 0.35f, 1.00f );
  colors[ ImGuiCol_PlotHistogram ] = ImVec4( 0.90f, 0.70f, 0.00f, 1.00f );
  colors[ ImGuiCol_PlotHistogramHovered ] = ImVec4( 1.00f, 0.45f, 0.00f, 1.00f );
  colors[ ImGuiCol_TextSelectedBg ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.35f );
  colors[ ImGuiCol_DragDropTarget ] = ImVec4( 0.26f, 0.59f, 0.98f, 0.95f );
  colors[ ImGuiCol_NavHighlight ] = colors[ ImGuiCol_HeaderHovered ];
  colors[ ImGuiCol_NavWindowingHighlight ] = ImVec4( 0.70f, 0.70f, 0.70f, 0.70f );
  colors[ ImGuiCol_NavWindowingDimBg ] = ImVec4( 0.20f, 0.20f, 0.20f, 0.20f );
  colors[ ImGuiCol_ModalWindowDimBg ] = ImVec4( 0.20f, 0.20f, 0.20f, 0.35f );
}

//-----------------------------------------------------------------------------
// ImDrawList
//-----------------------------------------------------------------------------

ImDrawListSharedData::ImDrawListSharedData()
{
  Font = NULL;
  FontSize = 0.0f;
  CurveTessellationTol = 0.0f;
  CircleSegmentMaxError = 0.0f;
  ClipRectFullscreen = ImVec4( -8192.0f, -8192.0f, +8192.0f, +8192.0f );
  InitialFlags = ImDrawListFlags_None;

  // Lookup tables
  for( int i = 0; i < IM_ARRAYSIZE( ArcFastVtx ); i++ )
  {
    const float a = ( ( float )i * 2 * IM_PI ) / ( float )IM_ARRAYSIZE( ArcFastVtx );
    ArcFastVtx[ i ] = ImVec2( ImCos( a ), ImSin( a ) );
  }
  memset( CircleSegmentCounts, 0, sizeof( CircleSegmentCounts ) ); // This will be set by SetCircleSegmentMaxError()
}

void ImDrawListSharedData::SetCircleSegmentMaxError( float max_error )
{
  if( CircleSegmentMaxError == max_error )
    return;
  CircleSegmentMaxError = max_error;
  for( int i = 0; i < IM_ARRAYSIZE( CircleSegmentCounts ); i++ )
  {
    const float radius = i + 1.0f;
    const int segment_count = IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC( radius, CircleSegmentMaxError );
    CircleSegmentCounts[ i ] = ( ImU8 )ImMin( segment_count, 255 );
  }
}

void ImDrawList::Clear()
{
  CmdBuffer.resize( 0 );
  IdxBuffer.resize( 0 );
  VtxBuffer.resize( 0 );
  Flags = _Data ? _Data->InitialFlags : ImDrawListFlags_None;
  _VtxCurrentOffset = 0;
  _VtxCurrentIdx = 0;
  _VtxWritePtr = NULL;
  _IdxWritePtr = NULL;
  _ClipRectStack.resize( 0 );
  _TextureIdStack.resize( 0 );
  _Path.resize( 0 );
  _Splitter.Clear();
}

void ImDrawList::ClearFreeMemory()
{
  CmdBuffer.clear();
  IdxBuffer.clear();
  VtxBuffer.clear();
  _VtxCurrentIdx = 0;
  _VtxWritePtr = NULL;
  _IdxWritePtr = NULL;
  _ClipRectStack.clear();
  _TextureIdStack.clear();
  _Path.clear();
  _Splitter.ClearFreeMemory();
}

ImDrawList* ImDrawList::CloneOutput() const
{
  ImDrawList* dst = IM_NEW( ImDrawList( _Data ) );
  dst->CmdBuffer = CmdBuffer;
  dst->IdxBuffer = IdxBuffer;
  dst->VtxBuffer = VtxBuffer;
  dst->Flags = Flags;
  return dst;
}

// Using macros because C++ is a terrible language, we want guaranteed inline, no code in header, and no overhead in Debug builds
#define GetCurrentClipRect()    (_ClipRectStack.Size ? _ClipRectStack.Data[_ClipRectStack.Size-1]  : _Data->ClipRectFullscreen)
#define GetCurrentTextureId()   (_TextureIdStack.Size ? _TextureIdStack.Data[_TextureIdStack.Size-1] : (ImTextureID)NULL)

void ImDrawList::AddDrawCmd()
{
  ImDrawCmd draw_cmd;
  draw_cmd.ClipRect = GetCurrentClipRect();
  draw_cmd.TextureId = GetCurrentTextureId();
  draw_cmd.VtxOffset = _VtxCurrentOffset;
  draw_cmd.IdxOffset = IdxBuffer.Size;

  IM_ASSERT( draw_cmd.ClipRect.x <= draw_cmd.ClipRect.z && draw_cmd.ClipRect.y <= draw_cmd.ClipRect.w );
  CmdBuffer.push_back( draw_cmd );
}

void ImDrawList::AddCallback( ImDrawCallback callback, void* callback_data )
{
  ImDrawCmd* current_cmd = CmdBuffer.Size ? &CmdBuffer.back() : NULL;
  if( !current_cmd || current_cmd->ElemCount != 0 || current_cmd->UserCallback != NULL )
  {
    AddDrawCmd();
    current_cmd = &CmdBuffer.back();
  }
  current_cmd->UserCallback = callback;
  current_cmd->UserCallbackData = callback_data;

  AddDrawCmd(); // Force a new command after us (see comment below)
}

// Our scheme may appears a bit unusual, basically we want the most-common calls AddLine AddRect etc. to not have to perform any check so we always have a command ready in the stack.
// The cost of figuring out if a new command has to be added or if we can merge is paid in those Update** functions only.
void ImDrawList::UpdateClipRect()
{
  // If current command is used with different settings we need to add a new command
  const ImVec4 curr_clip_rect = GetCurrentClipRect();
  ImDrawCmd* curr_cmd = CmdBuffer.Size > 0 ? &CmdBuffer.Data[ CmdBuffer.Size - 1 ] : NULL;
  if( !curr_cmd || ( curr_cmd->ElemCount != 0 && memcmp( &curr_cmd->ClipRect, &curr_clip_rect, sizeof( ImVec4 ) ) != 0 ) || curr_cmd->UserCallback != NULL )
  {
    AddDrawCmd();
    return;
  }

  // Try to merge with previous command if it matches, else use current command
  ImDrawCmd* prev_cmd = CmdBuffer.Size > 1 ? curr_cmd - 1 : NULL;
  if( curr_cmd->ElemCount == 0 && prev_cmd && memcmp( &prev_cmd->ClipRect, &curr_clip_rect, sizeof( ImVec4 ) ) == 0 && prev_cmd->TextureId == GetCurrentTextureId() && prev_cmd->UserCallback == NULL )
    CmdBuffer.pop_back();
  else
    curr_cmd->ClipRect = curr_clip_rect;
}

void ImDrawList::UpdateTextureID()
{
  // If current command is used with different settings we need to add a new command
  const ImTextureID curr_texture_id = GetCurrentTextureId();
  ImDrawCmd* curr_cmd = CmdBuffer.Size ? &CmdBuffer.back() : NULL;
  if( !curr_cmd || ( curr_cmd->ElemCount != 0 && curr_cmd->TextureId != curr_texture_id ) || curr_cmd->UserCallback != NULL )
  {
    AddDrawCmd();
    return;
  }

  // Try to merge with previous command if it matches, else use current command
  ImDrawCmd* prev_cmd = CmdBuffer.Size > 1 ? curr_cmd - 1 : NULL;
  if( curr_cmd->ElemCount == 0 && prev_cmd && prev_cmd->TextureId == curr_texture_id && memcmp( &prev_cmd->ClipRect, &GetCurrentClipRect(), sizeof( ImVec4 ) ) == 0 && prev_cmd->UserCallback == NULL )
    CmdBuffer.pop_back();
  else
    curr_cmd->TextureId = curr_texture_id;
}

#undef GetCurrentClipRect
#undef GetCurrentTextureId

// Render-level scissoring. This is passed down to your render function but not used for CPU-side coarse clipping. Prefer using higher-level ImGui::PushClipRect() to affect logic (hit-testing and widget culling)
void ImDrawList::PushClipRect( ImVec2 cr_min, ImVec2 cr_max, bool intersect_with_current_clip_rect )
{
  ImVec4 cr( cr_min.x, cr_min.y, cr_max.x, cr_max.y );
  if( intersect_with_current_clip_rect && _ClipRectStack.Size )
  {
    ImVec4 current = _ClipRectStack.Data[ _ClipRectStack.Size - 1 ];
    if( cr.x < current.x ) cr.x = current.x;
    if( cr.y < current.y ) cr.y = current.y;
    if( cr.z > current.z ) cr.z = current.z;
    if( cr.w > current.w ) cr.w = current.w;
  }
  cr.z = ImMax( cr.x, cr.z );
  cr.w = ImMax( cr.y, cr.w );

  _ClipRectStack.push_back( cr );
  UpdateClipRect();
}

void ImDrawList::PushClipRectFullScreen()
{
  PushClipRect( ImVec2( _Data->ClipRectFullscreen.x, _Data->ClipRectFullscreen.y ), ImVec2( _Data->ClipRectFullscreen.z, _Data->ClipRectFullscreen.w ) );
}

void ImDrawList::PopClipRect()
{
  IM_ASSERT( _ClipRectStack.Size > 0 );
  _ClipRectStack.pop_back();
  UpdateClipRect();
}

void ImDrawList::PushTextureID( ImTextureID texture_id )
{
  _TextureIdStack.push_back( texture_id );
  UpdateTextureID();
}

void ImDrawList::PopTextureID()
{
  IM_ASSERT( _TextureIdStack.Size > 0 );
  _TextureIdStack.pop_back();
  UpdateTextureID();
}

// Reserve space for a number of vertices and indices.
// You must finish filling your reserved data before calling PrimReserve() again, as it may reallocate or
// submit the intermediate results. PrimUnreserve() can be used to release unused allocations.
void ImDrawList::PrimReserve( int idx_count, int vtx_count )
{
  // Large mesh support (when enabled)
  IM_ASSERT_PARANOID( idx_count >= 0 && vtx_count >= 0 );
  if( sizeof( ImDrawIdx ) == 2 && ( _VtxCurrentIdx + vtx_count >= ( 1 << 16 ) ) && ( Flags & ImDrawListFlags_AllowVtxOffset ) )
  {
    _VtxCurrentOffset = VtxBuffer.Size;
    _VtxCurrentIdx = 0;
    AddDrawCmd();
  }

  ImDrawCmd& draw_cmd = CmdBuffer.Data[ CmdBuffer.Size - 1 ];
  draw_cmd.ElemCount += idx_count;

  int vtx_buffer_old_size = VtxBuffer.Size;
  VtxBuffer.resize( vtx_buffer_old_size + vtx_count );
  _VtxWritePtr = VtxBuffer.Data + vtx_buffer_old_size;

  int idx_buffer_old_size = IdxBuffer.Size;
  IdxBuffer.resize( idx_buffer_old_size + idx_count );
  _IdxWritePtr = IdxBuffer.Data + idx_buffer_old_size;
}

// Release the a number of reserved vertices/indices from the end of the last reservation made with PrimReserve().
void ImDrawList::PrimUnreserve( int idx_count, int vtx_count )
{
  IM_ASSERT_PARANOID( idx_count >= 0 && vtx_count >= 0 );

  ImDrawCmd& draw_cmd = CmdBuffer.Data[ CmdBuffer.Size - 1 ];
  draw_cmd.ElemCount -= idx_count;
  VtxBuffer.shrink( VtxBuffer.Size - vtx_count );
  IdxBuffer.shrink( IdxBuffer.Size - idx_count );
}

// Fully unrolled with inline call to keep our debug builds decently fast.
void ImDrawList::PrimRect( const ImVec2& a, const ImVec2& c, ImU32 col )
{
  ImVec2 b( c.x, a.y ), d( a.x, c.y ), uv( _Data->TexUvWhitePixel );
  ImDrawIdx idx = ( ImDrawIdx )_VtxCurrentIdx;
  _IdxWritePtr[ 0 ] = idx; _IdxWritePtr[ 1 ] = ( ImDrawIdx )( idx + 1 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( idx + 2 );
  _IdxWritePtr[ 3 ] = idx; _IdxWritePtr[ 4 ] = ( ImDrawIdx )( idx + 2 ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( idx + 3 );
  _VtxWritePtr[ 0 ].pos = a; _VtxWritePtr[ 0 ].uv = uv; _VtxWritePtr[ 0 ].col = col;
  _VtxWritePtr[ 1 ].pos = b; _VtxWritePtr[ 1 ].uv = uv; _VtxWritePtr[ 1 ].col = col;
  _VtxWritePtr[ 2 ].pos = c; _VtxWritePtr[ 2 ].uv = uv; _VtxWritePtr[ 2 ].col = col;
  _VtxWritePtr[ 3 ].pos = d; _VtxWritePtr[ 3 ].uv = uv; _VtxWritePtr[ 3 ].col = col;
  _VtxWritePtr += 4;
  _VtxCurrentIdx += 4;
  _IdxWritePtr += 6;
}

void ImDrawList::PrimRectUV( const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& uv_c, ImU32 col )
{
  ImVec2 b( c.x, a.y ), d( a.x, c.y ), uv_b( uv_c.x, uv_a.y ), uv_d( uv_a.x, uv_c.y );
  ImDrawIdx idx = ( ImDrawIdx )_VtxCurrentIdx;
  _IdxWritePtr[ 0 ] = idx; _IdxWritePtr[ 1 ] = ( ImDrawIdx )( idx + 1 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( idx + 2 );
  _IdxWritePtr[ 3 ] = idx; _IdxWritePtr[ 4 ] = ( ImDrawIdx )( idx + 2 ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( idx + 3 );
  _VtxWritePtr[ 0 ].pos = a; _VtxWritePtr[ 0 ].uv = uv_a; _VtxWritePtr[ 0 ].col = col;
  _VtxWritePtr[ 1 ].pos = b; _VtxWritePtr[ 1 ].uv = uv_b; _VtxWritePtr[ 1 ].col = col;
  _VtxWritePtr[ 2 ].pos = c; _VtxWritePtr[ 2 ].uv = uv_c; _VtxWritePtr[ 2 ].col = col;
  _VtxWritePtr[ 3 ].pos = d; _VtxWritePtr[ 3 ].uv = uv_d; _VtxWritePtr[ 3 ].col = col;
  _VtxWritePtr += 4;
  _VtxCurrentIdx += 4;
  _IdxWritePtr += 6;
}

void ImDrawList::PrimQuadUV( const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, const ImVec2& uv_a, const ImVec2& uv_b, const ImVec2& uv_c, const ImVec2& uv_d, ImU32 col )
{
  ImDrawIdx idx = ( ImDrawIdx )_VtxCurrentIdx;
  _IdxWritePtr[ 0 ] = idx; _IdxWritePtr[ 1 ] = ( ImDrawIdx )( idx + 1 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( idx + 2 );
  _IdxWritePtr[ 3 ] = idx; _IdxWritePtr[ 4 ] = ( ImDrawIdx )( idx + 2 ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( idx + 3 );
  _VtxWritePtr[ 0 ].pos = a; _VtxWritePtr[ 0 ].uv = uv_a; _VtxWritePtr[ 0 ].col = col;
  _VtxWritePtr[ 1 ].pos = b; _VtxWritePtr[ 1 ].uv = uv_b; _VtxWritePtr[ 1 ].col = col;
  _VtxWritePtr[ 2 ].pos = c; _VtxWritePtr[ 2 ].uv = uv_c; _VtxWritePtr[ 2 ].col = col;
  _VtxWritePtr[ 3 ].pos = d; _VtxWritePtr[ 3 ].uv = uv_d; _VtxWritePtr[ 3 ].col = col;
  _VtxWritePtr += 4;
  _VtxCurrentIdx += 4;
  _IdxWritePtr += 6;
}

// On AddPolyline() and AddConvexPolyFilled() we intentionally avoid using ImVec2 and superfluous function calls to optimize debug/non-inlined builds.
// Those macros expects l-values.
#define IM_NORMALIZE2F_OVER_ZERO(VX,VY)     do { float d2 = VX*VX + VY*VY; if (d2 > 0.0f) { float inv_len = 1.0f / ImSqrt(d2); VX *= inv_len; VY *= inv_len; } } while (0)
#define IM_FIXNORMAL2F(VX,VY)               do { float d2 = VX*VX + VY*VY; if (d2 < 0.5f) d2 = 0.5f; float inv_lensq = 1.0f / d2; VX *= inv_lensq; VY *= inv_lensq; } while (0)

// TODO: Thickness anti-aliased lines cap are missing their AA fringe.
// We avoid using the ImVec2 math operators here to reduce cost to a minimum for debug/non-inlined builds.
void ImDrawList::AddPolyline( const ImVec2* points, const int points_count, ImU32 col, bool closed, float thickness )
{
  if( points_count < 2 )
    return;

  const ImVec2 uv = _Data->TexUvWhitePixel;

  int count = points_count;
  if( !closed )
    count = points_count - 1;

  const bool thick_line = thickness > 1.0f;
  if( Flags & ImDrawListFlags_AntiAliasedLines )
  {
    // Anti-aliased stroke
    const float AA_SIZE = 1.0f;
    const ImU32 col_trans = col & ~IM_COL32_A_MASK;

    const int idx_count = thick_line ? count * 18 : count * 12;
    const int vtx_count = thick_line ? points_count * 4 : points_count * 3;
    PrimReserve( idx_count, vtx_count );

    // Temporary buffer
    ImVec2* temp_normals = ( ImVec2* )alloca( points_count * ( thick_line ? 5 : 3 ) * sizeof( ImVec2 ) ); //-V630
    ImVec2* temp_points = temp_normals + points_count;

    for( int i1 = 0; i1 < count; i1++ )
    {
      const int i2 = ( i1 + 1 ) == points_count ? 0 : i1 + 1;
      float dx = points[ i2 ].x - points[ i1 ].x;
      float dy = points[ i2 ].y - points[ i1 ].y;
      IM_NORMALIZE2F_OVER_ZERO( dx, dy );
      temp_normals[ i1 ].x = dy;
      temp_normals[ i1 ].y = -dx;
    }
    if( !closed )
      temp_normals[ points_count - 1 ] = temp_normals[ points_count - 2 ];

    if( !thick_line )
    {
      if( !closed )
      {
        temp_points[ 0 ] = points[ 0 ] + temp_normals[ 0 ] * AA_SIZE;
        temp_points[ 1 ] = points[ 0 ] - temp_normals[ 0 ] * AA_SIZE;
        temp_points[ ( points_count - 1 ) * 2 + 0 ] = points[ points_count - 1 ] + temp_normals[ points_count - 1 ] * AA_SIZE;
        temp_points[ ( points_count - 1 ) * 2 + 1 ] = points[ points_count - 1 ] - temp_normals[ points_count - 1 ] * AA_SIZE;
      }

      // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.
      unsigned int idx1 = _VtxCurrentIdx;
      for( int i1 = 0; i1 < count; i1++ )
      {
        const int i2 = ( i1 + 1 ) == points_count ? 0 : i1 + 1;
        unsigned int idx2 = ( i1 + 1 ) == points_count ? _VtxCurrentIdx : idx1 + 3;

        // Average normals
        float dm_x = ( temp_normals[ i1 ].x + temp_normals[ i2 ].x ) * 0.5f;
        float dm_y = ( temp_normals[ i1 ].y + temp_normals[ i2 ].y ) * 0.5f;
        IM_FIXNORMAL2F( dm_x, dm_y );
        dm_x *= AA_SIZE;
        dm_y *= AA_SIZE;

        // Add temporary vertices
        ImVec2* out_vtx = &temp_points[ i2 * 2 ];
        out_vtx[ 0 ].x = points[ i2 ].x + dm_x;
        out_vtx[ 0 ].y = points[ i2 ].y + dm_y;
        out_vtx[ 1 ].x = points[ i2 ].x - dm_x;
        out_vtx[ 1 ].y = points[ i2 ].y - dm_y;

        // Add indexes
        _IdxWritePtr[ 0 ] = ( ImDrawIdx )( idx2 + 0 ); _IdxWritePtr[ 1 ] = ( ImDrawIdx )( idx1 + 0 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( idx1 + 2 );
        _IdxWritePtr[ 3 ] = ( ImDrawIdx )( idx1 + 2 ); _IdxWritePtr[ 4 ] = ( ImDrawIdx )( idx2 + 2 ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( idx2 + 0 );
        _IdxWritePtr[ 6 ] = ( ImDrawIdx )( idx2 + 1 ); _IdxWritePtr[ 7 ] = ( ImDrawIdx )( idx1 + 1 ); _IdxWritePtr[ 8 ] = ( ImDrawIdx )( idx1 + 0 );
        _IdxWritePtr[ 9 ] = ( ImDrawIdx )( idx1 + 0 ); _IdxWritePtr[ 10 ] = ( ImDrawIdx )( idx2 + 0 ); _IdxWritePtr[ 11 ] = ( ImDrawIdx )( idx2 + 1 );
        _IdxWritePtr += 12;

        idx1 = idx2;
      }

      // Add vertices
      for( int i = 0; i < points_count; i++ )
      {
        _VtxWritePtr[ 0 ].pos = points[ i ];          _VtxWritePtr[ 0 ].uv = uv; _VtxWritePtr[ 0 ].col = col;
        _VtxWritePtr[ 1 ].pos = temp_points[ i * 2 + 0 ]; _VtxWritePtr[ 1 ].uv = uv; _VtxWritePtr[ 1 ].col = col_trans;
        _VtxWritePtr[ 2 ].pos = temp_points[ i * 2 + 1 ]; _VtxWritePtr[ 2 ].uv = uv; _VtxWritePtr[ 2 ].col = col_trans;
        _VtxWritePtr += 3;
      }
    }
    else
    {
      const float half_inner_thickness = ( thickness - AA_SIZE ) * 0.5f;
      if( !closed )
      {
        temp_points[ 0 ] = points[ 0 ] + temp_normals[ 0 ] * ( half_inner_thickness + AA_SIZE );
        temp_points[ 1 ] = points[ 0 ] + temp_normals[ 0 ] * ( half_inner_thickness );
        temp_points[ 2 ] = points[ 0 ] - temp_normals[ 0 ] * ( half_inner_thickness );
        temp_points[ 3 ] = points[ 0 ] - temp_normals[ 0 ] * ( half_inner_thickness + AA_SIZE );
        temp_points[ ( points_count - 1 ) * 4 + 0 ] = points[ points_count - 1 ] + temp_normals[ points_count - 1 ] * ( half_inner_thickness + AA_SIZE );
        temp_points[ ( points_count - 1 ) * 4 + 1 ] = points[ points_count - 1 ] + temp_normals[ points_count - 1 ] * ( half_inner_thickness );
        temp_points[ ( points_count - 1 ) * 4 + 2 ] = points[ points_count - 1 ] - temp_normals[ points_count - 1 ] * ( half_inner_thickness );
        temp_points[ ( points_count - 1 ) * 4 + 3 ] = points[ points_count - 1 ] - temp_normals[ points_count - 1 ] * ( half_inner_thickness + AA_SIZE );
      }

      // FIXME-OPT: Merge the different loops, possibly remove the temporary buffer.
      unsigned int idx1 = _VtxCurrentIdx;
      for( int i1 = 0; i1 < count; i1++ )
      {
        const int i2 = ( i1 + 1 ) == points_count ? 0 : i1 + 1;
        unsigned int idx2 = ( i1 + 1 ) == points_count ? _VtxCurrentIdx : idx1 + 4;

        // Average normals
        float dm_x = ( temp_normals[ i1 ].x + temp_normals[ i2 ].x ) * 0.5f;
        float dm_y = ( temp_normals[ i1 ].y + temp_normals[ i2 ].y ) * 0.5f;
        IM_FIXNORMAL2F( dm_x, dm_y );
        float dm_out_x = dm_x * ( half_inner_thickness + AA_SIZE );
        float dm_out_y = dm_y * ( half_inner_thickness + AA_SIZE );
        float dm_in_x = dm_x * half_inner_thickness;
        float dm_in_y = dm_y * half_inner_thickness;

        // Add temporary vertices
        ImVec2* out_vtx = &temp_points[ i2 * 4 ];
        out_vtx[ 0 ].x = points[ i2 ].x + dm_out_x;
        out_vtx[ 0 ].y = points[ i2 ].y + dm_out_y;
        out_vtx[ 1 ].x = points[ i2 ].x + dm_in_x;
        out_vtx[ 1 ].y = points[ i2 ].y + dm_in_y;
        out_vtx[ 2 ].x = points[ i2 ].x - dm_in_x;
        out_vtx[ 2 ].y = points[ i2 ].y - dm_in_y;
        out_vtx[ 3 ].x = points[ i2 ].x - dm_out_x;
        out_vtx[ 3 ].y = points[ i2 ].y - dm_out_y;

        // Add indexes
        _IdxWritePtr[ 0 ] = ( ImDrawIdx )( idx2 + 1 ); _IdxWritePtr[ 1 ] = ( ImDrawIdx )( idx1 + 1 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( idx1 + 2 );
        _IdxWritePtr[ 3 ] = ( ImDrawIdx )( idx1 + 2 ); _IdxWritePtr[ 4 ] = ( ImDrawIdx )( idx2 + 2 ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( idx2 + 1 );
        _IdxWritePtr[ 6 ] = ( ImDrawIdx )( idx2 + 1 ); _IdxWritePtr[ 7 ] = ( ImDrawIdx )( idx1 + 1 ); _IdxWritePtr[ 8 ] = ( ImDrawIdx )( idx1 + 0 );
        _IdxWritePtr[ 9 ] = ( ImDrawIdx )( idx1 + 0 ); _IdxWritePtr[ 10 ] = ( ImDrawIdx )( idx2 + 0 ); _IdxWritePtr[ 11 ] = ( ImDrawIdx )( idx2 + 1 );
        _IdxWritePtr[ 12 ] = ( ImDrawIdx )( idx2 + 2 ); _IdxWritePtr[ 13 ] = ( ImDrawIdx )( idx1 + 2 ); _IdxWritePtr[ 14 ] = ( ImDrawIdx )( idx1 + 3 );
        _IdxWritePtr[ 15 ] = ( ImDrawIdx )( idx1 + 3 ); _IdxWritePtr[ 16 ] = ( ImDrawIdx )( idx2 + 3 ); _IdxWritePtr[ 17 ] = ( ImDrawIdx )( idx2 + 2 );
        _IdxWritePtr += 18;

        idx1 = idx2;
      }

      // Add vertices
      for( int i = 0; i < points_count; i++ )
      {
        _VtxWritePtr[ 0 ].pos = temp_points[ i * 4 + 0 ]; _VtxWritePtr[ 0 ].uv = uv; _VtxWritePtr[ 0 ].col = col_trans;
        _VtxWritePtr[ 1 ].pos = temp_points[ i * 4 + 1 ]; _VtxWritePtr[ 1 ].uv = uv; _VtxWritePtr[ 1 ].col = col;
        _VtxWritePtr[ 2 ].pos = temp_points[ i * 4 + 2 ]; _VtxWritePtr[ 2 ].uv = uv; _VtxWritePtr[ 2 ].col = col;
        _VtxWritePtr[ 3 ].pos = temp_points[ i * 4 + 3 ]; _VtxWritePtr[ 3 ].uv = uv; _VtxWritePtr[ 3 ].col = col_trans;
        _VtxWritePtr += 4;
      }
    }
    _VtxCurrentIdx += ( ImDrawIdx )vtx_count;
  }
  else
  {
    // Non Anti-aliased Stroke
    const int idx_count = count * 6;
    const int vtx_count = count * 4;      // FIXME-OPT: Not sharing edges
    PrimReserve( idx_count, vtx_count );

    for( int i1 = 0; i1 < count; i1++ )
    {
      const int i2 = ( i1 + 1 ) == points_count ? 0 : i1 + 1;
      const ImVec2& p1 = points[ i1 ];
      const ImVec2& p2 = points[ i2 ];

      float dx = p2.x - p1.x;
      float dy = p2.y - p1.y;
      IM_NORMALIZE2F_OVER_ZERO( dx, dy );
      dx *= ( thickness * 0.5f );
      dy *= ( thickness * 0.5f );

      _VtxWritePtr[ 0 ].pos.x = p1.x + dy; _VtxWritePtr[ 0 ].pos.y = p1.y - dx; _VtxWritePtr[ 0 ].uv = uv; _VtxWritePtr[ 0 ].col = col;
      _VtxWritePtr[ 1 ].pos.x = p2.x + dy; _VtxWritePtr[ 1 ].pos.y = p2.y - dx; _VtxWritePtr[ 1 ].uv = uv; _VtxWritePtr[ 1 ].col = col;
      _VtxWritePtr[ 2 ].pos.x = p2.x - dy; _VtxWritePtr[ 2 ].pos.y = p2.y + dx; _VtxWritePtr[ 2 ].uv = uv; _VtxWritePtr[ 2 ].col = col;
      _VtxWritePtr[ 3 ].pos.x = p1.x - dy; _VtxWritePtr[ 3 ].pos.y = p1.y + dx; _VtxWritePtr[ 3 ].uv = uv; _VtxWritePtr[ 3 ].col = col;
      _VtxWritePtr += 4;

      _IdxWritePtr[ 0 ] = ( ImDrawIdx )( _VtxCurrentIdx ); _IdxWritePtr[ 1 ] = ( ImDrawIdx )( _VtxCurrentIdx + 1 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( _VtxCurrentIdx + 2 );
      _IdxWritePtr[ 3 ] = ( ImDrawIdx )( _VtxCurrentIdx ); _IdxWritePtr[ 4 ] = ( ImDrawIdx )( _VtxCurrentIdx + 2 ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( _VtxCurrentIdx + 3 );
      _IdxWritePtr += 6;
      _VtxCurrentIdx += 4;
    }
  }
}

// We intentionally avoid using ImVec2 and its math operators here to reduce cost to a minimum for debug/non-inlined builds.
void ImDrawList::AddConvexPolyFilled( const ImVec2* points, const int points_count, ImU32 col )
{
  if( points_count < 3 )
    return;

  const ImVec2 uv = _Data->TexUvWhitePixel;

  if( Flags & ImDrawListFlags_AntiAliasedFill )
  {
    // Anti-aliased Fill
    const float AA_SIZE = 1.0f;
    const ImU32 col_trans = col & ~IM_COL32_A_MASK;
    const int idx_count = ( points_count - 2 ) * 3 + points_count * 6;
    const int vtx_count = ( points_count * 2 );
    PrimReserve( idx_count, vtx_count );

    // Add indexes for fill
    unsigned int vtx_inner_idx = _VtxCurrentIdx;
    unsigned int vtx_outer_idx = _VtxCurrentIdx + 1;
    for( int i = 2; i < points_count; i++ )
    {
      _IdxWritePtr[ 0 ] = ( ImDrawIdx )( vtx_inner_idx ); _IdxWritePtr[ 1 ] = ( ImDrawIdx )( vtx_inner_idx + ( ( i - 1 ) << 1 ) ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( vtx_inner_idx + ( i << 1 ) );
      _IdxWritePtr += 3;
    }

    // Compute normals
    ImVec2* temp_normals = ( ImVec2* )alloca( points_count * sizeof( ImVec2 ) ); //-V630
    for( int i0 = points_count - 1, i1 = 0; i1 < points_count; i0 = i1++ )
    {
      const ImVec2& p0 = points[ i0 ];
      const ImVec2& p1 = points[ i1 ];
      float dx = p1.x - p0.x;
      float dy = p1.y - p0.y;
      IM_NORMALIZE2F_OVER_ZERO( dx, dy );
      temp_normals[ i0 ].x = dy;
      temp_normals[ i0 ].y = -dx;
    }

    for( int i0 = points_count - 1, i1 = 0; i1 < points_count; i0 = i1++ )
    {
      // Average normals
      const ImVec2& n0 = temp_normals[ i0 ];
      const ImVec2& n1 = temp_normals[ i1 ];
      float dm_x = ( n0.x + n1.x ) * 0.5f;
      float dm_y = ( n0.y + n1.y ) * 0.5f;
      IM_FIXNORMAL2F( dm_x, dm_y );
      dm_x *= AA_SIZE * 0.5f;
      dm_y *= AA_SIZE * 0.5f;

      // Add vertices
      _VtxWritePtr[ 0 ].pos.x = ( points[ i1 ].x - dm_x ); _VtxWritePtr[ 0 ].pos.y = ( points[ i1 ].y - dm_y ); _VtxWritePtr[ 0 ].uv = uv; _VtxWritePtr[ 0 ].col = col;        // Inner
      _VtxWritePtr[ 1 ].pos.x = ( points[ i1 ].x + dm_x ); _VtxWritePtr[ 1 ].pos.y = ( points[ i1 ].y + dm_y ); _VtxWritePtr[ 1 ].uv = uv; _VtxWritePtr[ 1 ].col = col_trans;  // Outer
      _VtxWritePtr += 2;

      // Add indexes for fringes
      _IdxWritePtr[ 0 ] = ( ImDrawIdx )( vtx_inner_idx + ( i1 << 1 ) ); _IdxWritePtr[ 1 ] = ( ImDrawIdx )( vtx_inner_idx + ( i0 << 1 ) ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( vtx_outer_idx + ( i0 << 1 ) );
      _IdxWritePtr[ 3 ] = ( ImDrawIdx )( vtx_outer_idx + ( i0 << 1 ) ); _IdxWritePtr[ 4 ] = ( ImDrawIdx )( vtx_outer_idx + ( i1 << 1 ) ); _IdxWritePtr[ 5 ] = ( ImDrawIdx )( vtx_inner_idx + ( i1 << 1 ) );
      _IdxWritePtr += 6;
    }
    _VtxCurrentIdx += ( ImDrawIdx )vtx_count;
  }
  else
  {
    // Non Anti-aliased Fill
    const int idx_count = ( points_count - 2 ) * 3;
    const int vtx_count = points_count;
    PrimReserve( idx_count, vtx_count );
    for( int i = 0; i < vtx_count; i++ )
    {
      _VtxWritePtr[ 0 ].pos = points[ i ]; _VtxWritePtr[ 0 ].uv = uv; _VtxWritePtr[ 0 ].col = col;
      _VtxWritePtr++;
    }
    for( int i = 2; i < points_count; i++ )
    {
      _IdxWritePtr[ 0 ] = ( ImDrawIdx )( _VtxCurrentIdx ); _IdxWritePtr[ 1 ] = ( ImDrawIdx )( _VtxCurrentIdx + i - 1 ); _IdxWritePtr[ 2 ] = ( ImDrawIdx )( _VtxCurrentIdx + i );
      _IdxWritePtr += 3;
    }
    _VtxCurrentIdx += ( ImDrawIdx )vtx_count;
  }
}

void ImDrawList::PathArcToFast( const ImVec2& center, float radius, int a_min_of_12, int a_max_of_12 )
{
  if( radius == 0.0f || a_min_of_12 > a_max_of_12 )
  {
    _Path.push_back( center );
    return;
  }

  // For legacy reason the PathArcToFast() always takes angles where 2*PI is represented by 12,
  // but it is possible to set IM_DRAWLIST_ARCFAST_TESSELATION_MULTIPLIER to a higher value. This should compile to a no-op otherwise.
#if IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER != 1
  a_min_of_12 *= IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER;
  a_max_of_12 *= IM_DRAWLIST_ARCFAST_TESSELLATION_MULTIPLIER;
#endif

  _Path.reserve( _Path.Size + ( a_max_of_12 - a_min_of_12 + 1 ) );
  for( int a = a_min_of_12; a <= a_max_of_12; a++ )
  {
    const ImVec2& c = _Data->ArcFastVtx[ a % IM_ARRAYSIZE( _Data->ArcFastVtx ) ];
    _Path.push_back( ImVec2( center.x + c.x * radius, center.y + c.y * radius ) );
  }
}

void ImDrawList::PathArcTo( const ImVec2& center, float radius, float a_min, float a_max, int num_segments )
{
  if( radius == 0.0f )
  {
    _Path.push_back( center );
    return;
  }

  // Note that we are adding a point at both a_min and a_max.
  // If you are trying to draw a full closed circle you don't want the overlapping points!
  _Path.reserve( _Path.Size + ( num_segments + 1 ) );
  for( int i = 0; i <= num_segments; i++ )
  {
    const float a = a_min + ( ( float )i / ( float )num_segments ) * ( a_max - a_min );
    _Path.push_back( ImVec2( center.x + ImCos( a ) * radius, center.y + ImSin( a ) * radius ) );
  }
}

ImVec2 ImBezierCalc( const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, float t )
{
  float u = 1.0f - t;
  float w1 = u * u * u;
  float w2 = 3 * u * u * t;
  float w3 = 3 * u * t * t;
  float w4 = t * t * t;
  return ImVec2( w1 * p1.x + w2 * p2.x + w3 * p3.x + w4 * p4.x, w1 * p1.y + w2 * p2.y + w3 * p3.y + w4 * p4.y );
}

// Closely mimics BezierClosestPointCasteljauStep() in imgui.cpp
static void PathBezierToCasteljau( ImVector<ImVec2>* path, float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4, float tess_tol, int level )
{
  float dx = x4 - x1;
  float dy = y4 - y1;
  float d2 = ( ( x2 - x4 ) * dy - ( y2 - y4 ) * dx );
  float d3 = ( ( x3 - x4 ) * dy - ( y3 - y4 ) * dx );
  d2 = ( d2 >= 0 ) ? d2 : -d2;
  d3 = ( d3 >= 0 ) ? d3 : -d3;
  if( ( d2 + d3 ) * ( d2 + d3 ) < tess_tol * ( dx * dx + dy * dy ) )
  {
    path->push_back( ImVec2( x4, y4 ) );
  }
  else if( level < 10 )
  {
    float x12 = ( x1 + x2 ) * 0.5f, y12 = ( y1 + y2 ) * 0.5f;
    float x23 = ( x2 + x3 ) * 0.5f, y23 = ( y2 + y3 ) * 0.5f;
    float x34 = ( x3 + x4 ) * 0.5f, y34 = ( y3 + y4 ) * 0.5f;
    float x123 = ( x12 + x23 ) * 0.5f, y123 = ( y12 + y23 ) * 0.5f;
    float x234 = ( x23 + x34 ) * 0.5f, y234 = ( y23 + y34 ) * 0.5f;
    float x1234 = ( x123 + x234 ) * 0.5f, y1234 = ( y123 + y234 ) * 0.5f;
    PathBezierToCasteljau( path, x1, y1, x12, y12, x123, y123, x1234, y1234, tess_tol, level + 1 );
    PathBezierToCasteljau( path, x1234, y1234, x234, y234, x34, y34, x4, y4, tess_tol, level + 1 );
  }
}

void ImDrawList::PathBezierCurveTo( const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, int num_segments )
{
  ImVec2 p1 = _Path.back();
  if( num_segments == 0 )
  {
    PathBezierToCasteljau( &_Path, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, p4.x, p4.y, _Data->CurveTessellationTol, 0 ); // Auto-tessellated
  }
  else
  {
    float t_step = 1.0f / ( float )num_segments;
    for( int i_step = 1; i_step <= num_segments; i_step++ )
      _Path.push_back( ImBezierCalc( p1, p2, p3, p4, t_step * i_step ) );
  }
}

void ImDrawList::PathRect( const ImVec2& a, const ImVec2& b, float rounding, ImDrawCornerFlags rounding_corners )
{
  rounding = ImMin( rounding, ImFabs( b.x - a.x ) * ( ( ( rounding_corners & ImDrawCornerFlags_Top ) == ImDrawCornerFlags_Top ) || ( ( rounding_corners & ImDrawCornerFlags_Bot ) == ImDrawCornerFlags_Bot ) ? 0.5f : 1.0f ) - 1.0f );
  rounding = ImMin( rounding, ImFabs( b.y - a.y ) * ( ( ( rounding_corners & ImDrawCornerFlags_Left ) == ImDrawCornerFlags_Left ) || ( ( rounding_corners & ImDrawCornerFlags_Right ) == ImDrawCornerFlags_Right ) ? 0.5f : 1.0f ) - 1.0f );

  if( rounding <= 0.0f || rounding_corners == 0 )
  {
    PathLineTo( a );
    PathLineTo( ImVec2( b.x, a.y ) );
    PathLineTo( b );
    PathLineTo( ImVec2( a.x, b.y ) );
  }
  else
  {
    const float rounding_tl = ( rounding_corners & ImDrawCornerFlags_TopLeft ) ? rounding : 0.0f;
    const float rounding_tr = ( rounding_corners & ImDrawCornerFlags_TopRight ) ? rounding : 0.0f;
    const float rounding_br = ( rounding_corners & ImDrawCornerFlags_BotRight ) ? rounding : 0.0f;
    const float rounding_bl = ( rounding_corners & ImDrawCornerFlags_BotLeft ) ? rounding : 0.0f;
    PathArcToFast( ImVec2( a.x + rounding_tl, a.y + rounding_tl ), rounding_tl, 6, 9 );
    PathArcToFast( ImVec2( b.x - rounding_tr, a.y + rounding_tr ), rounding_tr, 9, 12 );
    PathArcToFast( ImVec2( b.x - rounding_br, b.y - rounding_br ), rounding_br, 0, 3 );
    PathArcToFast( ImVec2( a.x + rounding_bl, b.y - rounding_bl ), rounding_bl, 3, 6 );
  }
}

void ImDrawList::AddLine( const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;
  PathLineTo( p1 + ImVec2( 0.5f, 0.5f ) );
  PathLineTo( p2 + ImVec2( 0.5f, 0.5f ) );
  PathStroke( col, false, thickness );
}

// p_min = upper-left, p_max = lower-right
// Note we don't render 1 pixels sized rectangles properly.
void ImDrawList::AddRect( const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners, float thickness )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;
  if( Flags & ImDrawListFlags_AntiAliasedLines )
    PathRect( p_min + ImVec2( 0.50f, 0.50f ), p_max - ImVec2( 0.50f, 0.50f ), rounding, rounding_corners );
  else
    PathRect( p_min + ImVec2( 0.50f, 0.50f ), p_max - ImVec2( 0.49f, 0.49f ), rounding, rounding_corners ); // Better looking lower-right corner and rounded non-AA shapes.
  PathStroke( col, true, thickness );
}

void ImDrawList::AddRectFilled( const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;
  if( rounding > 0.0f )
  {
    PathRect( p_min, p_max, rounding, rounding_corners );
    PathFillConvex( col );
  }
  else
  {
    PrimReserve( 6, 4 );
    PrimRect( p_min, p_max, col );
  }
}

// p_min = upper-left, p_max = lower-right
void ImDrawList::AddRectFilledMultiColor( const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left )
{
  if( ( ( col_upr_left | col_upr_right | col_bot_right | col_bot_left ) & IM_COL32_A_MASK ) == 0 )
    return;

  const ImVec2 uv = _Data->TexUvWhitePixel;
  PrimReserve( 6, 4 );
  PrimWriteIdx( ( ImDrawIdx )( _VtxCurrentIdx ) ); PrimWriteIdx( ( ImDrawIdx )( _VtxCurrentIdx + 1 ) ); PrimWriteIdx( ( ImDrawIdx )( _VtxCurrentIdx + 2 ) );
  PrimWriteIdx( ( ImDrawIdx )( _VtxCurrentIdx ) ); PrimWriteIdx( ( ImDrawIdx )( _VtxCurrentIdx + 2 ) ); PrimWriteIdx( ( ImDrawIdx )( _VtxCurrentIdx + 3 ) );
  PrimWriteVtx( p_min, uv, col_upr_left );
  PrimWriteVtx( ImVec2( p_max.x, p_min.y ), uv, col_upr_right );
  PrimWriteVtx( p_max, uv, col_bot_right );
  PrimWriteVtx( ImVec2( p_min.x, p_max.y ), uv, col_bot_left );
}

void ImDrawList::AddQuad( const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  PathLineTo( p1 );
  PathLineTo( p2 );
  PathLineTo( p3 );
  PathLineTo( p4 );
  PathStroke( col, true, thickness );
}

void ImDrawList::AddQuadFilled( const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  PathLineTo( p1 );
  PathLineTo( p2 );
  PathLineTo( p3 );
  PathLineTo( p4 );
  PathFillConvex( col );
}

void ImDrawList::AddTriangle( const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, float thickness )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  PathLineTo( p1 );
  PathLineTo( p2 );
  PathLineTo( p3 );
  PathStroke( col, true, thickness );
}

void ImDrawList::AddTriangleFilled( const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  PathLineTo( p1 );
  PathLineTo( p2 );
  PathLineTo( p3 );
  PathFillConvex( col );
}

void ImDrawList::AddCircle( const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness )
{
  if( ( col & IM_COL32_A_MASK ) == 0 || radius <= 0.0f )
    return;

  // Obtain segment count
  if( num_segments <= 0 )
  {
    // Automatic segment count
    const int radius_idx = ( int )radius - 1;
    if( radius_idx < IM_ARRAYSIZE( _Data->CircleSegmentCounts ) )
      num_segments = _Data->CircleSegmentCounts[ radius_idx ]; // Use cached value
    else
      num_segments = IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC( radius, _Data->CircleSegmentMaxError );
  }
  else
  {
    // Explicit segment count (still clamp to avoid drawing insanely tessellated shapes)
    num_segments = ImClamp( num_segments, 3, IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX );
  }

  // Because we are filling a closed shape we remove 1 from the count of segments/points
  const float a_max = ( IM_PI * 2.0f ) * ( ( float )num_segments - 1.0f ) / ( float )num_segments;
  if( num_segments == 12 )
    PathArcToFast( center, radius - 0.5f, 0, 12 );
  else
    PathArcTo( center, radius - 0.5f, 0.0f, a_max, num_segments - 1 );
  PathStroke( col, true, thickness );
}

void ImDrawList::AddCircleFilled( const ImVec2& center, float radius, ImU32 col, int num_segments )
{
  if( ( col & IM_COL32_A_MASK ) == 0 || radius <= 0.0f )
    return;

  // Obtain segment count
  if( num_segments <= 0 )
  {
    // Automatic segment count
    const int radius_idx = ( int )radius - 1;
    if( radius_idx < IM_ARRAYSIZE( _Data->CircleSegmentCounts ) )
      num_segments = _Data->CircleSegmentCounts[ radius_idx ]; // Use cached value
    else
      num_segments = IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC( radius, _Data->CircleSegmentMaxError );
  }
  else
  {
    // Explicit segment count (still clamp to avoid drawing insanely tessellated shapes)
    num_segments = ImClamp( num_segments, 3, IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX );
  }

  // Because we are filling a closed shape we remove 1 from the count of segments/points
  const float a_max = ( IM_PI * 2.0f ) * ( ( float )num_segments - 1.0f ) / ( float )num_segments;
  if( num_segments == 12 )
    PathArcToFast( center, radius, 0, 12 );
  else
    PathArcTo( center, radius, 0.0f, a_max, num_segments - 1 );
  PathFillConvex( col );
}

// Guaranteed to honor 'num_segments'
void ImDrawList::AddNgon( const ImVec2& center, float radius, ImU32 col, int num_segments, float thickness )
{
  if( ( col & IM_COL32_A_MASK ) == 0 || num_segments <= 2 )
    return;

  // Because we are filling a closed shape we remove 1 from the count of segments/points
  const float a_max = ( IM_PI * 2.0f ) * ( ( float )num_segments - 1.0f ) / ( float )num_segments;
  PathArcTo( center, radius - 0.5f, 0.0f, a_max, num_segments - 1 );
  PathStroke( col, true, thickness );
}

// Guaranteed to honor 'num_segments'
void ImDrawList::AddNgonFilled( const ImVec2& center, float radius, ImU32 col, int num_segments )
{
  if( ( col & IM_COL32_A_MASK ) == 0 || num_segments <= 2 )
    return;

  // Because we are filling a closed shape we remove 1 from the count of segments/points
  const float a_max = ( IM_PI * 2.0f ) * ( ( float )num_segments - 1.0f ) / ( float )num_segments;
  PathArcTo( center, radius, 0.0f, a_max, num_segments - 1 );
  PathFillConvex( col );
}

// Cubic Bezier takes 4 controls points
void ImDrawList::AddBezierCurve( const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, ImU32 col, float thickness, int num_segments )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  PathLineTo( p1 );
  PathBezierCurveTo( p2, p3, p4, num_segments );
  PathStroke( col, false, thickness );
}

void ImDrawList::AddText( const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end, float wrap_width, const ImVec4* cpu_fine_clip_rect )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  if( text_end == NULL )
    text_end = text_begin + strlen( text_begin );
  if( text_begin == text_end )
    return;

  // Pull default font/size from the shared ImDrawListSharedData instance
  if( font == NULL )
    font = _Data->Font;
  if( font_size == 0.0f )
    font_size = _Data->FontSize;

  IM_ASSERT( font->ContainerAtlas->TexID == _TextureIdStack.back() );  // Use high-level ImGui::PushFont() or low-level ImDrawList::PushTextureId() to change font.

  ImVec4 clip_rect = _ClipRectStack.back();
  if( cpu_fine_clip_rect )
  {
    clip_rect.x = ImMax( clip_rect.x, cpu_fine_clip_rect->x );
    clip_rect.y = ImMax( clip_rect.y, cpu_fine_clip_rect->y );
    clip_rect.z = ImMin( clip_rect.z, cpu_fine_clip_rect->z );
    clip_rect.w = ImMin( clip_rect.w, cpu_fine_clip_rect->w );
  }
  font->RenderText( this, font_size, pos, col, clip_rect, text_begin, text_end, wrap_width, cpu_fine_clip_rect != NULL );
}

void ImDrawList::AddText( const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_end )
{
  AddText( NULL, 0.0f, pos, col, text_begin, text_end );
}

void ImDrawList::AddImage( ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  const bool push_texture_id = _TextureIdStack.empty() || user_texture_id != _TextureIdStack.back();
  if( push_texture_id )
    PushTextureID( user_texture_id );

  PrimReserve( 6, 4 );
  PrimRectUV( p_min, p_max, uv_min, uv_max, col );

  if( push_texture_id )
    PopTextureID();
}

void ImDrawList::AddImageQuad( ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, const ImVec2& uv1, const ImVec2& uv2, const ImVec2& uv3, const ImVec2& uv4, ImU32 col )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  const bool push_texture_id = _TextureIdStack.empty() || user_texture_id != _TextureIdStack.back();
  if( push_texture_id )
    PushTextureID( user_texture_id );

  PrimReserve( 6, 4 );
  PrimQuadUV( p1, p2, p3, p4, uv1, uv2, uv3, uv4, col );

  if( push_texture_id )
    PopTextureID();
}

void ImDrawList::AddImageRounded( ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max, const ImVec2& uv_min, const ImVec2& uv_max, ImU32 col, float rounding, ImDrawCornerFlags rounding_corners )
{
  if( ( col & IM_COL32_A_MASK ) == 0 )
    return;

  if( rounding <= 0.0f || ( rounding_corners & ImDrawCornerFlags_All ) == 0 )
  {
    AddImage( user_texture_id, p_min, p_max, uv_min, uv_max, col );
    return;
  }

  const bool push_texture_id = _TextureIdStack.empty() || user_texture_id != _TextureIdStack.back();
  if( push_texture_id )
    PushTextureID( user_texture_id );

  int vert_start_idx = VtxBuffer.Size;
  PathRect( p_min, p_max, rounding, rounding_corners );
  PathFillConvex( col );
  int vert_end_idx = VtxBuffer.Size;
  ImGui::ShadeVertsLinearUV( this, vert_start_idx, vert_end_idx, p_min, p_max, uv_min, uv_max, true );

  if( push_texture_id )
    PopTextureID();
}


//-----------------------------------------------------------------------------
// ImDrawListSplitter
//-----------------------------------------------------------------------------
// FIXME: This may be a little confusing, trying to be a little too low-level/optimal instead of just doing vector swap..
//-----------------------------------------------------------------------------

void ImDrawListSplitter::ClearFreeMemory()
{
  for( int i = 0; i < _Channels.Size; i++ )
  {
    if( i == _Current )
      memset( &_Channels[ i ], 0, sizeof( _Channels[ i ] ) );  // Current channel is a copy of CmdBuffer/IdxBuffer, don't destruct again
    _Channels[ i ]._CmdBuffer.clear();
    _Channels[ i ]._IdxBuffer.clear();
  }
  _Current = 0;
  _Count = 1;
  _Channels.clear();
}

void ImDrawListSplitter::Split( ImDrawList* draw_list, int channels_count )
{
  IM_ASSERT( _Current == 0 && _Count <= 1 && "Nested channel splitting is not supported. Please use separate instances of ImDrawListSplitter." );
  int old_channels_count = _Channels.Size;
  if( old_channels_count < channels_count )
    _Channels.resize( channels_count );
  _Count = channels_count;

  // Channels[] (24/32 bytes each) hold storage that we'll swap with draw_list->_CmdBuffer/_IdxBuffer
  // The content of Channels[0] at this point doesn't matter. We clear it to make state tidy in a debugger but we don't strictly need to.
  // When we switch to the next channel, we'll copy draw_list->_CmdBuffer/_IdxBuffer into Channels[0] and then Channels[1] into draw_list->CmdBuffer/_IdxBuffer
  memset( &_Channels[ 0 ], 0, sizeof( ImDrawChannel ) );
  for( int i = 1; i < channels_count; i++ )
  {
    if( i >= old_channels_count )
    {
      IM_PLACEMENT_NEW( &_Channels[ i ] ) ImDrawChannel();
    }
    else
    {
      _Channels[ i ]._CmdBuffer.resize( 0 );
      _Channels[ i ]._IdxBuffer.resize( 0 );
    }
    if( _Channels[ i ]._CmdBuffer.Size == 0 )
    {
      ImDrawCmd draw_cmd;
      draw_cmd.ClipRect = draw_list->_ClipRectStack.back();
      draw_cmd.TextureId = draw_list->_TextureIdStack.back();
      _Channels[ i ]._CmdBuffer.push_back( draw_cmd );
    }
  }
}

static inline bool CanMergeDrawCommands( ImDrawCmd* a, ImDrawCmd* b )
{
  return memcmp( &a->ClipRect, &b->ClipRect, sizeof( a->ClipRect ) ) == 0 && a->TextureId == b->TextureId && a->VtxOffset == b->VtxOffset && !a->UserCallback && !b->UserCallback;
}

void ImDrawListSplitter::Merge( ImDrawList* draw_list )
{
  // Note that we never use or rely on channels.Size because it is merely a buffer that we never shrink back to 0 to keep all sub-buffers ready for use.
  if( _Count <= 1 )
    return;

  SetCurrentChannel( draw_list, 0 );
  if( draw_list->CmdBuffer.Size != 0 && draw_list->CmdBuffer.back().ElemCount == 0 )
    draw_list->CmdBuffer.pop_back();

  // Calculate our final buffer sizes. Also fix the incorrect IdxOffset values in each command.
  int new_cmd_buffer_count = 0;
  int new_idx_buffer_count = 0;
  ImDrawCmd* last_cmd = ( _Count > 0 && draw_list->CmdBuffer.Size > 0 ) ? &draw_list->CmdBuffer.back() : NULL;
  int idx_offset = last_cmd ? last_cmd->IdxOffset + last_cmd->ElemCount : 0;
  for( int i = 1; i < _Count; i++ )
  {
    ImDrawChannel& ch = _Channels[ i ];
    if( ch._CmdBuffer.Size > 0 && ch._CmdBuffer.back().ElemCount == 0 )
      ch._CmdBuffer.pop_back();
    if( ch._CmdBuffer.Size > 0 && last_cmd != NULL && CanMergeDrawCommands( last_cmd, &ch._CmdBuffer[ 0 ] ) )
    {
      // Merge previous channel last draw command with current channel first draw command if matching.
      last_cmd->ElemCount += ch._CmdBuffer[ 0 ].ElemCount;
      idx_offset += ch._CmdBuffer[ 0 ].ElemCount;
      ch._CmdBuffer.erase( ch._CmdBuffer.Data ); // FIXME-OPT: Improve for multiple merges.
    }
    if( ch._CmdBuffer.Size > 0 )
      last_cmd = &ch._CmdBuffer.back();
    new_cmd_buffer_count += ch._CmdBuffer.Size;
    new_idx_buffer_count += ch._IdxBuffer.Size;
    for( int cmd_n = 0; cmd_n < ch._CmdBuffer.Size; cmd_n++ )
    {
      ch._CmdBuffer.Data[ cmd_n ].IdxOffset = idx_offset;
      idx_offset += ch._CmdBuffer.Data[ cmd_n ].ElemCount;
    }
  }
  draw_list->CmdBuffer.resize( draw_list->CmdBuffer.Size + new_cmd_buffer_count );
  draw_list->IdxBuffer.resize( draw_list->IdxBuffer.Size + new_idx_buffer_count );

  // Write commands and indices in order (they are fairly small structures, we don't copy vertices only indices)
  ImDrawCmd* cmd_write = draw_list->CmdBuffer.Data + draw_list->CmdBuffer.Size - new_cmd_buffer_count;
  ImDrawIdx* idx_write = draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size - new_idx_buffer_count;
  for( int i = 1; i < _Count; i++ )
  {
    ImDrawChannel& ch = _Channels[ i ];
    if( int sz = ch._CmdBuffer.Size )
    {
      memcpy( cmd_write, ch._CmdBuffer.Data, sz * sizeof( ImDrawCmd ) ); cmd_write += sz;
    }
    if( int sz = ch._IdxBuffer.Size )
    {
      memcpy( idx_write, ch._IdxBuffer.Data, sz * sizeof( ImDrawIdx ) ); idx_write += sz;
    }
  }
  draw_list->_IdxWritePtr = idx_write;
  draw_list->UpdateClipRect(); // We call this instead of AddDrawCmd(), so that empty channels won't produce an extra draw call.
  draw_list->UpdateTextureID();
  _Count = 1;
}

void ImDrawListSplitter::SetCurrentChannel( ImDrawList* draw_list, int idx )
{
  IM_ASSERT( idx >= 0 && idx < _Count );
  if( _Current == idx )
    return;
  // Overwrite ImVector (12/16 bytes), four times. This is merely a silly optimization instead of doing .swap()
  memcpy( &_Channels.Data[ _Current ]._CmdBuffer, &draw_list->CmdBuffer, sizeof( draw_list->CmdBuffer ) );
  memcpy( &_Channels.Data[ _Current ]._IdxBuffer, &draw_list->IdxBuffer, sizeof( draw_list->IdxBuffer ) );
  _Current = idx;
  memcpy( &draw_list->CmdBuffer, &_Channels.Data[ idx ]._CmdBuffer, sizeof( draw_list->CmdBuffer ) );
  memcpy( &draw_list->IdxBuffer, &_Channels.Data[ idx ]._IdxBuffer, sizeof( draw_list->IdxBuffer ) );
  draw_list->_IdxWritePtr = draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size;
}

//-----------------------------------------------------------------------------
// [SECTION] ImDrawData
//-----------------------------------------------------------------------------

// For backward compatibility: convert all buffers from indexed to de-indexed, in case you cannot render indexed. Note: this is slow and most likely a waste of resources. Always prefer indexed rendering!
void ImDrawData::DeIndexAllBuffers()
{
  ImVector<ImDrawVert> new_vtx_buffer;
  TotalVtxCount = TotalIdxCount = 0;
  for( int i = 0; i < CmdListsCount; i++ )
  {
    ImDrawList* cmd_list = CmdLists[ i ];
    if( cmd_list->IdxBuffer.empty() )
      continue;
    new_vtx_buffer.resize( cmd_list->IdxBuffer.Size );
    for( int j = 0; j < cmd_list->IdxBuffer.Size; j++ )
      new_vtx_buffer[ j ] = cmd_list->VtxBuffer[ cmd_list->IdxBuffer[ j ] ];
    cmd_list->VtxBuffer.swap( new_vtx_buffer );
    cmd_list->IdxBuffer.resize( 0 );
    TotalVtxCount += cmd_list->VtxBuffer.Size;
  }
}

// Helper to scale the ClipRect field of each ImDrawCmd.
// Use if your final output buffer is at a different scale than draw_data->DisplaySize,
// or if there is a difference between your window resolution and framebuffer resolution.
void ImDrawData::ScaleClipRects( const ImVec2& fb_scale )
{
  for( int i = 0; i < CmdListsCount; i++ )
  {
    ImDrawList* cmd_list = CmdLists[ i ];
    for( int cmd_i = 0; cmd_i < cmd_list->CmdBuffer.Size; cmd_i++ )
    {
      ImDrawCmd* cmd = &cmd_list->CmdBuffer[ cmd_i ];
      cmd->ClipRect = ImVec4( cmd->ClipRect.x * fb_scale.x, cmd->ClipRect.y * fb_scale.y, cmd->ClipRect.z * fb_scale.x, cmd->ClipRect.w * fb_scale.y );
    }
  }
}

//-----------------------------------------------------------------------------
// [SECTION] Helpers ShadeVertsXXX functions
//-----------------------------------------------------------------------------

// Generic linear color gradient, write to RGB fields, leave A untouched.
void ImGui::ShadeVertsLinearColorGradientKeepAlpha( ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, ImVec2 gradient_p0, ImVec2 gradient_p1, ImU32 col0, ImU32 col1 )
{
  ImVec2 gradient_extent = gradient_p1 - gradient_p0;
  float gradient_inv_length2 = 1.0f / ImLengthSqr( gradient_extent );
  ImDrawVert* vert_start = draw_list->VtxBuffer.Data + vert_start_idx;
  ImDrawVert* vert_end = draw_list->VtxBuffer.Data + vert_end_idx;
  for( ImDrawVert* vert = vert_start; vert < vert_end; vert++ )
  {
    float d = ImDot( vert->pos - gradient_p0, gradient_extent );
    float t = ImClamp( d * gradient_inv_length2, 0.0f, 1.0f );
    int r = ImLerp( ( int )( col0 >> IM_COL32_R_SHIFT ) & 0xFF, ( int )( col1 >> IM_COL32_R_SHIFT ) & 0xFF, t );
    int g = ImLerp( ( int )( col0 >> IM_COL32_G_SHIFT ) & 0xFF, ( int )( col1 >> IM_COL32_G_SHIFT ) & 0xFF, t );
    int b = ImLerp( ( int )( col0 >> IM_COL32_B_SHIFT ) & 0xFF, ( int )( col1 >> IM_COL32_B_SHIFT ) & 0xFF, t );
    vert->col = ( r << IM_COL32_R_SHIFT ) | ( g << IM_COL32_G_SHIFT ) | ( b << IM_COL32_B_SHIFT ) | ( vert->col & IM_COL32_A_MASK );
  }
}

// Distribute UV over (a, b) rectangle
void ImGui::ShadeVertsLinearUV( ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, const ImVec2& a, const ImVec2& b, const ImVec2& uv_a, const ImVec2& uv_b, bool clamp )
{
  const ImVec2 size = b - a;
  const ImVec2 uv_size = uv_b - uv_a;
  const ImVec2 scale = ImVec2(
    size.x != 0.0f ? ( uv_size.x / size.x ) : 0.0f,
    size.y != 0.0f ? ( uv_size.y / size.y ) : 0.0f );

  ImDrawVert* vert_start = draw_list->VtxBuffer.Data + vert_start_idx;
  ImDrawVert* vert_end = draw_list->VtxBuffer.Data + vert_end_idx;
  if( clamp )
  {
    const ImVec2 min = ImMin( uv_a, uv_b );
    const ImVec2 max = ImMax( uv_a, uv_b );
    for( ImDrawVert* vertex = vert_start; vertex < vert_end; ++vertex )
      vertex->uv = ImClamp( uv_a + ImMul( ImVec2( vertex->pos.x, vertex->pos.y ) - a, scale ), min, max );
  }
  else
  {
    for( ImDrawVert* vertex = vert_start; vertex < vert_end; ++vertex )
      vertex->uv = uv_a + ImMul( ImVec2( vertex->pos.x, vertex->pos.y ) - a, scale );
  }
}

//-----------------------------------------------------------------------------
// [SECTION] ImFontConfig
//-----------------------------------------------------------------------------

ImFontConfig::ImFontConfig()
{
  FontData = NULL;
  FontDataSize = 0;
  FontDataOwnedByAtlas = true;
  FontNo = 0;
  SizePixels = 0.0f;
  OversampleH = 3; // FIXME: 2 may be a better default?
  OversampleV = 1;
  PixelSnapH = false;
  GlyphExtraSpacing = ImVec2( 0.0f, 0.0f );
  GlyphOffset = ImVec2( 0.0f, 0.0f );
  GlyphRanges = NULL;
  GlyphMinAdvanceX = 0.0f;
  GlyphMaxAdvanceX = FLT_MAX;
  MergeMode = false;
  RasterizerFlags = 0x00;
  RasterizerMultiply = 1.0f;
  EllipsisChar = ( ImWchar )-1;
  memset( Name, 0, sizeof( Name ) );
  DstFont = NULL;
}

//-----------------------------------------------------------------------------
// [SECTION] ImFontAtlas
//-----------------------------------------------------------------------------

// A work of art lies ahead! (. = white layer, X = black layer, others are blank)
// The white texels on the top left are the ones we'll use everywhere in Dear ImGui to render filled shapes.
const int FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF = 108;
const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;

/*
static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[ FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * FONT_ATLAS_DEFAULT_TEX_DATA_H + 1 ] =
{
    "..-         -XXXXXXX-    X    -           X           -XXXXXXX          -          XXXXXXX-     XX          "
    "..-         -X.....X-   X.X   -          X.X          -X.....X          -          X.....X-    X..X         "
    "---         -XXX.XXX-  X...X  -         X...X         -X....X           -           X....X-    X..X         "
    "X           -  X.X  - X.....X -        X.....X        -X...X            -            X...X-    X..X         "
    "XX          -  X.X  -X.......X-       X.......X       -X..X.X           -           X.X..X-    X..X         "
    "X.X         -  X.X  -XXXX.XXXX-       XXXX.XXXX       -X.X X.X          -          X.X X.X-    X..XXX       "
    "X..X        -  X.X  -   X.X   -          X.X          -XX   X.X         -         X.X   XX-    X..X..XXX    "
    "X...X       -  X.X  -   X.X   -    XX    X.X    XX    -      X.X        -        X.X      -    X..X..X..XX  "
    "X....X      -  X.X  -   X.X   -   X.X    X.X    X.X   -       X.X       -       X.X       -    X..X..X..X.X "
    "X.....X     -  X.X  -   X.X   -  X..X    X.X    X..X  -        X.X      -      X.X        -XXX X..X..X..X..X"
    "X......X    -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -         X.X   XX-XX   X.X         -X..XX........X..X"
    "X.......X   -  X.X  -   X.X   -X.....................X-          X.X X.X-X.X X.X          -X...X...........X"
    "X........X  -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -           X.X..X-X..X.X           - X..............X"
    "X.........X -XXX.XXX-   X.X   -  X..X    X.X    X..X  -            X...X-X...X            -  X.............X"
    "X..........X-X.....X-   X.X   -   X.X    X.X    X.X   -           X....X-X....X           -  X.............X"
    "X......XXXXX-XXXXXXX-   X.X   -    XX    X.X    XX    -          X.....X-X.....X          -   X............X"
    "X...X..X    ---------   X.X   -          X.X          -          XXXXXXX-XXXXXXX          -   X...........X "
    "X..X X..X   -       -XXXX.XXXX-       XXXX.XXXX       -------------------------------------    X..........X "
    "X.X  X..X   -       -X.......X-       X.......X       -    XX           XX    -           -    X..........X "
    "XX    X..X  -       - X.....X -        X.....X        -   X.X           X.X   -           -     X........X  "
    "      X..X          -  X...X  -         X...X         -  X..X           X..X  -           -     X........X  "
    "       XX           -   X.X   -          X.X          - X...XXXXXXXXXXXXX...X -           -     XXXXXXXXXX  "
    "------------        -    X    -           X           -X.....................X-           ------------------"
    "                    ----------------------------------- X...XXXXXXXXXXXXX...X -                             "
    "                                                      -  X..X           X..X  -                             "
    "                                                      -   X.X           X.X   -                             "
    "                                                      -    XX           XX    -                             "
};
*/

static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ ImGuiMouseCursor_COUNT ][ 3 ] =
{
  // Pos ........ Size ......... Offset ......
  { ImVec2( 0,3 ), ImVec2( 12,19 ), ImVec2( 0, 0 ) }, // ImGuiMouseCursor_Arrow
  { ImVec2( 13,0 ), ImVec2( 7,16 ), ImVec2( 1, 8 ) }, // ImGuiMouseCursor_TextInput
  { ImVec2( 31,0 ), ImVec2( 23,23 ), ImVec2( 11,11 ) }, // ImGuiMouseCursor_ResizeAll
  { ImVec2( 21,0 ), ImVec2( 9,23 ), ImVec2( 4,11 ) }, // ImGuiMouseCursor_ResizeNS
  { ImVec2( 55,18 ),ImVec2( 23, 9 ), ImVec2( 11, 4 ) }, // ImGuiMouseCursor_ResizeEW
  { ImVec2( 73,0 ), ImVec2( 17,17 ), ImVec2( 8, 8 ) }, // ImGuiMouseCursor_ResizeNESW
  { ImVec2( 55,0 ), ImVec2( 17,17 ), ImVec2( 8, 8 ) }, // ImGuiMouseCursor_ResizeNWSE
  { ImVec2( 91,0 ), ImVec2( 17,22 ), ImVec2( 5, 0 ) }, // ImGuiMouseCursor_Hand
};

ImFontAtlas::ImFontAtlas()
{
  Locked = false;
  Flags = ImFontAtlasFlags_None;
  TexID = ( ImTextureID )NULL;
  TexDesiredWidth = 0;
  TexGlyphPadding = 1;

  TexPixelsAlpha8 = NULL;
  TexPixelsRGBA32 = NULL;
  TexWidth = TexHeight = 0;
  TexUvScale = ImVec2( 0.0f, 0.0f );
  TexUvWhitePixel = ImVec2( 0.0f, 0.0f );
  for( int n = 0; n < IM_ARRAYSIZE( CustomRectIds ); n++ )
    CustomRectIds[ n ] = -1;
}

ImFontAtlas::~ImFontAtlas()
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  Clear();
}

void    ImFontAtlas::ClearInputData()
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  for( int i = 0; i < ConfigData.Size; i++ )
    if( ConfigData[ i ].FontData && ConfigData[ i ].FontDataOwnedByAtlas )
    {
      IM_FREE( ConfigData[ i ].FontData );
      ConfigData[ i ].FontData = NULL;
    }

  // When clearing this we lose access to the font name and other information used to build the font.
  for( int i = 0; i < Fonts.Size; i++ )
    if( Fonts[ i ]->ConfigData >= ConfigData.Data && Fonts[ i ]->ConfigData < ConfigData.Data + ConfigData.Size )
    {
      Fonts[ i ]->ConfigData = NULL;
      Fonts[ i ]->ConfigDataCount = 0;
    }
  ConfigData.clear();
  CustomRects.clear();
  for( int n = 0; n < IM_ARRAYSIZE( CustomRectIds ); n++ )
    CustomRectIds[ n ] = -1;
}

void    ImFontAtlas::ClearTexData()
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  if( TexPixelsAlpha8 )
    IM_FREE( TexPixelsAlpha8 );
  if( TexPixelsRGBA32 )
    IM_FREE( TexPixelsRGBA32 );
  TexPixelsAlpha8 = NULL;
  TexPixelsRGBA32 = NULL;
}

void    ImFontAtlas::ClearFonts()
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  for( int i = 0; i < Fonts.Size; i++ )
    IM_DELETE( Fonts[ i ] );
  Fonts.clear();
}

void    ImFontAtlas::Clear()
{
  ClearInputData();
  ClearTexData();
  ClearFonts();
}

void    ImFontAtlas::GetTexDataAsAlpha8( unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel )
{
  // Build atlas on demand
  if( TexPixelsAlpha8 == NULL )
  {
    if( ConfigData.empty() )
      AddFontDefault();
    Build();
  }

  *out_pixels = TexPixelsAlpha8;
  if( out_width ) *out_width = TexWidth;
  if( out_height ) *out_height = TexHeight;
  if( out_bytes_per_pixel ) *out_bytes_per_pixel = 1;
}

void    ImFontAtlas::GetTexDataAsRGBA32( unsigned char** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel )
{
  // Convert to RGBA32 format on demand
  // Although it is likely to be the most commonly used format, our font rendering is 1 channel / 8 bpp
  if( !TexPixelsRGBA32 )
  {
    unsigned char* pixels = NULL;
    GetTexDataAsAlpha8( &pixels, NULL, NULL );
    if( pixels )
    {
      TexPixelsRGBA32 = ( unsigned int* )IM_ALLOC( ( size_t )TexWidth * ( size_t )TexHeight * 4 );
      const unsigned char* src = pixels;
      unsigned int* dst = TexPixelsRGBA32;
      for( int n = TexWidth * TexHeight; n > 0; n-- )
        *dst++ = IM_COL32( 255, 255, 255, ( unsigned int )( *src++ ) );
    }
  }

  *out_pixels = ( unsigned char* )TexPixelsRGBA32;
  if( out_width ) *out_width = TexWidth;
  if( out_height ) *out_height = TexHeight;
  if( out_bytes_per_pixel ) *out_bytes_per_pixel = 4;
}

ImFont* ImFontAtlas::AddFont( const ImFontConfig* font_cfg )
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  IM_ASSERT( font_cfg->FontData != NULL && font_cfg->FontDataSize > 0 );
  IM_ASSERT( font_cfg->SizePixels > 0.0f );

  // Create new font
  if( !font_cfg->MergeMode )
    Fonts.push_back( IM_NEW( ImFont ) );
  else
    IM_ASSERT( !Fonts.empty() && "Cannot use MergeMode for the first font" ); // When using MergeMode make sure that a font has already been added before. You can use ImGui::GetIO().Fonts->AddFontDefault() to add the default imgui font.

  ConfigData.push_back( *font_cfg );
  ImFontConfig& new_font_cfg = ConfigData.back();
  if( new_font_cfg.DstFont == NULL )
    new_font_cfg.DstFont = Fonts.back();
  if( !new_font_cfg.FontDataOwnedByAtlas )
  {
    new_font_cfg.FontData = IM_ALLOC( new_font_cfg.FontDataSize );
    new_font_cfg.FontDataOwnedByAtlas = true;
    memcpy( new_font_cfg.FontData, font_cfg->FontData, ( size_t )new_font_cfg.FontDataSize );
  }

  if( new_font_cfg.DstFont->EllipsisChar == ( ImWchar )-1 )
    new_font_cfg.DstFont->EllipsisChar = font_cfg->EllipsisChar;

  // Invalidate texture
  ClearTexData();
  return new_font_cfg.DstFont;
}

// Default font TTF is compressed with stb_compress then base85 encoded (see misc/fonts/binary_to_compressed_c.cpp for encoder)
static unsigned int stb_decompress_length( const unsigned char* input );
static unsigned int stb_decompress( unsigned char* output, const unsigned char* input, unsigned int length );
static const char* GetDefaultCompressedFontDataTTFBase85();
static unsigned int Decode85Byte( char c )
{
  return c >= '\\' ? c - 36 : c - 35;
}
static void         Decode85( const unsigned char* src, unsigned char* dst )
{
  while( *src )
  {
    unsigned int tmp = Decode85Byte( src[ 0 ] ) + 85 * ( Decode85Byte( src[ 1 ] ) + 85 * ( Decode85Byte( src[ 2 ] ) + 85 * ( Decode85Byte( src[ 3 ] ) + 85 * Decode85Byte( src[ 4 ] ) ) ) );
    dst[ 0 ] = ( ( tmp >> 0 ) & 0xFF ); dst[ 1 ] = ( ( tmp >> 8 ) & 0xFF ); dst[ 2 ] = ( ( tmp >> 16 ) & 0xFF ); dst[ 3 ] = ( ( tmp >> 24 ) & 0xFF );   // We can't assume little-endianness.
    src += 5;
    dst += 4;
  }
}

extern const unsigned int ubuntu_mono_compressed_size;
extern const unsigned int ubuntu_mono_compressed_data[ 150392 / 4 ];

// Load embedded ProggyClean.ttf at size 13, disable oversampling
ImFont* ImFontAtlas::AddFontDefault( const ImFontConfig* font_cfg_template )
{
  ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();
  if( !font_cfg_template )
  {
    font_cfg.OversampleH = font_cfg.OversampleV = 1;
    font_cfg.PixelSnapH = true;
  }
  if( font_cfg.SizePixels <= 0.0f )
    font_cfg.SizePixels = 13.0f * 1.0f;
  if( font_cfg.Name[ 0 ] == '\0' )
    ImFormatString( font_cfg.Name, IM_ARRAYSIZE( font_cfg.Name ), SECURE( "ProggyClean.ttf, %dpx" ), ( int )font_cfg.SizePixels );
  font_cfg.EllipsisChar = ( ImWchar )0x0085;

  // const char* ttf_compressed_base85 = GetDefaultCompressedFontDataTTFBase85();
  const ImWchar* glyph_ranges = font_cfg.GlyphRanges != NULL ? font_cfg.GlyphRanges : GetGlyphRangesDefault();
  // ImFont* font = AddFontFromMemoryCompressedBase85TTF( ttf_compressed_base85, font_cfg.SizePixels, &font_cfg, glyph_ranges );
  ImFont* font = AddFontFromMemoryCompressedTTF( ubuntu_mono_compressed_data, ubuntu_mono_compressed_size, font_cfg.SizePixels, &font_cfg, glyph_ranges );
  font->DisplayOffset.y = 1.0f;
  return font;
}

ImFont* ImFontAtlas::AddFontFromFileTTF( const char* filename, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges )
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  size_t data_size = 0;
  void* data = ImFileLoadToMemory( filename, SECURE("rb"), &data_size, 0 );
  if( !data )
  {
    IM_ASSERT_USER_ERROR( 0, "Could not load font file!" );
    return NULL;
  }
  ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();
  if( font_cfg.Name[ 0 ] == '\0' )
  {
    // Store a short copy of filename into into the font name for convenience
    const char* p;
    for( p = filename + strlen( filename ); p > filename && p[ -1 ] != '/' && p[ -1 ] != '\\'; p-- )
    {
    }
    ImFormatString( font_cfg.Name, IM_ARRAYSIZE( font_cfg.Name ), SECURE("%s, %.0fpx"), p, size_pixels );
  }
  return AddFontFromMemoryTTF( data, ( int )data_size, size_pixels, &font_cfg, glyph_ranges );
}

// NB: Transfer ownership of 'ttf_data' to ImFontAtlas, unless font_cfg_template->FontDataOwnedByAtlas == false. Owned TTF buffer will be deleted after Build().
ImFont* ImFontAtlas::AddFontFromMemoryTTF( void* ttf_data, int ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges )
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();
  IM_ASSERT( font_cfg.FontData == NULL );
  font_cfg.FontData = ttf_data;
  font_cfg.FontDataSize = ttf_size;
  font_cfg.SizePixels = size_pixels;
  if( glyph_ranges )
    font_cfg.GlyphRanges = glyph_ranges;
  return AddFont( &font_cfg );
}

ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF( const void* compressed_ttf_data, int compressed_ttf_size, float size_pixels, const ImFontConfig* font_cfg_template, const ImWchar* glyph_ranges )
{
  const unsigned int buf_decompressed_size = stb_decompress_length( ( const unsigned char* )compressed_ttf_data );
  unsigned char* buf_decompressed_data = ( unsigned char* )IM_ALLOC( buf_decompressed_size );
  stb_decompress( buf_decompressed_data, ( const unsigned char* )compressed_ttf_data, ( unsigned int )compressed_ttf_size );

  ImFontConfig font_cfg = font_cfg_template ? *font_cfg_template : ImFontConfig();
  IM_ASSERT( font_cfg.FontData == NULL );
  font_cfg.FontDataOwnedByAtlas = true;
  return AddFontFromMemoryTTF( buf_decompressed_data, ( int )buf_decompressed_size, size_pixels, &font_cfg, glyph_ranges );
}

ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF( const char* compressed_ttf_data_base85, float size_pixels, const ImFontConfig* font_cfg, const ImWchar* glyph_ranges )
{
  int compressed_ttf_size = ( ( ( int )strlen( compressed_ttf_data_base85 ) + 4 ) / 5 ) * 4;
  void* compressed_ttf = IM_ALLOC( ( size_t )compressed_ttf_size );
  Decode85( ( const unsigned char* )compressed_ttf_data_base85, ( unsigned char* )compressed_ttf );
  ImFont* font = AddFontFromMemoryCompressedTTF( compressed_ttf, compressed_ttf_size, size_pixels, font_cfg, glyph_ranges );
  IM_FREE( compressed_ttf );
  return font;
}

int ImFontAtlas::AddCustomRectRegular( int width, int height )
{
  IM_ASSERT( width > 0 && width <= 0xFFFF );
  IM_ASSERT( height > 0 && height <= 0xFFFF );
  ImFontAtlasCustomRect r;
  r.Width = ( unsigned short )width;
  r.Height = ( unsigned short )height;
  CustomRects.push_back( r );
  return CustomRects.Size - 1; // Return index
}

int ImFontAtlas::AddCustomRectFontGlyph( ImFont* font, ImWchar id, int width, int height, float advance_x, const ImVec2& offset )
{
#ifdef IMGUI_USE_WCHAR32
  IM_ASSERT( id <= IM_UNICODE_CODEPOINT_MAX );
#endif
  IM_ASSERT( font != NULL );
  IM_ASSERT( width > 0 && width <= 0xFFFF );
  IM_ASSERT( height > 0 && height <= 0xFFFF );
  ImFontAtlasCustomRect r;
  r.Width = ( unsigned short )width;
  r.Height = ( unsigned short )height;
  r.GlyphID = id;
  r.GlyphAdvanceX = advance_x;
  r.GlyphOffset = offset;
  r.Font = font;
  CustomRects.push_back( r );
  return CustomRects.Size - 1; // Return index
}

void ImFontAtlas::CalcCustomRectUV( const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2* out_uv_max ) const
{
  IM_ASSERT( TexWidth > 0 && TexHeight > 0 );   // Font atlas needs to be built before we can calculate UV coordinates
  IM_ASSERT( rect->IsPacked() );                // Make sure the rectangle has been packed
  *out_uv_min = ImVec2( ( float )rect->X * TexUvScale.x, ( float )rect->Y * TexUvScale.y );
  *out_uv_max = ImVec2( ( float )( rect->X + rect->Width ) * TexUvScale.x, ( float )( rect->Y + rect->Height ) * TexUvScale.y );
}

bool ImFontAtlas::GetMouseCursorTexData( ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2* out_size, ImVec2 out_uv_border[ 2 ], ImVec2 out_uv_fill[ 2 ] )
{
  if( cursor_type <= ImGuiMouseCursor_None || cursor_type >= ImGuiMouseCursor_COUNT )
    return false;
  if( Flags & ImFontAtlasFlags_NoMouseCursors )
    return false;

  IM_ASSERT( CustomRectIds[ 0 ] != -1 );
  ImFontAtlasCustomRect& r = CustomRects[ CustomRectIds[ 0 ] ];
  ImVec2 pos = FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ cursor_type ][ 0 ] + ImVec2( ( float )r.X, ( float )r.Y );
  ImVec2 size = FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ cursor_type ][ 1 ];
  *out_size = size;
  *out_offset = FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ cursor_type ][ 2 ];
  out_uv_border[ 0 ] = ( pos )*TexUvScale;
  out_uv_border[ 1 ] = ( pos + size ) * TexUvScale;
  pos.x += FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF + 1;
  out_uv_fill[ 0 ] = ( pos )*TexUvScale;
  out_uv_fill[ 1 ] = ( pos + size ) * TexUvScale;
  return true;
}

bool    ImFontAtlas::Build()
{
  IM_ASSERT( !Locked && "Cannot modify a locked ImFontAtlas between NewFrame() and EndFrame/Render()!" );
  return ImFontAtlasBuildWithStbTruetype( this );
}

void    ImFontAtlasBuildMultiplyCalcLookupTable( unsigned char out_table[ 256 ], float in_brighten_factor )
{
  for( unsigned int i = 0; i < 256; i++ )
  {
    unsigned int value = ( unsigned int )( i * in_brighten_factor );
    out_table[ i ] = value > 255 ? 255 : ( value & 0xFF );
  }
}

void    ImFontAtlasBuildMultiplyRectAlpha8( const unsigned char table[ 256 ], unsigned char* pixels, int x, int y, int w, int h, int stride )
{
  unsigned char* data = pixels + x + y * stride;
  for( int j = h; j > 0; j--, data += stride )
    for( int i = 0; i < w; i++ )
      data[ i ] = table[ data[ i ] ];
}

// Temporary data for one source font (multiple source fonts can be merged into one destination ImFont)
// (C++03 doesn't allow instancing ImVector<> with function-local types so we declare the type here.)
struct ImFontBuildSrcData
{
  stbtt_fontinfo      FontInfo;
  stbtt_pack_range    PackRange;          // Hold the list of codepoints to pack (essentially points to Codepoints.Data)
  stbrp_rect* Rects;              // Rectangle to pack. We first fill in their size and the packer will give us their position.
  stbtt_packedchar* PackedChars;        // Output glyphs
  const ImWchar* SrcRanges;          // Ranges as requested by user (user is allowed to request too much, e.g. 0x0020..0xFFFF)
  int                 DstIndex;           // Index into atlas->Fonts[] and dst_tmp_array[]
  int                 GlyphsHighest;      // Highest requested codepoint
  int                 GlyphsCount;        // Glyph count (excluding missing glyphs and glyphs already set by an earlier source font)
  ImBitVector         GlyphsSet;          // Glyph bit map (random access, 1-bit per codepoint. This will be a maximum of 8KB)
  ImVector<int>       GlyphsList;         // Glyph codepoints list (flattened version of GlyphsMap)
};

// Temporary data for one destination ImFont* (multiple source fonts can be merged into one destination ImFont)
struct ImFontBuildDstData
{
  int                 SrcCount;           // Number of source fonts targeting this destination font.
  int                 GlyphsHighest;
  int                 GlyphsCount;
  ImBitVector         GlyphsSet;          // This is used to resolve collision when multiple sources are merged into a same destination font.
};

static void UnpackBitVectorToFlatIndexList( const ImBitVector* in, ImVector<int>* out )
{
  IM_ASSERT( sizeof( in->Storage.Data[ 0 ] ) == sizeof( int ) );
  const ImU32* it_begin = in->Storage.begin();
  const ImU32* it_end = in->Storage.end();
  for( const ImU32* it = it_begin; it < it_end; it++ )
    if( ImU32 entries_32 = *it )
      for( ImU32 bit_n = 0; bit_n < 32; bit_n++ )
        if( entries_32 & ( ( ImU32 )1 << bit_n ) )
          out->push_back( ( int )( ( ( it - it_begin ) << 5 ) + bit_n ) );
}

bool    ImFontAtlasBuildWithStbTruetype( ImFontAtlas* atlas )
{
  IM_ASSERT( atlas->ConfigData.Size > 0 );

  ImFontAtlasBuildInit( atlas );

  // Clear atlas
  atlas->TexID = ( ImTextureID )NULL;
  atlas->TexWidth = atlas->TexHeight = 0;
  atlas->TexUvScale = ImVec2( 0.0f, 0.0f );
  atlas->TexUvWhitePixel = ImVec2( 0.0f, 0.0f );
  atlas->ClearTexData();

  // Temporary storage for building
  ImVector<ImFontBuildSrcData> src_tmp_array;
  ImVector<ImFontBuildDstData> dst_tmp_array;
  src_tmp_array.resize( atlas->ConfigData.Size );
  dst_tmp_array.resize( atlas->Fonts.Size );
  memset( src_tmp_array.Data, 0, ( size_t )src_tmp_array.size_in_bytes() );
  memset( dst_tmp_array.Data, 0, ( size_t )dst_tmp_array.size_in_bytes() );

  // 1. Initialize font loading structure, check font data validity
  for( int src_i = 0; src_i < atlas->ConfigData.Size; src_i++ )
  {
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    ImFontConfig& cfg = atlas->ConfigData[ src_i ];
    IM_ASSERT( cfg.DstFont && ( !cfg.DstFont->IsLoaded() || cfg.DstFont->ContainerAtlas == atlas ) );

    // Find index from cfg.DstFont (we allow the user to set cfg.DstFont. Also it makes casual debugging nicer than when storing indices)
    src_tmp.DstIndex = -1;
    for( int output_i = 0; output_i < atlas->Fonts.Size && src_tmp.DstIndex == -1; output_i++ )
      if( cfg.DstFont == atlas->Fonts[ output_i ] )
        src_tmp.DstIndex = output_i;
    IM_ASSERT( src_tmp.DstIndex != -1 ); // cfg.DstFont not pointing within atlas->Fonts[] array?
    if( src_tmp.DstIndex == -1 )
      return false;

    // Initialize helper structure for font loading and verify that the TTF/OTF data is correct
    const int font_offset = stbtt_GetFontOffsetForIndex( ( unsigned char* )cfg.FontData, cfg.FontNo );
    IM_ASSERT( font_offset >= 0 && "FontData is incorrect, or FontNo cannot be found." );
    if( !stbtt_InitFont( &src_tmp.FontInfo, ( unsigned char* )cfg.FontData, font_offset ) )
      return false;

    // Measure highest codepoints
    ImFontBuildDstData& dst_tmp = dst_tmp_array[ src_tmp.DstIndex ];
    src_tmp.SrcRanges = cfg.GlyphRanges ? cfg.GlyphRanges : atlas->GetGlyphRangesDefault();
    for( const ImWchar* src_range = src_tmp.SrcRanges; src_range[ 0 ] && src_range[ 1 ]; src_range += 2 )
      src_tmp.GlyphsHighest = ImMax( src_tmp.GlyphsHighest, ( int )src_range[ 1 ] );
    dst_tmp.SrcCount++;
    dst_tmp.GlyphsHighest = ImMax( dst_tmp.GlyphsHighest, src_tmp.GlyphsHighest );
  }

  // 2. For every requested codepoint, check for their presence in the font data, and handle redundancy or overlaps between source fonts to avoid unused glyphs.
  int total_glyphs_count = 0;
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
  {
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    ImFontBuildDstData& dst_tmp = dst_tmp_array[ src_tmp.DstIndex ];
    src_tmp.GlyphsSet.Create( src_tmp.GlyphsHighest + 1 );
    if( dst_tmp.GlyphsSet.Storage.empty() )
      dst_tmp.GlyphsSet.Create( dst_tmp.GlyphsHighest + 1 );

    for( const ImWchar* src_range = src_tmp.SrcRanges; src_range[ 0 ] && src_range[ 1 ]; src_range += 2 )
      for( unsigned int codepoint = src_range[ 0 ]; codepoint <= src_range[ 1 ]; codepoint++ )
      {
        if( dst_tmp.GlyphsSet.TestBit( codepoint ) )    // Don't overwrite existing glyphs. We could make this an option for MergeMode (e.g. MergeOverwrite==true)
          continue;
        if( !stbtt_FindGlyphIndex( &src_tmp.FontInfo, codepoint ) )    // It is actually in the font?
          continue;

        // Add to avail set/counters
        src_tmp.GlyphsCount++;
        dst_tmp.GlyphsCount++;
        src_tmp.GlyphsSet.SetBit( codepoint );
        dst_tmp.GlyphsSet.SetBit( codepoint );
        total_glyphs_count++;
      }
  }

  // 3. Unpack our bit map into a flat list (we now have all the Unicode points that we know are requested _and_ available _and_ not overlapping another)
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
  {
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    src_tmp.GlyphsList.reserve( src_tmp.GlyphsCount );
    UnpackBitVectorToFlatIndexList( &src_tmp.GlyphsSet, &src_tmp.GlyphsList );
    src_tmp.GlyphsSet.Clear();
    IM_ASSERT( src_tmp.GlyphsList.Size == src_tmp.GlyphsCount );
  }
  for( int dst_i = 0; dst_i < dst_tmp_array.Size; dst_i++ )
    dst_tmp_array[ dst_i ].GlyphsSet.Clear();
  dst_tmp_array.clear();

  // Allocate packing character data and flag packed characters buffer as non-packed (x0=y0=x1=y1=0)
  // (We technically don't need to zero-clear buf_rects, but let's do it for the sake of sanity)
  ImVector<stbrp_rect> buf_rects;
  ImVector<stbtt_packedchar> buf_packedchars;
  buf_rects.resize( total_glyphs_count );
  buf_packedchars.resize( total_glyphs_count );
  memset( buf_rects.Data, 0, ( size_t )buf_rects.size_in_bytes() );
  memset( buf_packedchars.Data, 0, ( size_t )buf_packedchars.size_in_bytes() );

  // 4. Gather glyphs sizes so we can pack them in our virtual canvas.
  int total_surface = 0;
  int buf_rects_out_n = 0;
  int buf_packedchars_out_n = 0;
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
  {
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    if( src_tmp.GlyphsCount == 0 )
      continue;

    src_tmp.Rects = &buf_rects[ buf_rects_out_n ];
    src_tmp.PackedChars = &buf_packedchars[ buf_packedchars_out_n ];
    buf_rects_out_n += src_tmp.GlyphsCount;
    buf_packedchars_out_n += src_tmp.GlyphsCount;

    // Convert our ranges in the format stb_truetype wants
    ImFontConfig& cfg = atlas->ConfigData[ src_i ];
    src_tmp.PackRange.font_size = cfg.SizePixels;
    src_tmp.PackRange.first_unicode_codepoint_in_range = 0;
    src_tmp.PackRange.array_of_unicode_codepoints = src_tmp.GlyphsList.Data;
    src_tmp.PackRange.num_chars = src_tmp.GlyphsList.Size;
    src_tmp.PackRange.chardata_for_range = src_tmp.PackedChars;
    src_tmp.PackRange.h_oversample = ( unsigned char )cfg.OversampleH;
    src_tmp.PackRange.v_oversample = ( unsigned char )cfg.OversampleV;

    // Gather the sizes of all rectangles we will need to pack (this loop is based on stbtt_PackFontRangesGatherRects)
    const float scale = ( cfg.SizePixels > 0 ) ? stbtt_ScaleForPixelHeight( &src_tmp.FontInfo, cfg.SizePixels ) : stbtt_ScaleForMappingEmToPixels( &src_tmp.FontInfo, -cfg.SizePixels );
    const int padding = atlas->TexGlyphPadding;
    for( int glyph_i = 0; glyph_i < src_tmp.GlyphsList.Size; glyph_i++ )
    {
      int x0, y0, x1, y1;
      const int glyph_index_in_font = stbtt_FindGlyphIndex( &src_tmp.FontInfo, src_tmp.GlyphsList[ glyph_i ] );
      IM_ASSERT( glyph_index_in_font != 0 );
      stbtt_GetGlyphBitmapBoxSubpixel( &src_tmp.FontInfo, glyph_index_in_font, scale * cfg.OversampleH, scale * cfg.OversampleV, 0, 0, &x0, &y0, &x1, &y1 );
      src_tmp.Rects[ glyph_i ].w = ( stbrp_coord )( x1 - x0 + padding + cfg.OversampleH - 1 );
      src_tmp.Rects[ glyph_i ].h = ( stbrp_coord )( y1 - y0 + padding + cfg.OversampleV - 1 );
      total_surface += src_tmp.Rects[ glyph_i ].w * src_tmp.Rects[ glyph_i ].h;
    }
  }

  // We need a width for the skyline algorithm, any width!
  // The exact width doesn't really matter much, but some API/GPU have texture size limitations and increasing width can decrease height.
  // User can override TexDesiredWidth and TexGlyphPadding if they wish, otherwise we use a simple heuristic to select the width based on expected surface.
  const int surface_sqrt = ( int )ImSqrt( ( float )total_surface ) + 1;
  atlas->TexHeight = 0;
  if( atlas->TexDesiredWidth > 0 )
    atlas->TexWidth = atlas->TexDesiredWidth;
  else
    atlas->TexWidth = ( surface_sqrt >= 4096 * 0.7f ) ? 4096 : ( surface_sqrt >= 2048 * 0.7f ) ? 2048 : ( surface_sqrt >= 1024 * 0.7f ) ? 1024 : 512;

  // 5. Start packing
  // Pack our extra data rectangles first, so it will be on the upper-left corner of our texture (UV will have small values).
  const int TEX_HEIGHT_MAX = 1024 * 32;
  stbtt_pack_context spc = {};
  stbtt_PackBegin( &spc, NULL, atlas->TexWidth, TEX_HEIGHT_MAX, 0, atlas->TexGlyphPadding, NULL );
  ImFontAtlasBuildPackCustomRects( atlas, spc.pack_info );

  // 6. Pack each source font. No rendering yet, we are working with rectangles in an infinitely tall texture at this point.
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
  {
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    if( src_tmp.GlyphsCount == 0 )
      continue;

    stbrp_pack_rects( ( stbrp_context* )spc.pack_info, src_tmp.Rects, src_tmp.GlyphsCount );

    // Extend texture height and mark missing glyphs as non-packed so we won't render them.
    // FIXME: We are not handling packing failure here (would happen if we got off TEX_HEIGHT_MAX or if a single if larger than TexWidth?)
    for( int glyph_i = 0; glyph_i < src_tmp.GlyphsCount; glyph_i++ )
      if( src_tmp.Rects[ glyph_i ].was_packed )
        atlas->TexHeight = ImMax( atlas->TexHeight, src_tmp.Rects[ glyph_i ].y + src_tmp.Rects[ glyph_i ].h );
  }

  // 7. Allocate texture
  atlas->TexHeight = ( atlas->Flags & ImFontAtlasFlags_NoPowerOfTwoHeight ) ? ( atlas->TexHeight + 1 ) : ImUpperPowerOfTwo( atlas->TexHeight );
  atlas->TexUvScale = ImVec2( 1.0f / atlas->TexWidth, 1.0f / atlas->TexHeight );
  atlas->TexPixelsAlpha8 = ( unsigned char* )IM_ALLOC( atlas->TexWidth * atlas->TexHeight );
  memset( atlas->TexPixelsAlpha8, 0, atlas->TexWidth * atlas->TexHeight );
  spc.pixels = atlas->TexPixelsAlpha8;
  spc.height = atlas->TexHeight;

  // 8. Render/rasterize font characters into the texture
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
  {
    ImFontConfig& cfg = atlas->ConfigData[ src_i ];
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    if( src_tmp.GlyphsCount == 0 )
      continue;

    stbtt_PackFontRangesRenderIntoRects( &spc, &src_tmp.FontInfo, &src_tmp.PackRange, 1, src_tmp.Rects );

    // Apply multiply operator
    if( cfg.RasterizerMultiply != 1.0f )
    {
      unsigned char multiply_table[ 256 ];
      ImFontAtlasBuildMultiplyCalcLookupTable( multiply_table, cfg.RasterizerMultiply );
      stbrp_rect* r = &src_tmp.Rects[ 0 ];
      for( int glyph_i = 0; glyph_i < src_tmp.GlyphsCount; glyph_i++, r++ )
        if( r->was_packed )
          ImFontAtlasBuildMultiplyRectAlpha8( multiply_table, atlas->TexPixelsAlpha8, r->x, r->y, r->w, r->h, atlas->TexWidth * 1 );
    }
    src_tmp.Rects = NULL;
  }

  // End packing
  stbtt_PackEnd( &spc );
  buf_rects.clear();

  // 9. Setup ImFont and glyphs for runtime
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
  {
    ImFontBuildSrcData& src_tmp = src_tmp_array[ src_i ];
    if( src_tmp.GlyphsCount == 0 )
      continue;

    ImFontConfig& cfg = atlas->ConfigData[ src_i ];
    ImFont* dst_font = cfg.DstFont; // We can have multiple input fonts writing into a same destination font (when using MergeMode=true)

    const float font_scale = stbtt_ScaleForPixelHeight( &src_tmp.FontInfo, cfg.SizePixels );
    int unscaled_ascent, unscaled_descent, unscaled_line_gap;
    stbtt_GetFontVMetrics( &src_tmp.FontInfo, &unscaled_ascent, &unscaled_descent, &unscaled_line_gap );

    const float ascent = ImFloor( unscaled_ascent * font_scale + ( ( unscaled_ascent > 0.0f ) ? +1 : -1 ) );
    const float descent = ImFloor( unscaled_descent * font_scale + ( ( unscaled_descent > 0.0f ) ? +1 : -1 ) );
    ImFontAtlasBuildSetupFont( atlas, dst_font, &cfg, ascent, descent );
    const float font_off_x = cfg.GlyphOffset.x;
    const float font_off_y = cfg.GlyphOffset.y + IM_ROUND( dst_font->Ascent );

    for( int glyph_i = 0; glyph_i < src_tmp.GlyphsCount; glyph_i++ )
    {
      const int codepoint = src_tmp.GlyphsList[ glyph_i ];
      const stbtt_packedchar& pc = src_tmp.PackedChars[ glyph_i ];

      const float char_advance_x_org = pc.xadvance;
      const float char_advance_x_mod = ImClamp( char_advance_x_org, cfg.GlyphMinAdvanceX, cfg.GlyphMaxAdvanceX );
      float char_off_x = font_off_x;
      if( char_advance_x_org != char_advance_x_mod )
        char_off_x += cfg.PixelSnapH ? ImFloor( ( char_advance_x_mod - char_advance_x_org ) * 0.5f ) : ( char_advance_x_mod - char_advance_x_org ) * 0.5f;

      // Register glyph
      stbtt_aligned_quad q;
      float dummy_x = 0.0f, dummy_y = 0.0f;
      stbtt_GetPackedQuad( src_tmp.PackedChars, atlas->TexWidth, atlas->TexHeight, glyph_i, &dummy_x, &dummy_y, &q, 0 );
      dst_font->AddGlyph( ( ImWchar )codepoint, q.x0 + char_off_x, q.y0 + font_off_y, q.x1 + char_off_x, q.y1 + font_off_y, q.s0, q.t0, q.s1, q.t1, char_advance_x_mod );
    }
  }

  // Cleanup temporary (ImVector doesn't honor destructor)
  for( int src_i = 0; src_i < src_tmp_array.Size; src_i++ )
    src_tmp_array[ src_i ].~ImFontBuildSrcData();

  ImFontAtlasBuildFinish( atlas );
  return true;
}

// Register default custom rectangles (this is called/shared by both the stb_truetype and the FreeType builder)
void ImFontAtlasBuildInit( ImFontAtlas* atlas )
{
  if( atlas->CustomRectIds[ 0 ] >= 0 )
    return;
  if( !( atlas->Flags & ImFontAtlasFlags_NoMouseCursors ) )
    atlas->CustomRectIds[ 0 ] = atlas->AddCustomRectRegular( FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * 2 + 1, FONT_ATLAS_DEFAULT_TEX_DATA_H );
  else
    atlas->CustomRectIds[ 0 ] = atlas->AddCustomRectRegular( 2, 2 );
}

void ImFontAtlasBuildSetupFont( ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, float ascent, float descent )
{
  if( !font_config->MergeMode )
  {
    font->ClearOutputData();
    font->FontSize = font_config->SizePixels;
    font->ConfigData = font_config;
    font->ContainerAtlas = atlas;
    font->Ascent = ascent;
    font->Descent = descent;
  }
  font->ConfigDataCount++;
}

void ImFontAtlasBuildPackCustomRects( ImFontAtlas* atlas, void* stbrp_context_opaque )
{
  stbrp_context* pack_context = ( stbrp_context* )stbrp_context_opaque;
  IM_ASSERT( pack_context != NULL );

  ImVector<ImFontAtlasCustomRect>& user_rects = atlas->CustomRects;
  IM_ASSERT( user_rects.Size >= 1 ); // We expect at least the default custom rects to be registered, else something went wrong.

  ImVector<stbrp_rect> pack_rects;
  pack_rects.resize( user_rects.Size );
  memset( pack_rects.Data, 0, ( size_t )pack_rects.size_in_bytes() );
  for( int i = 0; i < user_rects.Size; i++ )
  {
    pack_rects[ i ].w = user_rects[ i ].Width;
    pack_rects[ i ].h = user_rects[ i ].Height;
  }
  stbrp_pack_rects( pack_context, &pack_rects[ 0 ], pack_rects.Size );
  for( int i = 0; i < pack_rects.Size; i++ )
    if( pack_rects[ i ].was_packed )
    {
      user_rects[ i ].X = pack_rects[ i ].x;
      user_rects[ i ].Y = pack_rects[ i ].y;
      IM_ASSERT( pack_rects[ i ].w == user_rects[ i ].Width && pack_rects[ i ].h == user_rects[ i ].Height );
      atlas->TexHeight = ImMax( atlas->TexHeight, pack_rects[ i ].y + pack_rects[ i ].h );
    }
}

static void ImFontAtlasBuildRenderDefaultTexData( ImFontAtlas* atlas )
{
  IM_ASSERT( atlas->CustomRectIds[ 0 ] >= 0 );
  IM_ASSERT( atlas->TexPixelsAlpha8 != NULL );
  ImFontAtlasCustomRect& r = atlas->CustomRects[ atlas->CustomRectIds[ 0 ] ];
  IM_ASSERT( r.IsPacked() );

  auto SECURE_FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS = SECURE_STRING(
		"..-         -XXXXXXX-    X    -           X           -XXXXXXX          -          XXXXXXX-     XX          "
		"..-         -X.....X-   X.X   -          X.X          -X.....X          -          X.....X-    X..X         "
		"---         -XXX.XXX-  X...X  -         X...X         -X....X           -           X....X-    X..X         "
		"X           -  X.X  - X.....X -        X.....X        -X...X            -            X...X-    X..X         "
		"XX          -  X.X  -X.......X-       X.......X       -X..X.X           -           X.X..X-    X..X         "
		"X.X         -  X.X  -XXXX.XXXX-       XXXX.XXXX       -X.X X.X          -          X.X X.X-    X..XXX       "
		"X..X        -  X.X  -   X.X   -          X.X          -XX   X.X         -         X.X   XX-    X..X..XXX    "
		"X...X       -  X.X  -   X.X   -    XX    X.X    XX    -      X.X        -        X.X      -    X..X..X..XX  "
		"X....X      -  X.X  -   X.X   -   X.X    X.X    X.X   -       X.X       -       X.X       -    X..X..X..X.X "
		"X.....X     -  X.X  -   X.X   -  X..X    X.X    X..X  -        X.X      -      X.X        -XXX X..X..X..X..X"
		"X......X    -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -         X.X   XX-XX   X.X         -X..XX........X..X"
		"X.......X   -  X.X  -   X.X   -X.....................X-          X.X X.X-X.X X.X          -X...X...........X"
		"X........X  -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -           X.X..X-X..X.X           - X..............X"
		"X.........X -XXX.XXX-   X.X   -  X..X    X.X    X..X  -            X...X-X...X            -  X.............X"
		"X..........X-X.....X-   X.X   -   X.X    X.X    X.X   -           X....X-X....X           -  X.............X"
		"X......XXXXX-XXXXXXX-   X.X   -    XX    X.X    XX    -          X.....X-X.....X          -   X............X"
		"X...X..X    ---------   X.X   -          X.X          -          XXXXXXX-XXXXXXX          -   X...........X "
		"X..X X..X   -       -XXXX.XXXX-       XXXX.XXXX       -------------------------------------    X..........X "
		"X.X  X..X   -       -X.......X-       X.......X       -    XX           XX    -           -    X..........X "
		"XX    X..X  -       - X.....X -        X.....X        -   X.X           X.X   -           -     X........X  "
		"      X..X          -  X...X  -         X...X         -  X..X           X..X  -           -     X........X  "
		"       XX           -   X.X   -          X.X          - X...XXXXXXXXXXXXX...X -           -     XXXXXXXXXX  "
		"------------        -    X    -           X           -X.....................X-           ------------------"
		"                    ----------------------------------- X...XXXXXXXXXXXXX...X -                             "
		"                                                      -  X..X           X..X  -                             "
		"                                                      -   X.X           X.X   -                             "
		"                                                      -    XX           XX    -                             "
  );

  const auto FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS = SECURE_FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS.decrypt();

  const int w = atlas->TexWidth;
  if( !( atlas->Flags & ImFontAtlasFlags_NoMouseCursors ) )
  {
    // Render/copy pixels
    IM_ASSERT( r.Width == FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF * 2 + 1 && r.Height == FONT_ATLAS_DEFAULT_TEX_DATA_H );
    for( int y = 0, n = 0; y < FONT_ATLAS_DEFAULT_TEX_DATA_H; y++ )
      for( int x = 0; x < FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF; x++, n++ )
      {
        const int offset0 = ( int )( r.X + x ) + ( int )( r.Y + y ) * w;
        const int offset1 = offset0 + FONT_ATLAS_DEFAULT_TEX_DATA_W_HALF + 1;
        atlas->TexPixelsAlpha8[ offset0 ] = FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[ n ] == '.' ? 0xFF : 0x00;
        atlas->TexPixelsAlpha8[ offset1 ] = FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[ n ] == 'X' ? 0xFF : 0x00;
      }
  }
  else
  {
    IM_ASSERT( r.Width == 2 && r.Height == 2 );
    const int offset = ( int )( r.X ) + ( int )( r.Y ) * w;
    atlas->TexPixelsAlpha8[ offset ] = atlas->TexPixelsAlpha8[ offset + 1 ] = atlas->TexPixelsAlpha8[ offset + w ] = atlas->TexPixelsAlpha8[ offset + w + 1 ] = 0xFF;
  }
  atlas->TexUvWhitePixel = ImVec2( ( r.X + 0.5f ) * atlas->TexUvScale.x, ( r.Y + 0.5f ) * atlas->TexUvScale.y );
}

void ImFontAtlasBuildFinish( ImFontAtlas* atlas )
{
  // Render into our custom data block
  ImFontAtlasBuildRenderDefaultTexData( atlas );

  // Register custom rectangle glyphs
  for( int i = 0; i < atlas->CustomRects.Size; i++ )
  {
    const ImFontAtlasCustomRect& r = atlas->CustomRects[ i ];
    if( r.Font == NULL || r.GlyphID == 0 )
      continue;

    IM_ASSERT( r.Font->ContainerAtlas == atlas );
    ImVec2 uv0, uv1;
    atlas->CalcCustomRectUV( &r, &uv0, &uv1 );
    r.Font->AddGlyph( ( ImWchar )r.GlyphID, r.GlyphOffset.x, r.GlyphOffset.y, r.GlyphOffset.x + r.Width, r.GlyphOffset.y + r.Height, uv0.x, uv0.y, uv1.x, uv1.y, r.GlyphAdvanceX );
  }

  // Build all fonts lookup tables
  for( int i = 0; i < atlas->Fonts.Size; i++ )
    if( atlas->Fonts[ i ]->DirtyLookupTables )
      atlas->Fonts[ i ]->BuildLookupTable();

  // Ellipsis character is required for rendering elided text. We prefer using U+2026 (horizontal ellipsis).
  // However some old fonts may contain ellipsis at U+0085. Here we auto-detect most suitable ellipsis character.
  // FIXME: Also note that 0x2026 is currently seldom included in our font ranges. Because of this we are more likely to use three individual dots.
  for( int i = 0; i < atlas->Fonts.size(); i++ )
  {
    ImFont* font = atlas->Fonts[ i ];
    if( font->EllipsisChar != ( ImWchar )-1 )
      continue;
    const ImWchar ellipsis_variants[] = { ( ImWchar )0x2026, ( ImWchar )0x0085 };
    for( int j = 0; j < IM_ARRAYSIZE( ellipsis_variants ); j++ )
      if( font->FindGlyphNoFallback( ellipsis_variants[ j ] ) != NULL ) // Verify glyph exists
      {
        font->EllipsisChar = ellipsis_variants[ j ];
        break;
      }
  }
}

// Retrieve list of range (2 int per range, values are inclusive)
const ImWchar* ImFontAtlas::GetGlyphRangesDefault()
{
  static const ImWchar ranges[] =
  {
      0x0020, 0x00FF, // Basic Latin + Latin Supplement
      0,
  };
  return &ranges[ 0 ];
}

const ImWchar* ImFontAtlas::GetGlyphRangesKorean()
{
  static const ImWchar ranges[] =
  {
      0x0020, 0x00FF, // Basic Latin + Latin Supplement
      0x3131, 0x3163, // Korean alphabets
      0xAC00, 0xD79D, // Korean characters
      0,
  };
  return &ranges[ 0 ];
}

const ImWchar* ImFontAtlas::GetGlyphRangesChineseFull()
{
  static const ImWchar ranges[] =
  {
      0x0020, 0x00FF, // Basic Latin + Latin Supplement
      0x2000, 0x206F, // General Punctuation
      0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
      0x31F0, 0x31FF, // Katakana Phonetic Extensions
      0xFF00, 0xFFEF, // Half-width characters
      0x4e00, 0x9FAF, // CJK Ideograms
      0,
  };
  return &ranges[ 0 ];
}

static void UnpackAccumulativeOffsetsIntoRanges( int base_codepoint, const short* accumulative_offsets, int accumulative_offsets_count, ImWchar* out_ranges )
{
  for( int n = 0; n < accumulative_offsets_count; n++, out_ranges += 2 )
  {
    out_ranges[ 0 ] = out_ranges[ 1 ] = ( ImWchar )( base_codepoint + accumulative_offsets[ n ] );
    base_codepoint += accumulative_offsets[ n ];
  }
  out_ranges[ 0 ] = 0;
}

//-------------------------------------------------------------------------
// [SECTION] ImFontAtlas glyph ranges helpers
//-------------------------------------------------------------------------

const ImWchar* ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()
{
  // Store 2500 regularly used characters for Simplified Chinese.
  // Sourced from https://zh.wiktionary.org/wiki/%E9%99%84%E5%BD%95:%E7%8E%B0%E4%BB%A3%E6%B1%89%E8%AF%AD%E5%B8%B8%E7%94%A8%E5%AD%97%E8%A1%A8
  // This table covers 97.97% of all characters used during the month in July, 1987.
  // You can use ImFontGlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.
  // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
  static const short accumulative_offsets_from_0x4E00[] =
  {
      0,1,2,4,1,1,1,1,2,1,3,2,1,2,2,1,1,1,1,1,5,2,1,2,3,3,3,2,2,4,1,1,1,2,1,5,2,3,1,2,1,2,1,1,2,1,1,2,2,1,4,1,1,1,1,5,10,1,2,19,2,1,2,1,2,1,2,1,2,
      1,5,1,6,3,2,1,2,2,1,1,1,4,8,5,1,1,4,1,1,3,1,2,1,5,1,2,1,1,1,10,1,1,5,2,4,6,1,4,2,2,2,12,2,1,1,6,1,1,1,4,1,1,4,6,5,1,4,2,2,4,10,7,1,1,4,2,4,
      2,1,4,3,6,10,12,5,7,2,14,2,9,1,1,6,7,10,4,7,13,1,5,4,8,4,1,1,2,28,5,6,1,1,5,2,5,20,2,2,9,8,11,2,9,17,1,8,6,8,27,4,6,9,20,11,27,6,68,2,2,1,1,
      1,2,1,2,2,7,6,11,3,3,1,1,3,1,2,1,1,1,1,1,3,1,1,8,3,4,1,5,7,2,1,4,4,8,4,2,1,2,1,1,4,5,6,3,6,2,12,3,1,3,9,2,4,3,4,1,5,3,3,1,3,7,1,5,1,1,1,1,2,
      3,4,5,2,3,2,6,1,1,2,1,7,1,7,3,4,5,15,2,2,1,5,3,22,19,2,1,1,1,1,2,5,1,1,1,6,1,1,12,8,2,9,18,22,4,1,1,5,1,16,1,2,7,10,15,1,1,6,2,4,1,2,4,1,6,
      1,1,3,2,4,1,6,4,5,1,2,1,1,2,1,10,3,1,3,2,1,9,3,2,5,7,2,19,4,3,6,1,1,1,1,1,4,3,2,1,1,1,2,5,3,1,1,1,2,2,1,1,2,1,1,2,1,3,1,1,1,3,7,1,4,1,1,2,1,
      1,2,1,2,4,4,3,8,1,1,1,2,1,3,5,1,3,1,3,4,6,2,2,14,4,6,6,11,9,1,15,3,1,28,5,2,5,5,3,1,3,4,5,4,6,14,3,2,3,5,21,2,7,20,10,1,2,19,2,4,28,28,2,3,
      2,1,14,4,1,26,28,42,12,40,3,52,79,5,14,17,3,2,2,11,3,4,6,3,1,8,2,23,4,5,8,10,4,2,7,3,5,1,1,6,3,1,2,2,2,5,28,1,1,7,7,20,5,3,29,3,17,26,1,8,4,
      27,3,6,11,23,5,3,4,6,13,24,16,6,5,10,25,35,7,3,2,3,3,14,3,6,2,6,1,4,2,3,8,2,1,1,3,3,3,4,1,1,13,2,2,4,5,2,1,14,14,1,2,2,1,4,5,2,3,1,14,3,12,
      3,17,2,16,5,1,2,1,8,9,3,19,4,2,2,4,17,25,21,20,28,75,1,10,29,103,4,1,2,1,1,4,2,4,1,2,3,24,2,2,2,1,1,2,1,3,8,1,1,1,2,1,1,3,1,1,1,6,1,5,3,1,1,
      1,3,4,1,1,5,2,1,5,6,13,9,16,1,1,1,1,3,2,3,2,4,5,2,5,2,2,3,7,13,7,2,2,1,1,1,1,2,3,3,2,1,6,4,9,2,1,14,2,14,2,1,18,3,4,14,4,11,41,15,23,15,23,
      176,1,3,4,1,1,1,1,5,3,1,2,3,7,3,1,1,2,1,2,4,4,6,2,4,1,9,7,1,10,5,8,16,29,1,1,2,2,3,1,3,5,2,4,5,4,1,1,2,2,3,3,7,1,6,10,1,17,1,44,4,6,2,1,1,6,
      5,4,2,10,1,6,9,2,8,1,24,1,2,13,7,8,8,2,1,4,1,3,1,3,3,5,2,5,10,9,4,9,12,2,1,6,1,10,1,1,7,7,4,10,8,3,1,13,4,3,1,6,1,3,5,2,1,2,17,16,5,2,16,6,
      1,4,2,1,3,3,6,8,5,11,11,1,3,3,2,4,6,10,9,5,7,4,7,4,7,1,1,4,2,1,3,6,8,7,1,6,11,5,5,3,24,9,4,2,7,13,5,1,8,82,16,61,1,1,1,4,2,2,16,10,3,8,1,1,
      6,4,2,1,3,1,1,1,4,3,8,4,2,2,1,1,1,1,1,6,3,5,1,1,4,6,9,2,1,1,1,2,1,7,2,1,6,1,5,4,4,3,1,8,1,3,3,1,3,2,2,2,2,3,1,6,1,2,1,2,1,3,7,1,8,2,1,2,1,5,
      2,5,3,5,10,1,2,1,1,3,2,5,11,3,9,3,5,1,1,5,9,1,2,1,5,7,9,9,8,1,3,3,3,6,8,2,3,2,1,1,32,6,1,2,15,9,3,7,13,1,3,10,13,2,14,1,13,10,2,1,3,10,4,15,
      2,15,15,10,1,3,9,6,9,32,25,26,47,7,3,2,3,1,6,3,4,3,2,8,5,4,1,9,4,2,2,19,10,6,2,3,8,1,2,2,4,2,1,9,4,4,4,6,4,8,9,2,3,1,1,1,1,3,5,5,1,3,8,4,6,
      2,1,4,12,1,5,3,7,13,2,5,8,1,6,1,2,5,14,6,1,5,2,4,8,15,5,1,23,6,62,2,10,1,1,8,1,2,2,10,4,2,2,9,2,1,1,3,2,3,1,5,3,3,2,1,3,8,1,1,1,11,3,1,1,4,
      3,7,1,14,1,2,3,12,5,2,5,1,6,7,5,7,14,11,1,3,1,8,9,12,2,1,11,8,4,4,2,6,10,9,13,1,1,3,1,5,1,3,2,4,4,1,18,2,3,14,11,4,29,4,2,7,1,3,13,9,2,2,5,
      3,5,20,7,16,8,5,72,34,6,4,22,12,12,28,45,36,9,7,39,9,191,1,1,1,4,11,8,4,9,2,3,22,1,1,1,1,4,17,1,7,7,1,11,31,10,2,4,8,2,3,2,1,4,2,16,4,32,2,
      3,19,13,4,9,1,5,2,14,8,1,1,3,6,19,6,5,1,16,6,2,10,8,5,1,2,3,1,5,5,1,11,6,6,1,3,3,2,6,3,8,1,1,4,10,7,5,7,7,5,8,9,2,1,3,4,1,1,3,1,3,3,2,6,16,
      1,4,6,3,1,10,6,1,3,15,2,9,2,10,25,13,9,16,6,2,2,10,11,4,3,9,1,2,6,6,5,4,30,40,1,10,7,12,14,33,6,3,6,7,3,1,3,1,11,14,4,9,5,12,11,49,18,51,31,
      140,31,2,2,1,5,1,8,1,10,1,4,4,3,24,1,10,1,3,6,6,16,3,4,5,2,1,4,2,57,10,6,22,2,22,3,7,22,6,10,11,36,18,16,33,36,2,5,5,1,1,1,4,10,1,4,13,2,7,
      5,2,9,3,4,1,7,43,3,7,3,9,14,7,9,1,11,1,1,3,7,4,18,13,1,14,1,3,6,10,73,2,2,30,6,1,11,18,19,13,22,3,46,42,37,89,7,3,16,34,2,2,3,9,1,7,1,1,1,2,
      2,4,10,7,3,10,3,9,5,28,9,2,6,13,7,3,1,3,10,2,7,2,11,3,6,21,54,85,2,1,4,2,2,1,39,3,21,2,2,5,1,1,1,4,1,1,3,4,15,1,3,2,4,4,2,3,8,2,20,1,8,7,13,
      4,1,26,6,2,9,34,4,21,52,10,4,4,1,5,12,2,11,1,7,2,30,12,44,2,30,1,1,3,6,16,9,17,39,82,2,2,24,7,1,7,3,16,9,14,44,2,1,2,1,2,3,5,2,4,1,6,7,5,3,
      2,6,1,11,5,11,2,1,18,19,8,1,3,24,29,2,1,3,5,2,2,1,13,6,5,1,46,11,3,5,1,1,5,8,2,10,6,12,6,3,7,11,2,4,16,13,2,5,1,1,2,2,5,2,28,5,2,23,10,8,4,
      4,22,39,95,38,8,14,9,5,1,13,5,4,3,13,12,11,1,9,1,27,37,2,5,4,4,63,211,95,2,2,2,1,3,5,2,1,1,2,2,1,1,1,3,2,4,1,2,1,1,5,2,2,1,1,2,3,1,3,1,1,1,
      3,1,4,2,1,3,6,1,1,3,7,15,5,3,2,5,3,9,11,4,2,22,1,6,3,8,7,1,4,28,4,16,3,3,25,4,4,27,27,1,4,1,2,2,7,1,3,5,2,28,8,2,14,1,8,6,16,25,3,3,3,14,3,
      3,1,1,2,1,4,6,3,8,4,1,1,1,2,3,6,10,6,2,3,18,3,2,5,5,4,3,1,5,2,5,4,23,7,6,12,6,4,17,11,9,5,1,1,10,5,12,1,1,11,26,33,7,3,6,1,17,7,1,5,12,1,11,
      2,4,1,8,14,17,23,1,2,1,7,8,16,11,9,6,5,2,6,4,16,2,8,14,1,11,8,9,1,1,1,9,25,4,11,19,7,2,15,2,12,8,52,7,5,19,2,16,4,36,8,1,16,8,24,26,4,6,2,9,
      5,4,36,3,28,12,25,15,37,27,17,12,59,38,5,32,127,1,2,9,17,14,4,1,2,1,1,8,11,50,4,14,2,19,16,4,17,5,4,5,26,12,45,2,23,45,104,30,12,8,3,10,2,2,
      3,3,1,4,20,7,2,9,6,15,2,20,1,3,16,4,11,15,6,134,2,5,59,1,2,2,2,1,9,17,3,26,137,10,211,59,1,2,4,1,4,1,1,1,2,6,2,3,1,1,2,3,2,3,1,3,4,4,2,3,3,
      1,4,3,1,7,2,2,3,1,2,1,3,3,3,2,2,3,2,1,3,14,6,1,3,2,9,6,15,27,9,34,145,1,1,2,1,1,1,1,2,1,1,1,1,2,2,2,3,1,2,1,1,1,2,3,5,8,3,5,2,4,1,3,2,2,2,12,
      4,1,1,1,10,4,5,1,20,4,16,1,15,9,5,12,2,9,2,5,4,2,26,19,7,1,26,4,30,12,15,42,1,6,8,172,1,1,4,2,1,1,11,2,2,4,2,1,2,1,10,8,1,2,1,4,5,1,2,5,1,8,
      4,1,3,4,2,1,6,2,1,3,4,1,2,1,1,1,1,12,5,7,2,4,3,1,1,1,3,3,6,1,2,2,3,3,3,2,1,2,12,14,11,6,6,4,12,2,8,1,7,10,1,35,7,4,13,15,4,3,23,21,28,52,5,
      26,5,6,1,7,10,2,7,53,3,2,1,1,1,2,163,532,1,10,11,1,3,3,4,8,2,8,6,2,2,23,22,4,2,2,4,2,1,3,1,3,3,5,9,8,2,1,2,8,1,10,2,12,21,20,15,105,2,3,1,1,
      3,2,3,1,1,2,5,1,4,15,11,19,1,1,1,1,5,4,5,1,1,2,5,3,5,12,1,2,5,1,11,1,1,15,9,1,4,5,3,26,8,2,1,3,1,1,15,19,2,12,1,2,5,2,7,2,19,2,20,6,26,7,5,
      2,2,7,34,21,13,70,2,128,1,1,2,1,1,2,1,1,3,2,2,2,15,1,4,1,3,4,42,10,6,1,49,85,8,1,2,1,1,4,4,2,3,6,1,5,7,4,3,211,4,1,2,1,2,5,1,2,4,2,2,6,5,6,
      10,3,4,48,100,6,2,16,296,5,27,387,2,2,3,7,16,8,5,38,15,39,21,9,10,3,7,59,13,27,21,47,5,21,6
  };
  static ImWchar base_ranges[] = // not zero-terminated
  {
      0x0020, 0x00FF, // Basic Latin + Latin Supplement
      0x2000, 0x206F, // General Punctuation
      0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
      0x31F0, 0x31FF, // Katakana Phonetic Extensions
      0xFF00, 0xFFEF  // Half-width characters
  };
  static ImWchar full_ranges[ IM_ARRAYSIZE( base_ranges ) + IM_ARRAYSIZE( accumulative_offsets_from_0x4E00 ) * 2 + 1 ] = { 0 };
  if( !full_ranges[ 0 ] )
  {
    memcpy( full_ranges, base_ranges, sizeof( base_ranges ) );
    UnpackAccumulativeOffsetsIntoRanges( 0x4E00, accumulative_offsets_from_0x4E00, IM_ARRAYSIZE( accumulative_offsets_from_0x4E00 ), full_ranges + IM_ARRAYSIZE( base_ranges ) );
  }
  return &full_ranges[ 0 ];
}

const ImWchar* ImFontAtlas::GetGlyphRangesJapanese()
{
  // 1946 common ideograms code points for Japanese
  // Sourced from http://theinstructionlimit.com/common-kanji-character-ranges-for-xna-spritefont-rendering
  // FIXME: Source a list of the revised 2136 Joyo Kanji list from 2010 and rebuild this.
  // You can use ImFontGlyphRangesBuilder to create your own ranges derived from this, by merging existing ranges or adding new characters.
  // (Stored as accumulative offsets from the initial unicode codepoint 0x4E00. This encoding is designed to helps us compact the source code size.)
  static const short accumulative_offsets_from_0x4E00[] =
  {
      0,1,2,4,1,1,1,1,2,1,6,2,2,1,8,5,7,11,1,2,10,10,8,2,4,20,2,11,8,2,1,2,1,6,2,1,7,5,3,7,1,1,13,7,9,1,4,6,1,2,1,10,1,1,9,2,2,4,5,6,14,1,1,9,3,18,
      5,4,2,2,10,7,1,1,1,3,2,4,3,23,2,10,12,2,14,2,4,13,1,6,10,3,1,7,13,6,4,13,5,2,3,17,2,2,5,7,6,4,1,7,14,16,6,13,9,15,1,1,7,16,4,7,1,19,9,2,7,15,
      2,6,5,13,25,4,14,13,11,25,1,1,1,2,1,2,2,3,10,11,3,3,1,1,4,4,2,1,4,9,1,4,3,5,5,2,7,12,11,15,7,16,4,5,16,2,1,1,6,3,3,1,1,2,7,6,6,7,1,4,7,6,1,1,
      2,1,12,3,3,9,5,8,1,11,1,2,3,18,20,4,1,3,6,1,7,3,5,5,7,2,2,12,3,1,4,2,3,2,3,11,8,7,4,17,1,9,25,1,1,4,2,2,4,1,2,7,1,1,1,3,1,2,6,16,1,2,1,1,3,12,
      20,2,5,20,8,7,6,2,1,1,1,1,6,2,1,2,10,1,1,6,1,3,1,2,1,4,1,12,4,1,3,1,1,1,1,1,10,4,7,5,13,1,15,1,1,30,11,9,1,15,38,14,1,32,17,20,1,9,31,2,21,9,
      4,49,22,2,1,13,1,11,45,35,43,55,12,19,83,1,3,2,3,13,2,1,7,3,18,3,13,8,1,8,18,5,3,7,25,24,9,24,40,3,17,24,2,1,6,2,3,16,15,6,7,3,12,1,9,7,3,3,
      3,15,21,5,16,4,5,12,11,11,3,6,3,2,31,3,2,1,1,23,6,6,1,4,2,6,5,2,1,1,3,3,22,2,6,2,3,17,3,2,4,5,1,9,5,1,1,6,15,12,3,17,2,14,2,8,1,23,16,4,2,23,
      8,15,23,20,12,25,19,47,11,21,65,46,4,3,1,5,6,1,2,5,26,2,1,1,3,11,1,1,1,2,1,2,3,1,1,10,2,3,1,1,1,3,6,3,2,2,6,6,9,2,2,2,6,2,5,10,2,4,1,2,1,2,2,
      3,1,1,3,1,2,9,23,9,2,1,1,1,1,5,3,2,1,10,9,6,1,10,2,31,25,3,7,5,40,1,15,6,17,7,27,180,1,3,2,2,1,1,1,6,3,10,7,1,3,6,17,8,6,2,2,1,3,5,5,8,16,14,
      15,1,1,4,1,2,1,1,1,3,2,7,5,6,2,5,10,1,4,2,9,1,1,11,6,1,44,1,3,7,9,5,1,3,1,1,10,7,1,10,4,2,7,21,15,7,2,5,1,8,3,4,1,3,1,6,1,4,2,1,4,10,8,1,4,5,
      1,5,10,2,7,1,10,1,1,3,4,11,10,29,4,7,3,5,2,3,33,5,2,19,3,1,4,2,6,31,11,1,3,3,3,1,8,10,9,12,11,12,8,3,14,8,6,11,1,4,41,3,1,2,7,13,1,5,6,2,6,12,
      12,22,5,9,4,8,9,9,34,6,24,1,1,20,9,9,3,4,1,7,2,2,2,6,2,28,5,3,6,1,4,6,7,4,2,1,4,2,13,6,4,4,3,1,8,8,3,2,1,5,1,2,2,3,1,11,11,7,3,6,10,8,6,16,16,
      22,7,12,6,21,5,4,6,6,3,6,1,3,2,1,2,8,29,1,10,1,6,13,6,6,19,31,1,13,4,4,22,17,26,33,10,4,15,12,25,6,67,10,2,3,1,6,10,2,6,2,9,1,9,4,4,1,2,16,2,
      5,9,2,3,8,1,8,3,9,4,8,6,4,8,11,3,2,1,1,3,26,1,7,5,1,11,1,5,3,5,2,13,6,39,5,1,5,2,11,6,10,5,1,15,5,3,6,19,21,22,2,4,1,6,1,8,1,4,8,2,4,2,2,9,2,
      1,1,1,4,3,6,3,12,7,1,14,2,4,10,2,13,1,17,7,3,2,1,3,2,13,7,14,12,3,1,29,2,8,9,15,14,9,14,1,3,1,6,5,9,11,3,38,43,20,7,7,8,5,15,12,19,15,81,8,7,
      1,5,73,13,37,28,8,8,1,15,18,20,165,28,1,6,11,8,4,14,7,15,1,3,3,6,4,1,7,14,1,1,11,30,1,5,1,4,14,1,4,2,7,52,2,6,29,3,1,9,1,21,3,5,1,26,3,11,14,
      11,1,17,5,1,2,1,3,2,8,1,2,9,12,1,1,2,3,8,3,24,12,7,7,5,17,3,3,3,1,23,10,4,4,6,3,1,16,17,22,3,10,21,16,16,6,4,10,2,1,1,2,8,8,6,5,3,3,3,39,25,
      15,1,1,16,6,7,25,15,6,6,12,1,22,13,1,4,9,5,12,2,9,1,12,28,8,3,5,10,22,60,1,2,40,4,61,63,4,1,13,12,1,4,31,12,1,14,89,5,16,6,29,14,2,5,49,18,18,
      5,29,33,47,1,17,1,19,12,2,9,7,39,12,3,7,12,39,3,1,46,4,12,3,8,9,5,31,15,18,3,2,2,66,19,13,17,5,3,46,124,13,57,34,2,5,4,5,8,1,1,1,4,3,1,17,5,
      3,5,3,1,8,5,6,3,27,3,26,7,12,7,2,17,3,7,18,78,16,4,36,1,2,1,6,2,1,39,17,7,4,13,4,4,4,1,10,4,2,4,6,3,10,1,19,1,26,2,4,33,2,73,47,7,3,8,2,4,15,
      18,1,29,2,41,14,1,21,16,41,7,39,25,13,44,2,2,10,1,13,7,1,7,3,5,20,4,8,2,49,1,10,6,1,6,7,10,7,11,16,3,12,20,4,10,3,1,2,11,2,28,9,2,4,7,2,15,1,
      27,1,28,17,4,5,10,7,3,24,10,11,6,26,3,2,7,2,2,49,16,10,16,15,4,5,27,61,30,14,38,22,2,7,5,1,3,12,23,24,17,17,3,3,2,4,1,6,2,7,5,1,1,5,1,1,9,4,
      1,3,6,1,8,2,8,4,14,3,5,11,4,1,3,32,1,19,4,1,13,11,5,2,1,8,6,8,1,6,5,13,3,23,11,5,3,16,3,9,10,1,24,3,198,52,4,2,2,5,14,5,4,22,5,20,4,11,6,41,
      1,5,2,2,11,5,2,28,35,8,22,3,18,3,10,7,5,3,4,1,5,3,8,9,3,6,2,16,22,4,5,5,3,3,18,23,2,6,23,5,27,8,1,33,2,12,43,16,5,2,3,6,1,20,4,2,9,7,1,11,2,
      10,3,14,31,9,3,25,18,20,2,5,5,26,14,1,11,17,12,40,19,9,6,31,83,2,7,9,19,78,12,14,21,76,12,113,79,34,4,1,1,61,18,85,10,2,2,13,31,11,50,6,33,159,
      179,6,6,7,4,4,2,4,2,5,8,7,20,32,22,1,3,10,6,7,28,5,10,9,2,77,19,13,2,5,1,4,4,7,4,13,3,9,31,17,3,26,2,6,6,5,4,1,7,11,3,4,2,1,6,2,20,4,1,9,2,6,
      3,7,1,1,1,20,2,3,1,6,2,3,6,2,4,8,1,5,13,8,4,11,23,1,10,6,2,1,3,21,2,2,4,24,31,4,10,10,2,5,192,15,4,16,7,9,51,1,2,1,1,5,1,1,2,1,3,5,3,1,3,4,1,
      3,1,3,3,9,8,1,2,2,2,4,4,18,12,92,2,10,4,3,14,5,25,16,42,4,14,4,2,21,5,126,30,31,2,1,5,13,3,22,5,6,6,20,12,1,14,12,87,3,19,1,8,2,9,9,3,3,23,2,
      3,7,6,3,1,2,3,9,1,3,1,6,3,2,1,3,11,3,1,6,10,3,2,3,1,2,1,5,1,1,11,3,6,4,1,7,2,1,2,5,5,34,4,14,18,4,19,7,5,8,2,6,79,1,5,2,14,8,2,9,2,1,36,28,16,
      4,1,1,1,2,12,6,42,39,16,23,7,15,15,3,2,12,7,21,64,6,9,28,8,12,3,3,41,59,24,51,55,57,294,9,9,2,6,2,15,1,2,13,38,90,9,9,9,3,11,7,1,1,1,5,6,3,2,
      1,2,2,3,8,1,4,4,1,5,7,1,4,3,20,4,9,1,1,1,5,5,17,1,5,2,6,2,4,1,4,5,7,3,18,11,11,32,7,5,4,7,11,127,8,4,3,3,1,10,1,1,6,21,14,1,16,1,7,1,3,6,9,65,
      51,4,3,13,3,10,1,1,12,9,21,110,3,19,24,1,1,10,62,4,1,29,42,78,28,20,18,82,6,3,15,6,84,58,253,15,155,264,15,21,9,14,7,58,40,39,
  };
  static ImWchar base_ranges[] = // not zero-terminated
  {
      0x0020, 0x00FF, // Basic Latin + Latin Supplement
      0x3000, 0x30FF, // CJK Symbols and Punctuations, Hiragana, Katakana
      0x31F0, 0x31FF, // Katakana Phonetic Extensions
      0xFF00, 0xFFEF  // Half-width characters
  };
  static ImWchar full_ranges[ IM_ARRAYSIZE( base_ranges ) + IM_ARRAYSIZE( accumulative_offsets_from_0x4E00 ) * 2 + 1 ] = { 0 };
  if( !full_ranges[ 0 ] )
  {
    memcpy( full_ranges, base_ranges, sizeof( base_ranges ) );
    UnpackAccumulativeOffsetsIntoRanges( 0x4E00, accumulative_offsets_from_0x4E00, IM_ARRAYSIZE( accumulative_offsets_from_0x4E00 ), full_ranges + IM_ARRAYSIZE( base_ranges ) );
  }
  return &full_ranges[ 0 ];
}

const ImWchar* ImFontAtlas::GetGlyphRangesCyrillic()
{
  static const ImWchar ranges[] =
  {
      0x0020, 0x00FF, // Basic Latin + Latin Supplement
      0x0400, 0x052F, // Cyrillic + Cyrillic Supplement
      0x2DE0, 0x2DFF, // Cyrillic Extended-A
      0xA640, 0xA69F, // Cyrillic Extended-B
      0,
  };
  return &ranges[ 0 ];
}

const ImWchar* ImFontAtlas::GetGlyphRangesThai()
{
  static const ImWchar ranges[] =
  {
      0x0020, 0x00FF, // Basic Latin
      0x2010, 0x205E, // Punctuations
      0x0E00, 0x0E7F, // Thai
      0,
  };
  return &ranges[ 0 ];
}

const ImWchar* ImFontAtlas::GetGlyphRangesVietnamese()
{
  static const ImWchar ranges[] =
  {
      0x0020, 0x00FF, // Basic Latin
      0x0102, 0x0103,
      0x0110, 0x0111,
      0x0128, 0x0129,
      0x0168, 0x0169,
      0x01A0, 0x01A1,
      0x01AF, 0x01B0,
      0x1EA0, 0x1EF9,
      0,
  };
  return &ranges[ 0 ];
}

//-----------------------------------------------------------------------------
// [SECTION] ImFontGlyphRangesBuilder
//-----------------------------------------------------------------------------

void ImFontGlyphRangesBuilder::AddText( const char* text, const char* text_end )
{
  while( text_end ? ( text < text_end ) : *text )
  {
    unsigned int c = 0;
    int c_len = ImTextCharFromUtf8( &c, text, text_end );
    text += c_len;
    if( c_len == 0 )
      break;
    AddChar( ( ImWchar )c );
  }
}

void ImFontGlyphRangesBuilder::AddRanges( const ImWchar* ranges )
{
  for( ; ranges[ 0 ]; ranges += 2 )
    for( ImWchar c = ranges[ 0 ]; c <= ranges[ 1 ]; c++ )
      AddChar( c );
}

void ImFontGlyphRangesBuilder::BuildRanges( ImVector<ImWchar>* out_ranges )
{
  const int max_codepoint = IM_UNICODE_CODEPOINT_MAX;
  for( int n = 0; n <= max_codepoint; n++ )
    if( GetBit( n ) )
    {
      out_ranges->push_back( ( ImWchar )n );
      while( n < max_codepoint && GetBit( n + 1 ) )
        n++;
      out_ranges->push_back( ( ImWchar )n );
    }
  out_ranges->push_back( 0 );
}

//-----------------------------------------------------------------------------
// [SECTION] ImFont
//-----------------------------------------------------------------------------

ImFont::ImFont()
{
  FontSize = 0.0f;
  FallbackAdvanceX = 0.0f;
  FallbackChar = ( ImWchar )'?';
  EllipsisChar = ( ImWchar )-1;
  DisplayOffset = ImVec2( 0.0f, 0.0f );
  FallbackGlyph = NULL;
  ContainerAtlas = NULL;
  ConfigData = NULL;
  ConfigDataCount = 0;
  DirtyLookupTables = false;
  Scale = 1.0f;
  Ascent = Descent = 0.0f;
  MetricsTotalSurface = 0;
  memset( Used4kPagesMap, 0, sizeof( Used4kPagesMap ) );
}

ImFont::~ImFont()
{
  ClearOutputData();
}

void    ImFont::ClearOutputData()
{
  FontSize = 0.0f;
  FallbackAdvanceX = 0.0f;
  Glyphs.clear();
  IndexAdvanceX.clear();
  IndexLookup.clear();
  FallbackGlyph = NULL;
  ContainerAtlas = NULL;
  DirtyLookupTables = true;
  Ascent = Descent = 0.0f;
  MetricsTotalSurface = 0;
}

void ImFont::BuildLookupTable()
{
  int max_codepoint = 0;
  for( int i = 0; i != Glyphs.Size; i++ )
    max_codepoint = ImMax( max_codepoint, ( int )Glyphs[ i ].Codepoint );

  // Build lookup table
  IM_ASSERT( Glyphs.Size < 0xFFFF ); // -1 is reserved
  IndexAdvanceX.clear();
  IndexLookup.clear();
  DirtyLookupTables = false;
  memset( Used4kPagesMap, 0, sizeof( Used4kPagesMap ) );
  GrowIndex( max_codepoint + 1 );
  for( int i = 0; i < Glyphs.Size; i++ )
  {
    int codepoint = ( int )Glyphs[ i ].Codepoint;
    IndexAdvanceX[ codepoint ] = Glyphs[ i ].AdvanceX;
    IndexLookup[ codepoint ] = ( ImWchar )i;

    // Mark 4K page as used
    const int page_n = codepoint / 4096;
    Used4kPagesMap[ page_n >> 3 ] |= 1 << ( page_n & 7 );
  }

  // Create a glyph to handle TAB
  // FIXME: Needs proper TAB handling but it needs to be contextualized (or we could arbitrary say that each string starts at "column 0" ?)
  if( FindGlyph( ( ImWchar )' ' ) )
  {
    if( Glyphs.back().Codepoint != '\t' )   // So we can call this function multiple times (FIXME: Flaky)
      Glyphs.resize( Glyphs.Size + 1 );
    ImFontGlyph& tab_glyph = Glyphs.back();
    tab_glyph = *FindGlyph( ( ImWchar )' ' );
    tab_glyph.Codepoint = '\t';
    tab_glyph.AdvanceX *= IM_TABSIZE;
    IndexAdvanceX[ ( int )tab_glyph.Codepoint ] = ( float )tab_glyph.AdvanceX;
    IndexLookup[ ( int )tab_glyph.Codepoint ] = ( ImWchar )( Glyphs.Size - 1 );
  }

  // Mark special glyphs as not visible (note that AddGlyph already mark as non-visible glyphs with zero-size polygons)
  SetGlyphVisible( ( ImWchar )' ', false );
  SetGlyphVisible( ( ImWchar )'\t', false );

  // Setup fall-backs
  FallbackGlyph = FindGlyphNoFallback( FallbackChar );
  FallbackAdvanceX = FallbackGlyph ? FallbackGlyph->AdvanceX : 0.0f;
  for( int i = 0; i < max_codepoint + 1; i++ )
    if( IndexAdvanceX[ i ] < 0.0f )
      IndexAdvanceX[ i ] = FallbackAdvanceX;
}

// API is designed this way to avoid exposing the 4K page size
// e.g. use with IsGlyphRangeUnused(0, 255)
bool ImFont::IsGlyphRangeUnused( unsigned int c_begin, unsigned int c_last )
{
  unsigned int page_begin = ( c_begin / 4096 );
  unsigned int page_last = ( c_last / 4096 );
  for( unsigned int page_n = page_begin; page_n <= page_last; page_n++ )
    if( ( page_n >> 3 ) < sizeof( Used4kPagesMap ) )
      if( Used4kPagesMap[ page_n >> 3 ] & ( 1 << ( page_n & 7 ) ) )
        return false;
  return true;
}

void ImFont::SetGlyphVisible( ImWchar c, bool visible )
{
  if( ImFontGlyph* glyph = ( ImFontGlyph* )( void* )FindGlyph( ( ImWchar )c ) )
    glyph->Visible = visible ? 1 : 0;
}

void ImFont::SetFallbackChar( ImWchar c )
{
  FallbackChar = c;
  BuildLookupTable();
}

void ImFont::GrowIndex( int new_size )
{
  IM_ASSERT( IndexAdvanceX.Size == IndexLookup.Size );
  if( new_size <= IndexLookup.Size )
    return;
  IndexAdvanceX.resize( new_size, -1.0f );
  IndexLookup.resize( new_size, ( ImWchar )-1 );
}

// x0/y0/x1/y1 are offset from the character upper-left layout position, in pixels. Therefore x0/y0 are often fairly close to zero.
// Not to be mistaken with texture coordinates, which are held by u0/v0/u1/v1 in normalized format (0.0..1.0 on each texture axis).
void ImFont::AddGlyph( ImWchar codepoint, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x )
{
  Glyphs.resize( Glyphs.Size + 1 );
  ImFontGlyph& glyph = Glyphs.back();
  glyph.Codepoint = ( unsigned int )codepoint;
  glyph.Visible = ( x0 != x1 ) && ( y0 != y1 );
  glyph.X0 = x0;
  glyph.Y0 = y0;
  glyph.X1 = x1;
  glyph.Y1 = y1;
  glyph.U0 = u0;
  glyph.V0 = v0;
  glyph.U1 = u1;
  glyph.V1 = v1;
  glyph.AdvanceX = advance_x + ConfigData->GlyphExtraSpacing.x;  // Bake spacing into AdvanceX

  if( ConfigData->PixelSnapH )
    glyph.AdvanceX = IM_ROUND( glyph.AdvanceX );

  // Compute rough surface usage metrics (+1 to account for average padding, +0.99 to round)
  DirtyLookupTables = true;
  MetricsTotalSurface += ( int )( ( glyph.U1 - glyph.U0 ) * ContainerAtlas->TexWidth + 1.99f ) * ( int )( ( glyph.V1 - glyph.V0 ) * ContainerAtlas->TexHeight + 1.99f );
}

void ImFont::AddRemapChar( ImWchar dst, ImWchar src, bool overwrite_dst )
{
  IM_ASSERT( IndexLookup.Size > 0 );    // Currently this can only be called AFTER the font has been built, aka after calling ImFontAtlas::GetTexDataAs*() function.
  unsigned int index_size = ( unsigned int )IndexLookup.Size;

  if( dst < index_size && IndexLookup.Data[ dst ] == ( ImWchar )-1 && !overwrite_dst ) // 'dst' already exists
    return;
  if( src >= index_size && dst >= index_size ) // both 'dst' and 'src' don't exist -> no-op
    return;

  GrowIndex( dst + 1 );
  IndexLookup[ dst ] = ( src < index_size ) ? IndexLookup.Data[ src ] : ( ImWchar )-1;
  IndexAdvanceX[ dst ] = ( src < index_size ) ? IndexAdvanceX.Data[ src ] : 1.0f;
}

const ImFontGlyph* ImFont::FindGlyph( ImWchar c ) const
{
  if( c >= ( size_t )IndexLookup.Size )
    return FallbackGlyph;
  const ImWchar i = IndexLookup.Data[ c ];
  if( i == ( ImWchar )-1 )
    return FallbackGlyph;
  return &Glyphs.Data[ i ];
}

const ImFontGlyph* ImFont::FindGlyphNoFallback( ImWchar c ) const
{
  if( c >= ( size_t )IndexLookup.Size )
    return NULL;
  const ImWchar i = IndexLookup.Data[ c ];
  if( i == ( ImWchar )-1 )
    return NULL;
  return &Glyphs.Data[ i ];
}

const char* ImFont::CalcWordWrapPositionA( float scale, const char* text, const char* text_end, float wrap_width ) const
{
  // Simple word-wrapping for English, not full-featured. Please submit failing cases!
  // FIXME: Much possible improvements (don't cut things like "word !", "word!!!" but cut within "word,,,,", more sensible support for punctuations, support for Unicode punctuations, etc.)

  // For references, possible wrap point marked with ^
  //  "aaa bbb, ccc,ddd. eee   fff. ggg!"
  //      ^    ^    ^   ^   ^__    ^    ^

  // List of hardcoded separators: .,;!?'"

  // Skip extra blanks after a line returns (that includes not counting them in width computation)
  // e.g. "Hello    world" --> "Hello" "World"

  // Cut words that cannot possibly fit within one line.
  // e.g.: "The tropical fish" with ~5 characters worth of width --> "The tr" "opical" "fish"

  float line_width = 0.0f;
  float word_width = 0.0f;
  float blank_width = 0.0f;
  wrap_width /= scale; // We work with unscaled widths to avoid scaling every characters

  const char* word_end = text;
  const char* prev_word_end = NULL;
  bool inside_word = true;

  const char* s = text;
  while( s < text_end )
  {
    unsigned int c = ( unsigned int )*s;
    const char* next_s;
    if( c < 0x80 )
      next_s = s + 1;
    else
      next_s = s + ImTextCharFromUtf8( &c, s, text_end );
    if( c == 0 )
      break;

    if( c < 32 )
    {
      if( c == '\n' )
      {
        line_width = word_width = blank_width = 0.0f;
        inside_word = true;
        s = next_s;
        continue;
      }
      if( c == '\r' )
      {
        s = next_s;
        continue;
      }
    }

    const float char_width = ( ( int )c < IndexAdvanceX.Size ? IndexAdvanceX.Data[ c ] : FallbackAdvanceX );
    if( ImCharIsBlankW( c ) )
    {
      if( inside_word )
      {
        line_width += blank_width;
        blank_width = 0.0f;
        word_end = s;
      }
      blank_width += char_width;
      inside_word = false;
    }
    else
    {
      word_width += char_width;
      if( inside_word )
      {
        word_end = next_s;
      }
      else
      {
        prev_word_end = word_end;
        line_width += word_width + blank_width;
        word_width = blank_width = 0.0f;
      }

      // Allow wrapping after punctuation.
      inside_word = !( c == '.' || c == ',' || c == ';' || c == '!' || c == '?' || c == '\"' );
    }

    // We ignore blank width at the end of the line (they can be skipped)
    if( line_width + word_width > wrap_width )
    {
      // Words that cannot possibly fit within an entire line will be cut anywhere.
      if( word_width < wrap_width )
        s = prev_word_end ? prev_word_end : word_end;
      break;
    }

    s = next_s;
  }

  return s;
}

ImVec2 ImFont::CalcTextSizeA( float size, float max_width, float wrap_width, const char* text_begin, const char* text_end, const char** remaining ) const
{
  if( !text_end )
    text_end = text_begin + strlen( text_begin ); // FIXME-OPT: Need to avoid this.

  const float line_height = size;
  const float scale = size / FontSize;

  ImVec2 text_size = ImVec2( 0, 0 );
  float line_width = 0.0f;

  const bool word_wrap_enabled = ( wrap_width > 0.0f );
  const char* word_wrap_eol = NULL;

  const char* s = text_begin;
  while( s < text_end )
  {
    if( word_wrap_enabled )
    {
      // Calculate how far we can render. Requires two passes on the string data but keeps the code simple and not intrusive for what's essentially an uncommon feature.
      if( !word_wrap_eol )
      {
        word_wrap_eol = CalcWordWrapPositionA( scale, s, text_end, wrap_width - line_width );
        if( word_wrap_eol == s ) // Wrap_width is too small to fit anything. Force displaying 1 character to minimize the height discontinuity.
          word_wrap_eol++;    // +1 may not be a character start point in UTF-8 but it's ok because we use s >= word_wrap_eol below
      }

      if( s >= word_wrap_eol )
      {
        if( text_size.x < line_width )
          text_size.x = line_width;
        text_size.y += line_height;
        line_width = 0.0f;
        word_wrap_eol = NULL;

        // Wrapping skips upcoming blanks
        while( s < text_end )
        {
          const char c = *s;
          if( ImCharIsBlankA( c ) )
          {
            s++;
          }
          else if( c == '\n' )
          {
            s++; break;
          }
          else
          {
            break;
          }
        }
        continue;
      }
    }

    // Decode and advance source
    const char* prev_s = s;
    unsigned int c = ( unsigned int )*s;
    if( c < 0x80 )
    {
      s += 1;
    }
    else
    {
      s += ImTextCharFromUtf8( &c, s, text_end );
      if( c == 0 ) // Malformed UTF-8?
        break;
    }

    if( c < 32 )
    {
      if( c == '\n' )
      {
        text_size.x = ImMax( text_size.x, line_width );
        text_size.y += line_height;
        line_width = 0.0f;
        continue;
      }
      if( c == '\r' )
        continue;
    }

    const float char_width = ( ( int )c < IndexAdvanceX.Size ? IndexAdvanceX.Data[ c ] : FallbackAdvanceX ) * scale;
    if( line_width + char_width >= max_width )
    {
      s = prev_s;
      break;
    }

    line_width += char_width;
  }

  if( text_size.x < line_width )
    text_size.x = line_width;

  if( line_width > 0 || text_size.y == 0.0f )
    text_size.y += line_height;

  if( remaining )
    *remaining = s;

  return text_size;
}

void ImFont::RenderChar( ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, ImWchar c ) const
{
  const ImFontGlyph* glyph = FindGlyph( c );
  if( !glyph || !glyph->Visible )
    return;
  float scale = ( size >= 0.0f ) ? ( size / FontSize ) : 1.0f;
  pos.x = IM_FLOOR( pos.x + DisplayOffset.x );
  pos.y = IM_FLOOR( pos.y + DisplayOffset.y );
  draw_list->PrimReserve( 6, 4 );
  draw_list->PrimRectUV( ImVec2( pos.x + glyph->X0 * scale, pos.y + glyph->Y0 * scale ), ImVec2( pos.x + glyph->X1 * scale, pos.y + glyph->Y1 * scale ), ImVec2( glyph->U0, glyph->V0 ), ImVec2( glyph->U1, glyph->V1 ), col );
}

void ImFont::RenderText( ImDrawList* draw_list, float size, ImVec2 pos, ImU32 col, const ImVec4& clip_rect, const char* text_begin, const char* text_end, float wrap_width, bool cpu_fine_clip ) const
{
  if( !text_end )
    text_end = text_begin + strlen( text_begin ); // ImGui:: functions generally already provides a valid text_end, so this is merely to handle direct calls.

// Align to be pixel perfect
  pos.x = IM_FLOOR( pos.x + DisplayOffset.x );
  pos.y = IM_FLOOR( pos.y + DisplayOffset.y );
  float x = pos.x;
  float y = pos.y;
  if( y > clip_rect.w )
    return;

  const float scale = size / FontSize;
  const float line_height = FontSize * scale;
  const bool word_wrap_enabled = ( wrap_width > 0.0f );
  const char* word_wrap_eol = NULL;

  // Fast-forward to first visible line
  const char* s = text_begin;
  if( y + line_height < clip_rect.y && !word_wrap_enabled )
    while( y + line_height < clip_rect.y && s < text_end )
    {
      s = ( const char* )memchr( s, '\n', text_end - s );
      s = s ? s + 1 : text_end;
      y += line_height;
    }

  // For large text, scan for the last visible line in order to avoid over-reserving in the call to PrimReserve()
  // Note that very large horizontal line will still be affected by the issue (e.g. a one megabyte string buffer without a newline will likely crash atm)
  if( text_end - s > 10000 && !word_wrap_enabled )
  {
    const char* s_end = s;
    float y_end = y;
    while( y_end < clip_rect.w && s_end < text_end )
    {
      s_end = ( const char* )memchr( s_end, '\n', text_end - s_end );
      s_end = s_end ? s_end + 1 : text_end;
      y_end += line_height;
    }
    text_end = s_end;
  }
  if( s == text_end )
    return;

  // Reserve vertices for remaining worse case (over-reserving is useful and easily amortized)
  const int vtx_count_max = ( int )( text_end - s ) * 4;
  const int idx_count_max = ( int )( text_end - s ) * 6;
  const int idx_expected_size = draw_list->IdxBuffer.Size + idx_count_max;
  draw_list->PrimReserve( idx_count_max, vtx_count_max );

  ImDrawVert* vtx_write = draw_list->_VtxWritePtr;
  ImDrawIdx* idx_write = draw_list->_IdxWritePtr;
  unsigned int vtx_current_idx = draw_list->_VtxCurrentIdx;

  while( s < text_end )
  {
    if( word_wrap_enabled )
    {
      // Calculate how far we can render. Requires two passes on the string data but keeps the code simple and not intrusive for what's essentially an uncommon feature.
      if( !word_wrap_eol )
      {
        word_wrap_eol = CalcWordWrapPositionA( scale, s, text_end, wrap_width - ( x - pos.x ) );
        if( word_wrap_eol == s ) // Wrap_width is too small to fit anything. Force displaying 1 character to minimize the height discontinuity.
          word_wrap_eol++;    // +1 may not be a character start point in UTF-8 but it's ok because we use s >= word_wrap_eol below
      }

      if( s >= word_wrap_eol )
      {
        x = pos.x;
        y += line_height;
        word_wrap_eol = NULL;

        // Wrapping skips upcoming blanks
        while( s < text_end )
        {
          const char c = *s;
          if( ImCharIsBlankA( c ) )
          {
            s++;
          }
          else if( c == '\n' )
          {
            s++; break;
          }
          else
          {
            break;
          }
        }
        continue;
      }
    }

    // Decode and advance source
    unsigned int c = ( unsigned int )*s;
    if( c < 0x80 )
    {
      s += 1;
    }
    else
    {
      s += ImTextCharFromUtf8( &c, s, text_end );
      if( c == 0 ) // Malformed UTF-8?
        break;
    }

    if( c < 32 )
    {
      if( c == '\n' )
      {
        x = pos.x;
        y += line_height;
        if( y > clip_rect.w )
          break; // break out of main loop
        continue;
      }
      if( c == '\r' )
        continue;
    }

    const ImFontGlyph* glyph = FindGlyph( ( ImWchar )c );
    if( glyph == NULL )
      continue;

    float char_width = glyph->AdvanceX * scale;
    if( glyph->Visible )
    {
      // We don't do a second finer clipping test on the Y axis as we've already skipped anything before clip_rect.y and exit once we pass clip_rect.w
      float x1 = x + glyph->X0 * scale;
      float x2 = x + glyph->X1 * scale;
      float y1 = y + glyph->Y0 * scale;
      float y2 = y + glyph->Y1 * scale;
      if( x1 <= clip_rect.z && x2 >= clip_rect.x )
      {
        // Render a character
        float u1 = glyph->U0;
        float v1 = glyph->V0;
        float u2 = glyph->U1;
        float v2 = glyph->V1;

        // CPU side clipping used to fit text in their frame when the frame is too small. Only does clipping for axis aligned quads.
        if( cpu_fine_clip )
        {
          if( x1 < clip_rect.x )
          {
            u1 = u1 + ( 1.0f - ( x2 - clip_rect.x ) / ( x2 - x1 ) ) * ( u2 - u1 );
            x1 = clip_rect.x;
          }
          if( y1 < clip_rect.y )
          {
            v1 = v1 + ( 1.0f - ( y2 - clip_rect.y ) / ( y2 - y1 ) ) * ( v2 - v1 );
            y1 = clip_rect.y;
          }
          if( x2 > clip_rect.z )
          {
            u2 = u1 + ( ( clip_rect.z - x1 ) / ( x2 - x1 ) ) * ( u2 - u1 );
            x2 = clip_rect.z;
          }
          if( y2 > clip_rect.w )
          {
            v2 = v1 + ( ( clip_rect.w - y1 ) / ( y2 - y1 ) ) * ( v2 - v1 );
            y2 = clip_rect.w;
          }
          if( y1 >= y2 )
          {
            x += char_width;
            continue;
          }
        }

        // We are NOT calling PrimRectUV() here because non-inlined causes too much overhead in a debug builds. Inlined here:
        {
          idx_write[ 0 ] = ( ImDrawIdx )( vtx_current_idx ); idx_write[ 1 ] = ( ImDrawIdx )( vtx_current_idx + 1 ); idx_write[ 2 ] = ( ImDrawIdx )( vtx_current_idx + 2 );
          idx_write[ 3 ] = ( ImDrawIdx )( vtx_current_idx ); idx_write[ 4 ] = ( ImDrawIdx )( vtx_current_idx + 2 ); idx_write[ 5 ] = ( ImDrawIdx )( vtx_current_idx + 3 );
          vtx_write[ 0 ].pos.x = x1; vtx_write[ 0 ].pos.y = y1; vtx_write[ 0 ].col = col; vtx_write[ 0 ].uv.x = u1; vtx_write[ 0 ].uv.y = v1;
          vtx_write[ 1 ].pos.x = x2; vtx_write[ 1 ].pos.y = y1; vtx_write[ 1 ].col = col; vtx_write[ 1 ].uv.x = u2; vtx_write[ 1 ].uv.y = v1;
          vtx_write[ 2 ].pos.x = x2; vtx_write[ 2 ].pos.y = y2; vtx_write[ 2 ].col = col; vtx_write[ 2 ].uv.x = u2; vtx_write[ 2 ].uv.y = v2;
          vtx_write[ 3 ].pos.x = x1; vtx_write[ 3 ].pos.y = y2; vtx_write[ 3 ].col = col; vtx_write[ 3 ].uv.x = u1; vtx_write[ 3 ].uv.y = v2;
          vtx_write += 4;
          vtx_current_idx += 4;
          idx_write += 6;
        }
      }
    }
    x += char_width;
  }

  // Give back unused vertices (clipped ones, blanks) ~ this is essentially a PrimUnreserve() action.
  draw_list->VtxBuffer.Size = ( int )( vtx_write - draw_list->VtxBuffer.Data ); // Same as calling shrink()
  draw_list->IdxBuffer.Size = ( int )( idx_write - draw_list->IdxBuffer.Data );
  draw_list->CmdBuffer[ draw_list->CmdBuffer.Size - 1 ].ElemCount -= ( idx_expected_size - draw_list->IdxBuffer.Size );
  draw_list->_VtxWritePtr = vtx_write;
  draw_list->_IdxWritePtr = idx_write;
  draw_list->_VtxCurrentIdx = vtx_current_idx;
}

//-----------------------------------------------------------------------------
// [SECTION] ImGui Internal Render Helpers
//-----------------------------------------------------------------------------
// Vaguely redesigned to stop accessing ImGui global state:
// - RenderArrow()
// - RenderBullet()
// - RenderCheckMark()
// - RenderMouseCursor()
// - RenderArrowPointingAt()
// - RenderRectFilledRangeH()
//-----------------------------------------------------------------------------
// Function in need of a redesign (legacy mess)
// - RenderColorRectWithAlphaCheckerboard()
//-----------------------------------------------------------------------------

// Render an arrow aimed to be aligned with text (p_min is a position in the same space text would be positioned). To e.g. denote expanded/collapsed state
void ImGui::RenderArrow( ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale )
{
  const float h = draw_list->_Data->FontSize * 1.00f;
  float r = h * 0.40f * scale;
  ImVec2 center = pos + ImVec2( h * 0.50f, h * 0.50f * scale );

  ImVec2 a, b, c;
  switch( dir )
  {
    case ImGuiDir_Up:
    case ImGuiDir_Down:
      if( dir == ImGuiDir_Up ) r = -r;
      a = ImVec2( +0.000f, +0.750f ) * r;
      b = ImVec2( -0.866f, -0.750f ) * r;
      c = ImVec2( +0.866f, -0.750f ) * r;
      break;
    case ImGuiDir_Left:
    case ImGuiDir_Right:
      if( dir == ImGuiDir_Left ) r = -r;
      a = ImVec2( +0.750f, +0.000f ) * r;
      b = ImVec2( -0.750f, +0.866f ) * r;
      c = ImVec2( -0.750f, -0.866f ) * r;
      break;
    case ImGuiDir_None:
    case ImGuiDir_COUNT:
      IM_ASSERT( 0 );
      break;
  }
  draw_list->AddTriangleFilled( center + a, center + b, center + c, col );
}

void ImGui::RenderBullet( ImDrawList* draw_list, ImVec2 pos, ImU32 col )
{
  draw_list->AddCircleFilled( pos, draw_list->_Data->FontSize * 0.20f, col, 8 );
}

void ImGui::RenderCheckMark( ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz )
{
  float thickness = ImMax( sz / 5.0f, 1.0f );
  sz -= thickness * 0.5f;
  pos += ImVec2( thickness * 0.25f, thickness * 0.25f );

  float third = sz / 3.0f;
  float bx = pos.x + third;
  float by = pos.y + sz - third * 0.5f;
  draw_list->PathLineTo( ImVec2( bx - third, by - third ) );
  draw_list->PathLineTo( ImVec2( bx, by ) );
  draw_list->PathLineTo( ImVec2( bx + third * 2.0f, by - third * 2.0f ) );
  draw_list->PathStroke( col, false, thickness );
}

void ImGui::RenderMouseCursor( ImDrawList* draw_list, ImVec2 pos, float scale, ImGuiMouseCursor mouse_cursor, ImU32 col_fill, ImU32 col_border, ImU32 col_shadow )
{
  if( mouse_cursor == ImGuiMouseCursor_None )
    return;
  IM_ASSERT( mouse_cursor > ImGuiMouseCursor_None && mouse_cursor < ImGuiMouseCursor_COUNT );

  ImFontAtlas* font_atlas = draw_list->_Data->Font->ContainerAtlas;
  ImVec2 offset, size, uv[ 4 ];
  if( font_atlas->GetMouseCursorTexData( mouse_cursor, &offset, &size, &uv[ 0 ], &uv[ 2 ] ) )
  {
    pos -= offset;
    const ImTextureID tex_id = font_atlas->TexID;
    draw_list->PushTextureID( tex_id );
    draw_list->AddImage( tex_id, pos + ImVec2( 1, 0 ) * scale, pos + ImVec2( 1, 0 ) * scale + size * scale, uv[ 2 ], uv[ 3 ], col_shadow );
    draw_list->AddImage( tex_id, pos + ImVec2( 2, 0 ) * scale, pos + ImVec2( 2, 0 ) * scale + size * scale, uv[ 2 ], uv[ 3 ], col_shadow );
    draw_list->AddImage( tex_id, pos, pos + size * scale, uv[ 2 ], uv[ 3 ], col_border );
    draw_list->AddImage( tex_id, pos, pos + size * scale, uv[ 0 ], uv[ 1 ], col_fill );
    draw_list->PopTextureID();
  }
}

// Render an arrow. 'pos' is position of the arrow tip. half_sz.x is length from base to tip. half_sz.y is length on each side.
void ImGui::RenderArrowPointingAt( ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir direction, ImU32 col )
{
  switch( direction )
  {
    case ImGuiDir_Left:  draw_list->AddTriangleFilled( ImVec2( pos.x + half_sz.x, pos.y - half_sz.y ), ImVec2( pos.x + half_sz.x, pos.y + half_sz.y ), pos, col ); return;
    case ImGuiDir_Right: draw_list->AddTriangleFilled( ImVec2( pos.x - half_sz.x, pos.y + half_sz.y ), ImVec2( pos.x - half_sz.x, pos.y - half_sz.y ), pos, col ); return;
    case ImGuiDir_Up:    draw_list->AddTriangleFilled( ImVec2( pos.x + half_sz.x, pos.y + half_sz.y ), ImVec2( pos.x - half_sz.x, pos.y + half_sz.y ), pos, col ); return;
    case ImGuiDir_Down:  draw_list->AddTriangleFilled( ImVec2( pos.x - half_sz.x, pos.y - half_sz.y ), ImVec2( pos.x + half_sz.x, pos.y - half_sz.y ), pos, col ); return;
    case ImGuiDir_None: case ImGuiDir_COUNT: break; // Fix warnings
  }
}

static inline float ImAcos01( float x )
{
  if( x <= 0.0f ) return IM_PI * 0.5f;
  if( x >= 1.0f ) return 0.0f;
  return ImAcos( x );
  //return (-0.69813170079773212f * x * x - 0.87266462599716477f) * x + 1.5707963267948966f; // Cheap approximation, may be enough for what we do.
}

// FIXME: Cleanup and move code to ImDrawList.
void ImGui::RenderRectFilledRangeH( ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x_start_norm, float x_end_norm, float rounding )
{
  if( x_end_norm == x_start_norm )
    return;
  if( x_start_norm > x_end_norm )
    ImSwap( x_start_norm, x_end_norm );

  ImVec2 p0 = ImVec2( ImLerp( rect.Min.x, rect.Max.x, x_start_norm ), rect.Min.y );
  ImVec2 p1 = ImVec2( ImLerp( rect.Min.x, rect.Max.x, x_end_norm ), rect.Max.y );
  if( rounding == 0.0f )
  {
    draw_list->AddRectFilled( p0, p1, col, 0.0f );
    return;
  }

  rounding = ImClamp( ImMin( ( rect.Max.x - rect.Min.x ) * 0.5f, ( rect.Max.y - rect.Min.y ) * 0.5f ) - 1.0f, 0.0f, rounding );
  const float inv_rounding = 1.0f / rounding;
  const float arc0_b = ImAcos01( 1.0f - ( p0.x - rect.Min.x ) * inv_rounding );
  const float arc0_e = ImAcos01( 1.0f - ( p1.x - rect.Min.x ) * inv_rounding );
  const float half_pi = IM_PI * 0.5f; // We will == compare to this because we know this is the exact value ImAcos01 can return.
  const float x0 = ImMax( p0.x, rect.Min.x + rounding );
  if( arc0_b == arc0_e )
  {
    draw_list->PathLineTo( ImVec2( x0, p1.y ) );
    draw_list->PathLineTo( ImVec2( x0, p0.y ) );
  }
  else if( arc0_b == 0.0f && arc0_e == half_pi )
  {
    draw_list->PathArcToFast( ImVec2( x0, p1.y - rounding ), rounding, 3, 6 ); // BL
    draw_list->PathArcToFast( ImVec2( x0, p0.y + rounding ), rounding, 6, 9 ); // TR
  }
  else
  {
    draw_list->PathArcTo( ImVec2( x0, p1.y - rounding ), rounding, IM_PI - arc0_e, IM_PI - arc0_b, 3 ); // BL
    draw_list->PathArcTo( ImVec2( x0, p0.y + rounding ), rounding, IM_PI + arc0_b, IM_PI + arc0_e, 3 ); // TR
  }
  if( p1.x > rect.Min.x + rounding )
  {
    const float arc1_b = ImAcos01( 1.0f - ( rect.Max.x - p1.x ) * inv_rounding );
    const float arc1_e = ImAcos01( 1.0f - ( rect.Max.x - p0.x ) * inv_rounding );
    const float x1 = ImMin( p1.x, rect.Max.x - rounding );
    if( arc1_b == arc1_e )
    {
      draw_list->PathLineTo( ImVec2( x1, p0.y ) );
      draw_list->PathLineTo( ImVec2( x1, p1.y ) );
    }
    else if( arc1_b == 0.0f && arc1_e == half_pi )
    {
      draw_list->PathArcToFast( ImVec2( x1, p0.y + rounding ), rounding, 9, 12 ); // TR
      draw_list->PathArcToFast( ImVec2( x1, p1.y - rounding ), rounding, 0, 3 );  // BR
    }
    else
    {
      draw_list->PathArcTo( ImVec2( x1, p0.y + rounding ), rounding, -arc1_e, -arc1_b, 3 ); // TR
      draw_list->PathArcTo( ImVec2( x1, p1.y - rounding ), rounding, +arc1_b, +arc1_e, 3 ); // BR
    }
  }
  draw_list->PathFillConvex( col );
}

// Helper for ColorPicker4()
// NB: This is rather brittle and will show artifact when rounding this enabled if rounded corners overlap multiple cells. Caller currently responsible for avoiding that.
// Spent a non reasonable amount of time trying to getting this right for ColorButton with rounding+anti-aliasing+ImGuiColorEditFlags_HalfAlphaPreview flag + various grid sizes and offsets, and eventually gave up... probably more reasonable to disable rounding altogether.
// FIXME: uses ImGui::GetColorU32
void ImGui::RenderColorRectWithAlphaCheckerboard( ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_max, ImU32 col, float grid_step, ImVec2 grid_off, float rounding, int rounding_corners_flags )
{
  if( ( ( col & IM_COL32_A_MASK ) >> IM_COL32_A_SHIFT ) < 0xFF )
  {
    ImU32 col_bg1 = ImGui::GetColorU32( ImAlphaBlendColors( IM_COL32( 204, 204, 204, 255 ), col ) );
    ImU32 col_bg2 = ImGui::GetColorU32( ImAlphaBlendColors( IM_COL32( 128, 128, 128, 255 ), col ) );
    draw_list->AddRectFilled( p_min, p_max, col_bg1, rounding, rounding_corners_flags );

    int yi = 0;
    for( float y = p_min.y + grid_off.y; y < p_max.y; y += grid_step, yi++ )
    {
      float y1 = ImClamp( y, p_min.y, p_max.y ), y2 = ImMin( y + grid_step, p_max.y );
      if( y2 <= y1 )
        continue;
      for( float x = p_min.x + grid_off.x + ( yi & 1 ) * grid_step; x < p_max.x; x += grid_step * 2.0f )
      {
        float x1 = ImClamp( x, p_min.x, p_max.x ), x2 = ImMin( x + grid_step, p_max.x );
        if( x2 <= x1 )
          continue;
        int rounding_corners_flags_cell = 0;
        if( y1 <= p_min.y )
        {
          if( x1 <= p_min.x ) rounding_corners_flags_cell |= ImDrawCornerFlags_TopLeft; if( x2 >= p_max.x ) rounding_corners_flags_cell |= ImDrawCornerFlags_TopRight;
        }
        if( y2 >= p_max.y )
        {
          if( x1 <= p_min.x ) rounding_corners_flags_cell |= ImDrawCornerFlags_BotLeft; if( x2 >= p_max.x ) rounding_corners_flags_cell |= ImDrawCornerFlags_BotRight;
        }
        rounding_corners_flags_cell &= rounding_corners_flags;
        draw_list->AddRectFilled( ImVec2( x1, y1 ), ImVec2( x2, y2 ), col_bg2, rounding_corners_flags_cell ? rounding : 0.0f, rounding_corners_flags_cell );
      }
    }
  }
  else
  {
    draw_list->AddRectFilled( p_min, p_max, col, rounding, rounding_corners_flags );
  }
}

//-----------------------------------------------------------------------------
// [SECTION] Decompression code
//-----------------------------------------------------------------------------
// Compressed with stb_compress() then converted to a C array and encoded as base85.
// Use the program in misc/fonts/binary_to_compressed_c.cpp to create the array from a TTF file.
// The purpose of encoding as base85 instead of "0x00,0x01,..." style is only save on _source code_ size.
// Decompression from stb.h (public domain) by Sean Barrett https://github.com/nothings/stb/blob/master/stb.h
//-----------------------------------------------------------------------------

static unsigned int stb_decompress_length( const unsigned char* input )
{
  return ( input[ 8 ] << 24 ) + ( input[ 9 ] << 16 ) + ( input[ 10 ] << 8 ) + input[ 11 ];
}

static unsigned char* stb__barrier_out_e, * stb__barrier_out_b;
static const unsigned char* stb__barrier_in_b;
static unsigned char* stb__dout;
static void stb__match( const unsigned char* data, unsigned int length )
{
  // INVERSE of memmove... write each byte before copying the next...
  IM_ASSERT( stb__dout + length <= stb__barrier_out_e );
  if( stb__dout + length > stb__barrier_out_e )
  {
    stb__dout += length; return;
  }
  if( data < stb__barrier_out_b )
  {
    stb__dout = stb__barrier_out_e + 1; return;
  }
  while( length-- ) *stb__dout++ = *data++;
}

static void stb__lit( const unsigned char* data, unsigned int length )
{
  IM_ASSERT( stb__dout + length <= stb__barrier_out_e );
  if( stb__dout + length > stb__barrier_out_e )
  {
    stb__dout += length; return;
  }
  if( data < stb__barrier_in_b )
  {
    stb__dout = stb__barrier_out_e + 1; return;
  }
  memcpy( stb__dout, data, length );
  stb__dout += length;
}

#define stb__in2(x)   ((i[x] << 8) + i[(x)+1])
#define stb__in3(x)   ((i[x] << 16) + stb__in2((x)+1))
#define stb__in4(x)   ((i[x] << 24) + stb__in3((x)+1))

static const unsigned char* stb_decompress_token( const unsigned char* i )
{
  if( *i >= 0x20 )
  { // use fewer if's for cases that expand small
    if( *i >= 0x80 )       stb__match( stb__dout - i[ 1 ] - 1, i[ 0 ] - 0x80 + 1 ), i += 2;
    else if( *i >= 0x40 )  stb__match( stb__dout - ( stb__in2( 0 ) - 0x4000 + 1 ), i[ 2 ] + 1 ), i += 3;
    else /* *i >= 0x20 */ stb__lit( i + 1, i[ 0 ] - 0x20 + 1 ), i += 1 + ( i[ 0 ] - 0x20 + 1 );
  }
  else
  { // more ifs for cases that expand large, since overhead is amortized
    if( *i >= 0x18 )       stb__match( stb__dout - ( stb__in3( 0 ) - 0x180000 + 1 ), i[ 3 ] + 1 ), i += 4;
    else if( *i >= 0x10 )  stb__match( stb__dout - ( stb__in3( 0 ) - 0x100000 + 1 ), stb__in2( 3 ) + 1 ), i += 5;
    else if( *i >= 0x08 )  stb__lit( i + 2, stb__in2( 0 ) - 0x0800 + 1 ), i += 2 + ( stb__in2( 0 ) - 0x0800 + 1 );
    else if( *i == 0x07 )  stb__lit( i + 3, stb__in2( 1 ) + 1 ), i += 3 + ( stb__in2( 1 ) + 1 );
    else if( *i == 0x06 )  stb__match( stb__dout - ( stb__in3( 1 ) + 1 ), i[ 4 ] + 1 ), i += 5;
    else if( *i == 0x04 )  stb__match( stb__dout - ( stb__in3( 1 ) + 1 ), stb__in2( 4 ) + 1 ), i += 6;
  }
  return i;
}

static unsigned int stb_adler32( unsigned int adler32, unsigned char* buffer, unsigned int buflen )
{
  const unsigned long ADLER_MOD = 65521;
  unsigned long s1 = adler32 & 0xffff, s2 = adler32 >> 16;
  unsigned long blocklen = buflen % 5552;

  unsigned long i;
  while( buflen )
  {
    for( i = 0; i + 7 < blocklen; i += 8 )
    {
      s1 += buffer[ 0 ], s2 += s1;
      s1 += buffer[ 1 ], s2 += s1;
      s1 += buffer[ 2 ], s2 += s1;
      s1 += buffer[ 3 ], s2 += s1;
      s1 += buffer[ 4 ], s2 += s1;
      s1 += buffer[ 5 ], s2 += s1;
      s1 += buffer[ 6 ], s2 += s1;
      s1 += buffer[ 7 ], s2 += s1;

      buffer += 8;
    }

    for( ; i < blocklen; ++i )
      s1 += *buffer++, s2 += s1;

    s1 %= ADLER_MOD, s2 %= ADLER_MOD;
    buflen -= blocklen;
    blocklen = 5552;
  }
  return ( unsigned int )( s2 << 16 ) + ( unsigned int )s1;
}

static unsigned int stb_decompress( unsigned char* output, const unsigned char* i, unsigned int /*length*/ )
{
  if( stb__in4( 0 ) != 0x57bC0000 ) return 0;
  if( stb__in4( 4 ) != 0 )          return 0; // error! stream is > 4GB
  const unsigned int olen = stb_decompress_length( i );
  stb__barrier_in_b = i;
  stb__barrier_out_e = output + olen;
  stb__barrier_out_b = output;
  i += 16;

  stb__dout = output;
  for( ;;)
  {
    const unsigned char* old_i = i;
    i = stb_decompress_token( i );
    if( i == old_i )
    {
      if( *i == 0x05 && i[ 1 ] == 0xfa )
      {
        IM_ASSERT( stb__dout == output + olen );
        if( stb__dout != output + olen ) return 0;
        if( stb_adler32( 1, output, olen ) != ( unsigned int )stb__in4( 2 ) )
          return 0;
        return olen;
      }
      else
      {
        IM_ASSERT( 0 ); /* NOTREACHED */
        return 0;
      }
    }
    IM_ASSERT( stb__dout <= output + olen );
    if( stb__dout > output + olen )
      return 0;
  }
}

//-----------------------------------------------------------------------------
// [SECTION] Default font data (ProggyClean.ttf)
//-----------------------------------------------------------------------------
// ProggyClean.ttf
// Copyright (c) 2004, 2005 Tristan Grimmer
// MIT license (see License.txt in http://www.upperbounds.net/download/ProggyClean.ttf.zip)
// Download and more information at http://upperbounds.net
//-----------------------------------------------------------------------------
// File: 'ProggyClean.ttf' (41208 bytes)
// Exported using misc/fonts/binary_to_compressed_c.cpp (with compression + base85 string encoding).
// The purpose of encoding as base85 instead of "0x00,0x01,..." style is only save on _source code_ size.
//-----------------------------------------------------------------------------
static const char proggy_clean_ttf_compressed_data_base85[ 11980 + 1 ] =
"7])#######hV0qs'/###[),##/l:$#Q6>##5[n42>c-TH`->>#/e>11NNV=Bv(*:.F?uu#(gRU.o0XGH`$vhLG1hxt9?W`#,5LsCp#-i>.r$<$6pD>Lb';9Crc6tgXmKVeU2cD4Eo3R/"
"2*>]b(MC;$jPfY.;h^`IWM9<Lh2TlS+f-s$o6Q<BWH`YiU.xfLq$N;$0iR/GX:U(jcW2p/W*q?-qmnUCI;jHSAiFWM.R*kU@C=GH?a9wp8f$e.-4^Qg1)Q-GL(lf(r/7GrRgwV%MS=C#"
"`8ND>Qo#t'X#(v#Y9w0#1D$CIf;W'#pWUPXOuxXuU(H9M(1<q-UE31#^-V'8IRUo7Qf./L>=Ke$$'5F%)]0^#0X@U.a<r:QLtFsLcL6##lOj)#.Y5<-R&KgLwqJfLgN&;Q?gI^#DY2uL"
"i@^rMl9t=cWq6##weg>$FBjVQTSDgEKnIS7EM9>ZY9w0#L;>>#Mx&4Mvt//L[MkA#W@lK.N'[0#7RL_&#w+F%HtG9M#XL`N&.,GM4Pg;-<nLENhvx>-VsM.M0rJfLH2eTM`*oJMHRC`N"
"kfimM2J,W-jXS:)r0wK#@Fge$U>`w'N7G#$#fB#$E^$#:9:hk+eOe--6x)F7*E%?76%^GMHePW-Z5l'&GiF#$956:rS?dA#fiK:)Yr+`&#0j@'DbG&#^$PG.Ll+DNa<XCMKEV*N)LN/N"
"*b=%Q6pia-Xg8I$<MR&,VdJe$<(7G;Ckl'&hF;;$<_=X(b.RS%%)###MPBuuE1V:v&cX&#2m#(&cV]`k9OhLMbn%s$G2,B$BfD3X*sp5#l,$R#]x_X1xKX%b5U*[r5iMfUo9U`N99hG)"
"tm+/Us9pG)XPu`<0s-)WTt(gCRxIg(%6sfh=ktMKn3j)<6<b5Sk_/0(^]AaN#(p/L>&VZ>1i%h1S9u5o@YaaW$e+b<TWFn/Z:Oh(Cx2$lNEoN^e)#CFY@@I;BOQ*sRwZtZxRcU7uW6CX"
"ow0i(?$Q[cjOd[P4d)]>ROPOpxTO7Stwi1::iB1q)C_=dV26J;2,]7op$]uQr@_V7$q^%lQwtuHY]=DX,n3L#0PHDO4f9>dC@O>HBuKPpP*E,N+b3L#lpR/MrTEH.IAQk.a>D[.e;mc."
"x]Ip.PH^'/aqUO/$1WxLoW0[iLA<QT;5HKD+@qQ'NQ(3_PLhE48R.qAPSwQ0/WK?Z,[x?-J;jQTWA0X@KJ(_Y8N-:/M74:/-ZpKrUss?d#dZq]DAbkU*JqkL+nwX@@47`5>w=4h(9.`G"
"CRUxHPeR`5Mjol(dUWxZa(>STrPkrJiWx`5U7F#.g*jrohGg`cg:lSTvEY/EV_7H4Q9[Z%cnv;JQYZ5q.l7Zeas:HOIZOB?G<Nald$qs]@]L<J7bR*>gv:[7MI2k).'2($5FNP&EQ(,)"
"U]W]+fh18.vsai00);D3@4ku5P?DP8aJt+;qUM]=+b'8@;mViBKx0DE[-auGl8:PJ&Dj+M6OC]O^((##]`0i)drT;-7X`=-H3[igUnPG-NZlo.#k@h#=Ork$m>a>$-?Tm$UV(?#P6YY#"
"'/###xe7q.73rI3*pP/$1>s9)W,JrM7SN]'/4C#v$U`0#V.[0>xQsH$fEmPMgY2u7Kh(G%siIfLSoS+MK2eTM$=5,M8p`A.;_R%#u[K#$x4AG8.kK/HSB==-'Ie/QTtG?-.*^N-4B/ZM"
"_3YlQC7(p7q)&](`6_c)$/*JL(L-^(]$wIM`dPtOdGA,U3:w2M-0<q-]L_?^)1vw'.,MRsqVr.L;aN&#/EgJ)PBc[-f>+WomX2u7lqM2iEumMTcsF?-aT=Z-97UEnXglEn1K-bnEO`gu"
"Ft(c%=;Am_Qs@jLooI&NX;]0#j4#F14;gl8-GQpgwhrq8'=l_f-b49'UOqkLu7-##oDY2L(te+Mch&gLYtJ,MEtJfLh'x'M=$CS-ZZ%P]8bZ>#S?YY#%Q&q'3^Fw&?D)UDNrocM3A76/"
"/oL?#h7gl85[qW/NDOk%16ij;+:1a'iNIdb-ou8.P*w,v5#EI$TWS>Pot-R*H'-SEpA:g)f+O$%%`kA#G=8RMmG1&O`>to8bC]T&$,n.LoO>29sp3dt-52U%VM#q7'DHpg+#Z9%H[K<L"
"%a2E-grWVM3@2=-k22tL]4$##6We'8UJCKE[d_=%wI;'6X-GsLX4j^SgJ$##R*w,vP3wK#iiW&#*h^D&R?jp7+/u&#(AP##XU8c$fSYW-J95_-Dp[g9wcO&#M-h1OcJlc-*vpw0xUX&#"
"OQFKNX@QI'IoPp7nb,QU//MQ&ZDkKP)X<WSVL(68uVl&#c'[0#(s1X&xm$Y%B7*K:eDA323j998GXbA#pwMs-jgD$9QISB-A_(aN4xoFM^@C58D0+Q+q3n0#3U1InDjF682-SjMXJK)("
"h$hxua_K]ul92%'BOU&#BRRh-slg8KDlr:%L71Ka:.A;%YULjDPmL<LYs8i#XwJOYaKPKc1h:'9Ke,g)b),78=I39B;xiY$bgGw-&.Zi9InXDuYa%G*f2Bq7mn9^#p1vv%#(Wi-;/Z5h"
"o;#2:;%d&#x9v68C5g?ntX0X)pT`;%pB3q7mgGN)3%(P8nTd5L7GeA-GL@+%J3u2:(Yf>et`e;)f#Km8&+DC$I46>#Kr]]u-[=99tts1.qb#q72g1WJO81q+eN'03'eM>&1XxY-caEnO"
"j%2n8)),?ILR5^.Ibn<-X-Mq7[a82Lq:F&#ce+S9wsCK*x`569E8ew'He]h:sI[2LM$[guka3ZRd6:t%IG:;$%YiJ:Nq=?eAw;/:nnDq0(CYcMpG)qLN4$##&J<j$UpK<Q4a1]MupW^-"
"sj_$%[HK%'F####QRZJ::Y3EGl4'@%FkiAOg#p[##O`gukTfBHagL<LHw%q&OV0##F=6/:chIm0@eCP8X]:kFI%hl8hgO@RcBhS-@Qb$%+m=hPDLg*%K8ln(wcf3/'DW-$.lR?n[nCH-"
"eXOONTJlh:.RYF%3'p6sq:UIMA945&^HFS87@$EP2iG<-lCO$%c`uKGD3rC$x0BL8aFn--`ke%#HMP'vh1/R&O_J9'um,.<tx[@%wsJk&bUT2`0uMv7gg#qp/ij.L56'hl;.s5CUrxjO"
"M7-##.l+Au'A&O:-T72L]P`&=;ctp'XScX*rU.>-XTt,%OVU4)S1+R-#dg0/Nn?Ku1^0f$B*P:Rowwm-`0PKjYDDM'3]d39VZHEl4,.j']Pk-M.h^&:0FACm$maq-&sgw0t7/6(^xtk%"
"LuH88Fj-ekm>GA#_>568x6(OFRl-IZp`&b,_P'$M<Jnq79VsJW/mWS*PUiq76;]/NM_>hLbxfc$mj`,O;&%W2m`Zh:/)Uetw:aJ%]K9h:TcF]u_-Sj9,VK3M.*'&0D[Ca]J9gp8,kAW]"
"%(?A%R$f<->Zts'^kn=-^@c4%-pY6qI%J%1IGxfLU9CP8cbPlXv);C=b),<2mOvP8up,UVf3839acAWAW-W?#ao/^#%KYo8fRULNd2.>%m]UK:n%r$'sw]J;5pAoO_#2mO3n,'=H5(et"
"Hg*`+RLgv>=4U8guD$I%D:W>-r5V*%j*W:Kvej.Lp$<M-SGZ':+Q_k+uvOSLiEo(<aD/K<CCc`'Lx>'?;++O'>()jLR-^u68PHm8ZFWe+ej8h:9r6L*0//c&iH&R8pRbA#Kjm%upV1g:"
"a_#Ur7FuA#(tRh#.Y5K+@?3<-8m0$PEn;J:rh6?I6uG<-`wMU'ircp0LaE_OtlMb&1#6T.#FDKu#1Lw%u%+GM+X'e?YLfjM[VO0MbuFp7;>Q&#WIo)0@F%q7c#4XAXN-U&VB<HFF*qL("
"$/V,;(kXZejWO`<[5?\?ewY(*9=%wDc;,u<'9t3W-(H1th3+G]ucQ]kLs7df($/*JL]@*t7Bu_G3_7mp7<iaQjO@.kLg;x3B0lqp7Hf,^Ze7-##@/c58Mo(3;knp0%)A7?-W+eI'o8)b<"
"nKnw'Ho8C=Y>pqB>0ie&jhZ[?iLR@@_AvA-iQC(=ksRZRVp7`.=+NpBC%rh&3]R:8XDmE5^V8O(x<<aG/1N$#FX$0V5Y6x'aErI3I$7x%E`v<-BY,)%-?Psf*l?%C3.mM(=/M0:JxG'?"
"7WhH%o'a<-80g0NBxoO(GH<dM]n.+%q@jH?f.UsJ2Ggs&4<-e47&Kl+f//9@`b+?.TeN_&B8Ss?v;^Trk;f#YvJkl&w$]>-+k?'(<S:68tq*WoDfZu';mM?8X[ma8W%*`-=;D.(nc7/;"
")g:T1=^J$&BRV(-lTmNB6xqB[@0*o.erM*<SWF]u2=st-*(6v>^](H.aREZSi,#1:[IXaZFOm<-ui#qUq2$##Ri;u75OK#(RtaW-K-F`S+cF]uN`-KMQ%rP/Xri.LRcB##=YL3BgM/3M"
"D?@f&1'BW-)Ju<L25gl8uhVm1hL$##*8###'A3/LkKW+(^rWX?5W_8g)a(m&K8P>#bmmWCMkk&#TR`C,5d>g)F;t,4:@_l8G/5h4vUd%&%950:VXD'QdWoY-F$BtUwmfe$YqL'8(PWX("
"P?^@Po3$##`MSs?DWBZ/S>+4%>fX,VWv/w'KD`LP5IbH;rTV>n3cEK8U#bX]l-/V+^lj3;vlMb&[5YQ8#pekX9JP3XUC72L,,?+Ni&co7ApnO*5NK,((W-i:$,kp'UDAO(G0Sq7MVjJs"
"bIu)'Z,*[>br5fX^:FPAWr-m2KgL<LUN098kTF&#lvo58=/vjDo;.;)Ka*hLR#/k=rKbxuV`>Q_nN6'8uTG&#1T5g)uLv:873UpTLgH+#FgpH'_o1780Ph8KmxQJ8#H72L4@768@Tm&Q"
"h4CB/5OvmA&,Q&QbUoi$a_%3M01H)4x7I^&KQVgtFnV+;[Pc>[m4k//,]1?#`VY[Jr*3&&slRfLiVZJ:]?=K3Sw=[$=uRB?3xk48@aeg<Z'<$#4H)6,>e0jT6'N#(q%.O=?2S]u*(m<-"
"V8J'(1)G][68hW$5'q[GC&5j`TE?m'esFGNRM)j,ffZ?-qx8;->g4t*:CIP/[Qap7/9'#(1sao7w-.qNUdkJ)tCF&#B^;xGvn2r9FEPFFFcL@.iFNkTve$m%#QvQS8U@)2Z+3K:AKM5i"
"sZ88+dKQ)W6>J%CL<KE>`.d*(B`-n8D9oK<Up]c$X$(,)M8Zt7/[rdkqTgl-0cuGMv'?>-XV1q['-5k'cAZ69e;D_?$ZPP&s^+7])$*$#@QYi9,5P&#9r+$%CE=68>K8r0=dSC%%(@p7"
".m7jilQ02'0-VWAg<a/''3u.=4L$Y)6k/K:_[3=&jvL<L0C/2'v:^;-DIBW,B4E68:kZ;%?8(Q8BH=kO65BW?xSG&#@uU,DS*,?.+(o(#1vCS8#CHF>TlGW'b)Tq7VT9q^*^$$.:&N@@"
"$&)WHtPm*5_rO0&e%K&#-30j(E4#'Zb.o/(Tpm$>K'f@[PvFl,hfINTNU6u'0pao7%XUp9]5.>%h`8_=VYbxuel.NTSsJfLacFu3B'lQSu/m6-Oqem8T+oE--$0a/k]uj9EwsG>%veR*"
"hv^BFpQj:K'#SJ,sB-'#](j.Lg92rTw-*n%@/;39rrJF,l#qV%OrtBeC6/,;qB3ebNW[?,Hqj2L.1NP&GjUR=1D8QaS3Up&@*9wP?+lo7b?@%'k4`p0Z$22%K3+iCZj?XJN4Nm&+YF]u"
"@-W$U%VEQ/,,>>#)D<h#`)h0:<Q6909ua+&VU%n2:cG3FJ-%@Bj-DgLr`Hw&HAKjKjseK</xKT*)B,N9X3]krc12t'pgTV(Lv-tL[xg_%=M_q7a^x?7Ubd>#%8cY#YZ?=,`Wdxu/ae&#"
"w6)R89tI#6@s'(6Bf7a&?S=^ZI_kS&ai`&=tE72L_D,;^R)7[$s<Eh#c&)q.MXI%#v9ROa5FZO%sF7q7Nwb&#ptUJ:aqJe$Sl68%.D###EC><?-aF&#RNQv>o8lKN%5/$(vdfq7+ebA#"
"u1p]ovUKW&Y%q]'>$1@-[xfn$7ZTp7mM,G,Ko7a&Gu%G[RMxJs[0MM%wci.LFDK)(<c`Q8N)jEIF*+?P2a8g%)$q]o2aH8C&<SibC/q,(e:v;-b#6[$NtDZ84Je2KNvB#$P5?tQ3nt(0"
"d=j.LQf./Ll33+(;q3L-w=8dX$#WF&uIJ@-bfI>%:_i2B5CsR8&9Z&#=mPEnm0f`<&c)QL5uJ#%u%lJj+D-r;BoF&#4DoS97h5g)E#o:&S4weDF,9^Hoe`h*L+_a*NrLW-1pG_&2UdB8"
"6e%B/:=>)N4xeW.*wft-;$'58-ESqr<b?UI(_%@[P46>#U`'6AQ]m&6/`Z>#S?YY#Vc;r7U2&326d=w&H####?TZ`*4?&.MK?LP8Vxg>$[QXc%QJv92.(Db*B)gb*BM9dM*hJMAo*c&#"
"b0v=Pjer]$gG&JXDf->'StvU7505l9$AFvgYRI^&<^b68?j#q9QX4SM'RO#&sL1IM.rJfLUAj221]d##DW=m83u5;'bYx,*Sl0hL(W;;$doB&O/TQ:(Z^xBdLjL<Lni;''X.`$#8+1GD"
":k$YUWsbn8ogh6rxZ2Z9]%nd+>V#*8U_72Lh+2Q8Cj0i:6hp&$C/:p(HK>T8Y[gHQ4`4)'$Ab(Nof%V'8hL&#<NEdtg(n'=S1A(Q1/I&4([%dM`,Iu'1:_hL>SfD07&6D<fp8dHM7/g+"
"tlPN9J*rKaPct&?'uBCem^jn%9_K)<,C5K3s=5g&GmJb*[SYq7K;TRLGCsM-$$;S%:Y@r7AK0pprpL<Lrh,q7e/%KWK:50I^+m'vi`3?%Zp+<-d+$L-Sv:@.o19n$s0&39;kn;S%BSq*"
"$3WoJSCLweV[aZ'MQIjO<7;X-X;&+dMLvu#^UsGEC9WEc[X(wI7#2.(F0jV*eZf<-Qv3J-c+J5AlrB#$p(H68LvEA'q3n0#m,[`*8Ft)FcYgEud]CWfm68,(aLA$@EFTgLXoBq/UPlp7"
":d[/;r_ix=:TF`S5H-b<LI&HY(K=h#)]Lk$K14lVfm:x$H<3^Ql<M`$OhapBnkup'D#L$Pb_`N*g]2e;X/Dtg,bsj&K#2[-:iYr'_wgH)NUIR8a1n#S?Yej'h8^58UbZd+^FKD*T@;6A"
"7aQC[K8d-(v6GI$x:T<&'Gp5Uf>@M.*J:;$-rv29'M]8qMv-tLp,'886iaC=Hb*YJoKJ,(j%K=H`K.v9HggqBIiZu'QvBT.#=)0ukruV&.)3=(^1`o*Pj4<-<aN((^7('#Z0wK#5GX@7"
"u][`*S^43933A4rl][`*O4CgLEl]v$1Q3AeF37dbXk,.)vj#x'd`;qgbQR%FW,2(?LO=s%Sc68%NP'##Aotl8x=BE#j1UD([3$M(]UI2LX3RpKN@;/#f'f/&_mt&F)XdF<9t4)Qa.*kT"
"LwQ'(TTB9.xH'>#MJ+gLq9-##@HuZPN0]u:h7.T..G:;$/Usj(T7`Q8tT72LnYl<-qx8;-HV7Q-&Xdx%1a,hC=0u+HlsV>nuIQL-5<N?)NBS)QN*_I,?&)2'IM%L3I)X((e/dl2&8'<M"
":^#M*Q+[T.Xri.LYS3v%fF`68h;b-X[/En'CR.q7E)p'/kle2HM,u;^%OKC-N+Ll%F9CF<Nf'^#t2L,;27W:0O@6##U6W7:$rJfLWHj$#)woqBefIZ.PK<b*t7ed;p*_m;4ExK#h@&]>"
"_>@kXQtMacfD.m-VAb8;IReM3$wf0''hra*so568'Ip&vRs849'MRYSp%:t:h5qSgwpEr$B>Q,;s(C#$)`svQuF$##-D,##,g68@2[T;.XSdN9Qe)rpt._K-#5wF)sP'##p#C0c%-Gb%"
"hd+<-j'Ai*x&&HMkT]C'OSl##5RG[JXaHN;d'uA#x._U;.`PU@(Z3dt4r152@:v,'R.Sj'w#0<-;kPI)FfJ&#AYJ&#//)>-k=m=*XnK$>=)72L]0I%>.G690a:$##<,);?;72#?x9+d;"
"^V'9;jY@;)br#q^YQpx:X#Te$Z^'=-=bGhLf:D6&bNwZ9-ZD#n^9HhLMr5G;']d&6'wYmTFmL<LD)F^%[tC'8;+9E#C$g%#5Y>q9wI>P(9mI[>kC-ekLC/R&CH+s'B;K-M6$EB%is00:"
"+A4[7xks.LrNk0&E)wILYF@2L'0Nb$+pv<(2.768/FrY&h$^3i&@+G%JT'<-,v`3;_)I9M^AE]CN?Cl2AZg+%4iTpT3<n-&%H%b<FDj2M<hH=&Eh<2Len$b*aTX=-8QxN)k11IM1c^j%"
"9s<L<NFSo)B?+<-(GxsF,^-Eh@$4dXhN$+#rxK8'je'D7k`e;)2pYwPA'_p9&@^18ml1^[@g4t*[JOa*[=Qp7(qJ_oOL^('7fB&Hq-:sf,sNj8xq^>$U4O]GKx'm9)b@p7YsvK3w^YR-"
"CdQ*:Ir<($u&)#(&?L9Rg3H)4fiEp^iI9O8KnTj,]H?D*r7'M;PwZ9K0E^k&-cpI;.p/6_vwoFMV<->#%Xi.LxVnrU(4&8/P+:hLSKj$#U%]49t'I:rgMi'FL@a:0Y-uA[39',(vbma*"
"hU%<-SRF`Tt:542R_VV$p@[p8DV[A,?1839FWdF<TddF<9Ah-6&9tWoDlh]&1SpGMq>Ti1O*H&#(AL8[_P%.M>v^-))qOT*F5Cq0`Ye%+$B6i:7@0IX<N+T+0MlMBPQ*Vj>SsD<U4JHY"
"8kD2)2fU/M#$e.)T4,_=8hLim[&);?UkK'-x?'(:siIfL<$pFM`i<?%W(mGDHM%>iWP,##P`%/L<eXi:@Z9C.7o=@(pXdAO/NLQ8lPl+HPOQa8wD8=^GlPa8TKI1CjhsCTSLJM'/Wl>-"
"S(qw%sf/@%#B6;/U7K]uZbi^Oc^2n<bhPmUkMw>%t<)'mEVE''n`WnJra$^TKvX5B>;_aSEK',(hwa0:i4G?.Bci.(X[?b*($,=-n<.Q%`(X=?+@Am*Js0&=3bh8K]mL<LoNs'6,'85`"
"0?t/'_U59@]ddF<#LdF<eWdF<OuN/45rY<-L@&#+fm>69=Lb,OcZV/);TTm8VI;?%OtJ<(b4mq7M6:u?KRdF<gR@2L=FNU-<b[(9c/ML3m;Z[$oF3g)GAWqpARc=<ROu7cL5l;-[A]%/"
"+fsd;l#SafT/f*W]0=O'$(Tb<[)*@e775R-:Yob%g*>l*:xP?Yb.5)%w_I?7uk5JC+FS(m#i'k.'a0i)9<7b'fs'59hq$*5Uhv##pi^8+hIEBF`nvo`;'l0.^S1<-wUK2/Coh58KKhLj"
"M=SO*rfO`+qC`W-On.=AJ56>>i2@2LH6A:&5q`?9I3@@'04&p2/LVa*T-4<-i3;M9UvZd+N7>b*eIwg:CC)c<>nO&#<IGe;__.thjZl<%w(Wk2xmp4Q@I#I9,DF]u7-P=.-_:YJ]aS@V"
"?6*C()dOp7:WL,b&3Rg/.cmM9&r^>$(>.Z-I&J(Q0Hd5Q%7Co-b`-c<N(6r@ip+AurK<m86QIth*#v;-OBqi+L7wDE-Ir8K['m+DDSLwK&/.?-V%U_%3:qKNu$_b*B-kp7NaD'QdWQPK"
"Yq[@>P)hI;*_F]u`Rb[.j8_Q/<&>uu+VsH$sM9TA%?)(vmJ80),P7E>)tjD%2L=-t#fK[%`v=Q8<FfNkgg^oIbah*#8/Qt$F&:K*-(N/'+1vMB,u()-a.VUU*#[e%gAAO(S>WlA2);Sa"
">gXm8YB`1d@K#n]76-a$U,mF<fX]idqd)<3,]J7JmW4`6]uks=4-72L(jEk+:bJ0M^q-8Dm_Z?0olP1C9Sa&H[d&c$ooQUj]Exd*3ZM@-WGW2%s',B-_M%>%Ul:#/'xoFM9QX-$.QN'>"
"[%$Z$uF6pA6Ki2O5:8w*vP1<-1`[G,)-m#>0`P&#eb#.3i)rtB61(o'$?X3B</R90;eZ]%Ncq;-Tl]#F>2Qft^ae_5tKL9MUe9b*sLEQ95C&`=G?@Mj=wh*'3E>=-<)Gt*Iw)'QG:`@I"
"wOf7&]1i'S01B+Ev/Nac#9S;=;YQpg_6U`*kVY39xK,[/6Aj7:'1Bm-_1EYfa1+o&o4hp7KN_Q(OlIo@S%;jVdn0'1<Vc52=u`3^o-n1'g4v58Hj&6_t7$##?M)c<$bgQ_'SY((-xkA#"
"Y(,p'H9rIVY-b,'%bCPF7.J<Up^,(dU1VY*5#WkTU>h19w,WQhLI)3S#f$2(eb,jr*b;3Vw]*7NH%$c4Vs,eD9>XW8?N]o+(*pgC%/72LV-u<Hp,3@e^9UB1J+ak9-TN/mhKPg+AJYd$"
"MlvAF_jCK*.O-^(63adMT->W%iewS8W6m2rtCpo'RS1R84=@paTKt)>=%&1[)*vp'u+x,VrwN;&]kuO9JDbg=pO$J*.jVe;u'm0dr9l,<*wMK*Oe=g8lV_KEBFkO'oU]^=[-792#ok,)"
"i]lR8qQ2oA8wcRCZ^7w/Njh;?.stX?Q1>S1q4Bn$)K1<-rGdO'$Wr.Lc.CG)$/*JL4tNR/,SVO3,aUw'DJN:)Ss;wGn9A32ijw%FL+Z0Fn.U9;reSq)bmI32U==5ALuG&#Vf1398/pVo"
"1*c-(aY168o<`JsSbk-,1N;$>0:OUas(3:8Z972LSfF8eb=c-;>SPw7.6hn3m`9^Xkn(r.qS[0;T%&Qc=+STRxX'q1BNk3&*eu2;&8q$&x>Q#Q7^Tf+6<(d%ZVmj2bDi%.3L2n+4W'$P"
"iDDG)g,r%+?,$@?uou5tSe2aN_AQU*<h`e-GI7)?OK2A.d7_c)?wQ5AS@DL3r#7fSkgl6-++D:'A,uq7SvlB$pcpH'q3n0#_%dY#xCpr-l<F0NR@-##FEV6NTF6##$l84N1w?AO>'IAO"
"URQ##V^Fv-XFbGM7Fl(N<3DhLGF%q.1rC$#:T__&Pi68%0xi_&[qFJ(77j_&JWoF.V735&T,[R*:xFR*K5>>#`bW-?4Ne_&6Ne_&6Ne_&n`kr-#GJcM6X;uM6X;uM(.a..^2TkL%oR(#"
";u.T%fAr%4tJ8&><1=GHZ_+m9/#H1F^R#SC#*N=BA9(D?v[UiFY>>^8p,KKF.W]L29uLkLlu/+4T<XoIB&hx=T1PcDaB&;HH+-AFr?(m9HZV)FKS8JCw;SD=6[^/DZUL`EUDf]GGlG&>"
"w$)F./^n3+rlo+DB;5sIYGNk+i1t-69Jg--0pao7Sm#K)pdHW&;LuDNH@H>#/X-TI(;P>#,Gc>#0Su>#4`1?#8lC?#<xU?#@.i?#D:%@#HF7@#LRI@#P_[@#Tkn@#Xw*A#]-=A#a9OA#"
"d<F&#*;G##.GY##2Sl##6`($#:l:$#>xL$#B.`$#F:r$#JF.%#NR@%#R_R%#Vke%#Zww%#_-4&#3^Rh%Sflr-k'MS.o?.5/sWel/wpEM0%3'/1)K^f1-d>G21&v(35>V`39V7A4=onx4"
"A1OY5EI0;6Ibgr6M$HS7Q<)58C5w,;WoA*#[%T*#`1g*#d=#+#hI5+#lUG+#pbY+#tnl+#x$),#&1;,#*=M,#.I`,#2Ur,#6b.-#;w[H#iQtA#m^0B#qjBB#uvTB##-hB#'9$C#+E6C#"
"/QHC#3^ZC#7jmC#;v)D#?,<D#C8ND#GDaD#KPsD#O]/E#g1A5#KA*1#gC17#MGd;#8(02#L-d3#rWM4#Hga1#,<w0#T.j<#O#'2#CYN1#qa^:#_4m3#o@/=#eG8=#t8J5#`+78#4uI-#"
"m3B2#SB[8#Q0@8#i[*9#iOn8#1Nm;#^sN9#qh<9#:=x-#P;K2#$%X9#bC+.#Rg;<#mN=.#MTF.#RZO.#2?)4#Y#(/#[)1/#b;L/#dAU/#0Sv;#lY$0#n`-0#sf60#(F24#wrH0#%/e0#"
"TmD<#%JSMFove:CTBEXI:<eh2g)B,3h2^G3i;#d3jD>)4kMYD4lVu`4m`:&5niUA5@(A5BA1]PBB:xlBCC=2CDLXMCEUtiCf&0g2'tN?PGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CP"
"GT4CPGT4CPGT4CPGT4CPGT4CPGT4CP-qekC`.9kEg^+F$kwViFJTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5o,^<-28ZI'O?;xp"
"O?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xp;7q-#lLYI:xvD=#";

// File: 'UbuntuMono-R.ttf' (205748 bytes)
// Exported using binary_to_compressed_c.cpp
const unsigned int ubuntu_mono_compressed_size = 150389;
const unsigned int ubuntu_mono_compressed_data[ 150392 / 4 ] =
{
		0x0000bc57, 0x00000000, 0xb4230300, 0x00000400, 0x00010025, 0x82110000, 0x042e0804, 0x53441000, 0xd26f4749, 0x03003045, 0x0000840a, 0x53473019,
		0xff0f4255, 0x0200b85a, 0x000048e1, 0x534f3c29, 0xc188322f, 0x0000d2fd, 0x35829801, 0x56603b08, 0x6c584d44, 0x004274ab, 0x001c0c00, 0x63e00500,
		0xf670616d, 0x003f5078, 0x00fc1100, 0x63860600, 0x0b207476, 0x004e124f, 0x00342000, 0x66040200, 0x766d6770, 0x00c444bd, 0x5f821800, 0x67230629,
		0xff707361, 0x820300ff, 0x8240205f, 0x6708384f, 0xac66796c, 0x001e1e29, 0x007c3600, 0x689c7702, 0xf5646165, 0x82dd1e06, 0x821c206f, 0x6836211f,
		0x05231082, 0x82a70035, 0x8254200f, 0x6824280f, 0x5f78746d, 0x82ed55a6, 0x00f83c0f, 0x6c220a00, 0x0661636f, 0x002478ed, 0x00382200, 0x6d441400,
		0x0b707861, 0x82a30980, 0x8278201f, 0x202c082f, 0x656d616e, 0x82fd3987, 0x18ae0200, 0x74040000, 0x74736f70, 0xf4b4da33, 0x8cb20200, 0xb12e0000,
		0x70657270, 0xa42f3e92, 0xa81e0000, 0x8a223382, 0x35820100, 0xcccc002e, 0x0d85bd7a, 0xf53c0f5f, 0xe8030900, 0xc9231183, 0x83cbbee5, 0xa6ca2b07,
		0xc4fecb4f, 0x990256ff, 0x0f823e03, 0x02000922, 0x05833185, 0xff3e032d, 0x01000056, 0xff5bfff4, 0x8699025b, 0x86248217, 0x00012102, 0x05295b82,
		0x00540110, 0x006e0055, 0x2c398207, 0x002f0010, 0x05000059, 0x00af07a7, 0x2c1d8203, 0x01f40103, 0x00050090, 0x02bc0200, 0x2035828a, 0x2507858c,
		0x3200dd01, 0x1582fa00, 0x09050b30, 0x03020603, 0x00e00402, 0x0050ff02, 0x23825b20, 0x442f0284, 0x00414d41, 0xff000040, 0xffb502fd, 0x8231005b,
		0x20aa259b, 0x569f0000, 0x02237182, 0x82b50208, 0x00202124, 0x47825d82, 0x02820a82, 0x8100b52e, 0x36001b00, 0x1f001200, 0x7100ce00, 0x392a0182,
		0x95002e00, 0xb1008c00, 0x09824500, 0x39004b28, 0x24003b00, 0x23824200, 0x33003f22, 0xb1240182, 0x31007d00, 0x31261982, 0x28005c00, 0x17820900,
		0x03822e20, 0x5b005b22, 0x2d201382, 0x3620c582, 0x5b287f82, 0x37002000, 0x49001d00, 0x37200382, 0x27240982, 0x0d003000, 0x19201382, 0x36260582,
		0x46008f00, 0x3b827600, 0xa3000826, 0x47003a00, 0x28204d82, 0x3f200d82, 0x47200382, 0x47204982, 0x36221182, 0x05822900, 0x03842820, 0x7b826b20,
		0x44003f26, 0x13001e00, 0x24264d82, 0x4f004900, 0x0582d400, 0x95822520, 0x07009424, 0xb9822a00, 0x48004822, 0x0920c782, 0x90206982, 0x9524cd82,
		0x2b009400, 0x72201782, 0x0024c182, 0x12007000, 0x9f204182, 0x0d202582, 0xb620ef82, 0x2d226d82, 0x87822600, 0x5382d420, 0x22007122, 0x3f208982,
		0x8c206d82, 0x7b200982, 0x2e26d982, 0x7e007c00, 0x7982aa00, 0xb1001c24, 0x0b829c00, 0x55005922, 0x11224182, 0xef821500, 0xef820920, 0x1b220387,
		0xf3822e00, 0x5b20f783, 0x5920f582, 0x12200384, 0x1d20f584, 0x0383a782, 0x07824620, 0xf9823020, 0x0d200383, 0x4720b182, 0x3a20ed82, 0x1f200388,
		0xfb83f786, 0xf7823620, 0x37200383, 0x1183f184, 0x2e220383, 0xa3822800, 0x03844420, 0x19822420, 0x7d822420, 0x03883a20, 0x85412e20, 0x22078706,
		0x82140036, 0x822820a7, 0x83039193, 0x22038b49, 0x822c002d, 0x8214202b, 0x903620b3, 0x00362203, 0x2213842a, 0x82400047, 0x20038373, 0x8b9d825b,
		0x82122003, 0x87a9830f, 0x001d2203, 0x22f7820b, 0x821d0047, 0x220387af, 0x826b0037, 0x822a2013, 0x20078303, 0x85078242, 0x00272303, 0x0387003f,
		0xd9823020, 0x20260393, 0x0d001300, 0x65822400, 0x03884920, 0x4184a120, 0x3f002722, 0xc42f9382, 0x7b008100, 0xbe008200, 0xab009e00, 0x83006400,
		0x8303872f, 0x00192e37, 0x00690074, 0x007d007f, 0x00770086, 0x240d8284, 0x007c007e, 0x28138c7e, 0x001b0035, 0xff15000c, 0x20bb82ff, 0x2003840b,
		0x20758215, 0x200f820f, 0x8403821c, 0x8383820b, 0x0015221f, 0x2009820f, 0x2e1d820b, 0x00090026, 0x0031003a, 0x002e0012, 0x82b10019, 0x001e24ef,
		0x8225004b, 0x822e200d, 0x00272203, 0x2201861c, 0x82870074, 0x8280206f, 0x0077226f, 0x20778275, 0x930d8277, 0x82d22013, 0x00b924bd, 0x827100d2,
		0x008c2401, 0x43280045, 0x4f250619, 0x90004900, 0x05bd4200, 0xb6009f22, 0x5524f382, 0x14005c00, 0x36207782, 0x0b20fd82, 0x2a208582, 0x87836f82,
		0x8d821220, 0x27002822, 0x19203982, 0x03200382, 0xff831582, 0x59004424, 0x29824000, 0xa1823620, 0xcfff2d22, 0x1d200982, 0x28220982, 0xf3822d00,
		0x0d821220, 0x37003724, 0x2f824100, 0x59822b20, 0x03821220, 0x30002724, 0x5d824400, 0x0d002d22, 0x3620e582, 0x18227d82, 0x17824300, 0x39003122,
		0x3a222582, 0x33823e00, 0x7900d426, 0xb5002300, 0x1b284182, 0x24000500, 0x63003600, 0x24200582, 0x09220382, 0x6f823a00, 0x28206b83, 0xd1414784,
		0x422d200f, 0x1b2208b1, 0xa1821f00, 0x03842820, 0x2b004022, 0x22082f42, 0x822c0018, 0x821b2061, 0x8405205b, 0x8224201b, 0x82372081, 0x83598311,
		0x821d2033, 0x830b8385, 0x825b2003, 0x2203830b, 0x882f0053, 0x221f8375, 0x82530037, 0x886b20d5, 0x821e2081, 0x822d20bb, 0x002d2257, 0x20a38219,
		0x20af8221, 0x20878449, 0x203f825b, 0x8303861e, 0x420b8337, 0x2522056b, 0xdd843f00, 0x83860920, 0x0f821220, 0x44004a26, 0x12005500, 0x09240182,
		0x26005b00, 0x47204582, 0x1226b584, 0x15002100, 0x5f822a00, 0x6400822a, 0x7000a700, 0x6b008900, 0x71240184, 0x8c009c00, 0x50210182, 0x20018300,
		0x2035825b, 0x20358212, 0x229b8226, 0x825a005a, 0x00092209, 0x204d822d, 0x220f8240, 0x82310009, 0x05f94391, 0x27821220, 0x5f820420, 0x17823720,
		0x0d004024, 0x25822000, 0x03821d20, 0x8b824920, 0x25822720, 0xc5822a20, 0x3d822d20, 0x3d842d20, 0x05822420, 0x03822e20, 0x3a003922, 0x47200582,
		0x1b207782, 0x0722d182, 0xb1824800, 0x47003f22, 0x1b203f82, 0x28200582, 0x47200382, 0x3a206382, 0x1a20ff82, 0x4720b582, 0x2d203f88, 0x3b201982,
		0x67440d82, 0x82142005, 0x0031223f, 0x200f8242, 0x223b8436, 0x82140036, 0x823f2007, 0x00472235, 0x20ab8227, 0x203b8212, 0x20538228, 0x209b821e,
		0x200f843f, 0x201f8249, 0x22358236, 0x84210036, 0x0004227f, 0x22bb8207, 0x82400048, 0x82302017, 0x84122047, 0x84112025, 0x836b831b, 0x821d20e3,
		0x822e20a1, 0x8227208d, 0x000d22b3, 0x204f841e, 0x83598219, 0x0503412b, 0x2f843620, 0x12233b85, 0x83005900, 0x842e2055, 0x8c0d2091, 0x00202249,
		0x421d821b, 0x1b24070f, 0x5b001f00, 0x19205b82, 0x03832382, 0x18228b87, 0xaf842c00, 0x3f003722, 0x240c9744, 0x003b002e, 0x87db8209, 0x207b8503,
		0x2011826b, 0x2003822d, 0x204d8200, 0x224d8221, 0x4174001b, 0x0920069b, 0x99835d82, 0x73821d20, 0x13824020, 0x55822220, 0x51822520, 0x49002d22,
		0x24202782, 0x2a26c782, 0x2b001600, 0xdb821200, 0x17824720, 0x45002722, 0x47207182, 0x36200d82, 0x1d20bb82, 0x1e220382, 0x29824000, 0x09824720,
		0x07823f20, 0x07823f20, 0x27821a20, 0x6d822520, 0xbcff092e, 0xb6ff88ff, 0xb8ff5900, 0x0d007eff, 0x31200982, 0x47213d82, 0x20938300, 0x20338626,
		0x22278247, 0x82ce00a4, 0x82312043, 0x2e038b53, 0xfff5ff06, 0xff58ff45, 0xff62ff78, 0x82a4ffae, 0x87452039, 0xb1ff2b03, 0x07ffb5ff, 0x1aff19ff,
		0x6f8207ff, 0x03887b83, 0xff83ff2b, 0xfed9fe88, 0xfeecfeea, 0x201f82d9, 0x416d841a, 0x05840505, 0xffb0ff27, 0xff06ffb4, 0x243d8218, 0xff48ff06,
		0x42878248, 0x05820527, 0xffa2ff27, 0xfed6fe86, 0x201b82e8, 0x26579004, 0xfef3fe85, 0x82fffec4, 0x8b2420af, 0x9fff2f03, 0xd5fe84ff, 0x17ffe7fe,
		0x56ff02ff, 0xc5843cff, 0x9183a983, 0x57827183, 0x35834b84, 0xff2fe38e, 0xfea8ffb9, 0xff0bfff8, 0xff16ff2b, 0x9057ff60, 0xff832273, 0x8ccb8c83,
		0x24003179, 0x7bff96ff, 0xdefeccfe, 0xf9fe0eff, 0x2aff44ff, 0x2c0e4141, 0xff090009, 0x00e2ffbf, 0x00b90009, 0x220382b3, 0x89700082, 0x84ff3061,
		0x55ff86ff, 0x2d0059ff, 0x6a006000, 0x41008300, 0x05830595, 0x5900362a, 0x83ff5900, 0x690085ff, 0x83201b82, 0x002b958f, 0xff0d000d, 0xff42ff66,
		0x824900a4, 0x41982001, 0xff2b090d, 0xff9cff70, 0x009aff6e, 0x82980012, 0x0ec1416f, 0x410f9941, 0x3b441039, 0x003f2605, 0x005bff3a, 0x22b58204,
		0x84d20000, 0x86002001, 0x86d22000, 0x85068307, 0x2005870b, 0x20128382, 0x8405a300, 0x21048428, 0x01820001, 0x00820120, 0x000c002b, 0x00ff08f8,
		0xff0a0008, 0x207582fd, 0x2105820b, 0x0583000a, 0x0c000b22, 0x0c200b82, 0xf3830584, 0x0e00fd24, 0x11820e00, 0x05840f20, 0x0f001022, 0x11220b82,
		0x05821000, 0x05841220, 0x11001322, 0x14280b82, 0xfcff1200, 0x13001500, 0x16200582, 0x17220584, 0x0b821400, 0x15001822, 0x19200582, 0x1a220584,
		0x0b821600, 0x18001b26, 0x1c00fbff, 0x1d220584, 0x0b821900, 0x1a001e22, 0x1f200582, 0x20220584, 0x0b821c00, 0x1d002126, 0x2200faff, 0x23220584,
		0x0b821f00, 0x20002428, 0x2500f9ff, 0x05822100, 0x05842620, 0x22002722, 0x28220b82, 0x05822300, 0x05842920, 0x25002a22, 0x2b200b82, 0x2c220584,
		0x0b822600, 0x27002d28, 0x2e00f8ff, 0x05822800, 0x29002f22, 0x30220582, 0x05822a00, 0x05843120, 0x2b003228, 0x3300f7ff, 0x05822c00, 0x2d003422,
		0x35220582, 0x05822e00, 0x05843620, 0x2f003722, 0x38280b82, 0xf6ff3000, 0x31003900, 0x3a220582, 0x05823200, 0x33003b22, 0x3c220582, 0x05823500,
		0x05843d20, 0x36003e28, 0x3f00f5ff, 0x05823700, 0x05844020, 0x38004128, 0x4200f4ff, 0x05823900, 0x05844320, 0x3b004422, 0x45220b82, 0x05823c00,
		0x3d004622, 0x47200582, 0x48200584, 0x49220584, 0x11823e00, 0x05824a20, 0x4b00f32a, 0xf3ff3f00, 0x41004c00, 0x4d200582, 0x4e280584, 0xf2ff4200,
		0x43004f00, 0x50220582, 0x05824400, 0x45005122, 0x52220582, 0x05824600, 0x05845320, 0x47005428, 0x5500f1ff, 0x05824800, 0x49005622, 0x57220582,
		0x05824a00, 0x05845820, 0x4b005922, 0x5a220b82, 0x05824c00, 0x05845b20, 0x4e005c26, 0x5d00f0ff, 0x5e220584, 0x0b824f00, 0x50005f22, 0x60220582,
		0x05825100, 0x52006122, 0x62260582, 0xefff5300, 0x05846300, 0x54006422, 0x65220b82, 0x05825500, 0x05826620, 0x6700ee28, 0xeeff5700, 0x05846800,
		0x59006922, 0x6a260b82, 0xedff5a00, 0x05846b00, 0x5b006c22, 0x6d220b82, 0x05825c00, 0x05846e20, 0x5d006f22, 0x70220b82, 0x05825e00, 0x05847120,
		0x60007222, 0x73280b82, 0xecff6100, 0x63007400, 0x75200582, 0x76220584, 0x0b826400, 0x65007722, 0x78200582, 0x79280584, 0xebff6600, 0x67007a00,
		0x7b200582, 0xea280582, 0x68007c00, 0x7d00eaff, 0x7e220584, 0x0b826900, 0x6a007f22, 0x80220582, 0x05826b00, 0x6c008122, 0x82200582, 0x83220584,
		0x0b826e00, 0x6f008422, 0x85260582, 0xe9ff7000, 0x05848600, 0x71008722, 0x88200b82, 0x89220584, 0x0b827200, 0x74008a22, 0x8b200582, 0xe8280582,
		0x76008c00, 0x8d00e8ff, 0x8e220584, 0x0b827700, 0x78008f22, 0x90200582, 0x91280584, 0xe7ff7900, 0x7a009200, 0x93220582, 0x05827b00, 0x7c009426,
		0x9500e6ff, 0x96220584, 0x0b827d00, 0x7e009722, 0x98220582, 0x05827f00, 0x80009922, 0x9a220582, 0x05828100, 0x82009b22, 0x9c200582, 0xe5280582,
		0x84009d00, 0x9e00e5ff, 0x9f220584, 0x0b828500, 0x0584a020, 0x8700a122, 0xa2200b82, 0xe42a0582, 0x8800a300, 0xa400e4ff, 0x05828900, 0x8a00a522,
		0xa6200582, 0xa7280584, 0xe3ff8b00, 0x8c00a800, 0xa9220582, 0x05828e00, 0x0584aa20, 0x8f00ab22, 0xac220b82, 0x05829000, 0x9100ad28, 0xae00e2ff,
		0x05829200, 0x0584af20, 0x9300b028, 0xb100e1ff, 0x05829400, 0x0584b220, 0x9600b322, 0xb4200b82, 0xb5220584, 0x0b829700, 0x9800b622, 0xb7220582,
		0x05829900, 0x0584b820, 0x9b00b926, 0xba00e0ff, 0xbb220584, 0x0b829c00, 0x9d00bc22, 0xbd200582, 0xbe220584, 0x0b829e00, 0x9f00bf28, 0xc000dfff,
		0x0582a000, 0x0584c120, 0xa100c222, 0xc3260b82, 0xdeffa300, 0x0584c400, 0xa400c522, 0xc6220b82, 0x0582a500, 0xa600c722, 0xc8220582, 0x0582a700,
		0x0584c920, 0xa800ca22, 0xcb260b82, 0xddffaa00, 0x0584cc00, 0xab00cd22, 0xce220b82, 0x0582ac00, 0xad00cf22, 0xd0220582, 0x0582ae00, 0x0582d120,
		0xd200dc2a, 0xdcffaf00, 0xb000d300, 0xd4220582, 0x0582b100, 0x0582d520, 0xd600db2a, 0xdbffb200, 0xb300d700, 0xd8220582, 0x0582b400, 0xb500d922,
		0xda200582, 0xdb280584, 0xdaffb600, 0xb800dc00, 0xdd200582, 0xde220584, 0x0b82b900, 0xba00df22, 0xe5820582, 0xe1220582, 0x0582bc00, 0xbd00e222,
		0xe3200582, 0xd9280582, 0xbf00e400, 0xe500d9ff, 0xe6220584, 0x0b82c000, 0xc100e722, 0xe8200582, 0xe92c0584, 0xd8ffc200, 0xc400ea00, 0xeb00d7ff,
		0xec220584, 0x0b82c500, 0x0584ed20, 0xc600ee22, 0xef220b82, 0x0582c700, 0xc800f022, 0xf1220582, 0x0582c900, 0xca00f222, 0xf3220582, 0x0582cb00,
		0xcc00f422, 0xf5200582, 0xd6280582, 0xcd00f600, 0xf700d6ff, 0xf8220584, 0x0b82ce00, 0xcf00f922, 0xfa280582, 0xd5ffd100, 0xd200fb00, 0xfc200582,
		0xfd220584, 0x0b82d300, 0xd400fe22, 0xff200582, 0x00230584, 0x85000300, 0x001c2203, 0x24098201, 0x007c0400, 0x24098403, 0x0404001c, 0x26118260,
		0x008000e2, 0x82620006, 0x09de0809, 0x1d000d00, 0x31017e00, 0x48013701, 0x53015101, 0x61015f01, 0x7f017701, 0x92019101, 0x1b021702, 0x37023602,
		0x92024f02, 0xc702bc02, 0xdd02c902, 0x86031103, 0x8c038a03, 0xa1039003, 0xb003a903, 0xce03c903, 0x63045f04, 0xf9047504, 0xf31e851e, 0x1d1f151f,
		0x4d1f451f, 0x591f571f, 0x5d1f5b1f, 0xb41f7d1f, 0xd31fc41f, 0xef1fdb1f, 0xfe1ff41f, 0x1a201520, 0x22201e20, 0x30202620, 0x44203a20, 0x79207020,
		0xac208920, 0xb420ae20, 0x1321b920, 0x22211621, 0x2e212621, 0x02225e21, 0x0f220622, 0x15221222, 0x1e221a22, 0x48222b22, 0x65226022, 0x02250025,
		0x10250c25, 0x18251425, 0x24251c25, 0x34252c25, 0x6c253c25, 0x93258825, 0xffe0ca25, 0x02f0fdef, 0x1df811f5, 0xfdff02fb, 0xe182ffff, 0x08000022,
		0x203ce384, 0x3201a000, 0x49013801, 0x54015201, 0x62016001, 0x80017801, 0x93019201, 0x1c021802, 0x3820e382, 0xc620e384, 0xd820e382, 0x8422e382,
		0xe3828803, 0x038e2008, 0x03a30391, 0x03b103aa, 0x040004ca, 0x04720462, 0x1e801e8a, 0x1f001ff2, 0x1f201f18, 0x86501f48, 0x1f5f36e3, 0x1fb61f80,
		0x1fd61fc6, 0x1ff21fdd, 0x201320f6, 0x201c2018, 0x20e38420, 0x22e38439, 0x92802074, 0x865320e3, 0x821120e3, 0x881920e3, 0x966420e3, 0x825020e3,
		0x869120e3, 0xf50026e3, 0xfb0af806, 0x34e38401, 0xfff9ff01, 0xffe4fff5, 0xffdbffe3, 0xffddffdc, 0xff0000de, 0x200382dc, 0x34fd82da, 0x00d2fe59,
		0x0041ff58, 0x0026ff54, 0xfe110053, 0xfe0000a2, 0x201b8297, 0x221b8293, 0x823b003b, 0xff002605, 0xff0000ff, 0x081782f8, 0xb2feb32a, 0x90fea4fe,
		0x7ae2e6e2, 0xd7e4d9e4, 0xd3e4d5e4, 0xd0e4d1e4, 0xcee4cfe4, 0xcbe4cde4, 0xc9e4cae4, 0xc6e4c7e4, 0xc3e4c4e4, 0x03833783, 0x40e02708, 0x00003ae0,
		0xffe02ae1, 0xf6e0fce0, 0xdfe2b6df, 0x24e4d8e2, 0x74e26de0, 0x78e054df, 0x000053e0, 0x95df98df, 0x07828ddf, 0xdf8b2208, 0xdf85df88, 0xdf5ddf79,
		0xdf43df46, 0xdfe3dfe6, 0xdfdedfd8, 0xdfcadfcf, 0xdfc3dfce, 0xdfb5dfbc, 0x342582af, 0xdb7adf82, 0x14df23df, 0x0c0000e4, 0x00a40988, 0x00e30400,
		0x8e698301, 0x82d02003, 0x8203870f, 0x20028c0a, 0x830d82cc, 0x82d42003, 0x00002107, 0xde200589, 0x04a70f84, 0xbe00ba26, 0xc600c200, 0x05852e84,
		0x04900a84, 0x1186ae20, 0x0786be20, 0x9c20069d, 0xca201e8a, 0x05850b84, 0x006dca08, 0x006b0079, 0x017a0077, 0x01530152, 0x01550154, 0x01570156,
		0x01690058, 0x0161015f, 0x01630162, 0x01750064, 0x03d60365, 0x03c203d8, 0x03ca03c8, 0x03c603d0, 0x03cb03c9, 0x03cd03cc, 0x03d403ce, 0x03d203cf,
		0x03d303d1, 0x007300d5, 0x008b0374, 0x006f006e, 0x00700063, 0x00650071, 0x00680067, 0x006c0072, 0x01820178, 0x01880183, 0x018a0189, 0x018c018b,
		0x0184018d, 0x01860185, 0x019d0187, 0x0401059f, 0x05f604f7, 0x04000509, 0x040805f5, 0x05f304ff, 0x04fd0406, 0x040505f2, 0x05f004fc, 0x04fa0403,
		0x040205ef, 0x05f404f9, 0x04fe0407, 0x040405f1, 0x050f05fb, 0x04f8040e, 0x01aa01df, 0x01ab01ac, 0x020600ad, 0x21d5830a, 0xb5410001, 0x00012310,
		0x00850002, 0x00200787, 0x01200096, 0xbc081784, 0x00040003, 0x00060005, 0x00080007, 0x000a0009, 0x000c000b, 0x000e000d, 0x0010000f, 0x00120011,
		0x00140013, 0x00160015, 0x00180017, 0x001a0019, 0x001c001b, 0x001e001d, 0x0020001f, 0x00220021, 0x00240023, 0x00260025, 0x00280027, 0x002a0029,
		0x002c002b, 0x002e002d, 0x0030002f, 0x00320031, 0x00340033, 0x00360035, 0x00380037, 0x003a0039, 0x003c003b, 0x003e003d, 0x0040003f, 0x00420041,
		0x00440043, 0x00460045, 0x00480047, 0x004a0049, 0x004c004b, 0x004e004d, 0x0050004f, 0x00520051, 0x00540053, 0x00560055, 0x00580057, 0x005a0059,
		0x005c005b, 0x005e005d, 0x0060005f, 0x08c18261, 0xa0009fde, 0xa400a200, 0xb100ac00, 0xbc00b700, 0xbd00bb00, 0xbe00bf00, 0xc200c000, 0xc300c400,
		0xc600c500, 0xc700c800, 0xca00c900, 0xce00cc00, 0xcf00cd00, 0xd000d100, 0xd400d500, 0xd700d600, 0x8b006700, 0x7e007d00, 0x72008200, 0xba009100,
		0x84008900, 0x8f007600, 0xa6018300, 0xb300a100, 0x8c00a301, 0xa801a701, 0x90008000, 0x9d019a01, 0xb8039c01, 0x8500a401, 0x9e019500, 0xd300c100,
		0x7c009a00, 0xa2018700, 0xa5016400, 0x86009b01, 0x66009600, 0x9b007b00, 0xb0009e00, 0x79006d00, 0x74007300, 0x71007000, 0x6f006e00, 0xa901d200,
		0x7a00da00, 0x62006e01, 0x78006c00, 0xad01ab01, 0x92006800, 0x65006300, 0x9d006a00, 0x9c00a500, 0xa300a600, 0xa900a800, 0xa700aa00, 0xaf00ae00,
		0xad2ee182, 0xb600b500, 0x0c01b400, 0x75006900, 0xa7428a00, 0x005a0805, 0x01650193, 0x005f0164, 0x583f4000, 0x52535455, 0x4e4f5051, 0x4a4b4c4d,
		0x46474849, 0x42434445, 0x3e3f4041, 0x3a3b3c3d, 0x36373839, 0x2d2e2f35, 0x2526282c, 0x1f222324, 0x10111418, 0x0a0b0d0f, 0x06070809, 0x02030405,
		0x452c0001, 0x20604623, 0xb06026b0, 0x48232604, 0x0f832d48, 0x82612321, 0x8a612010, 0xb0602210, 0x20128220, 0x21238d46, 0x378320b0, 0x1a826120,
		0x4020298c, 0x66202982, 0x4020298e, 0x40202985, 0x01355388, 0x003c2010, 0x202c2d3c, 0xb0202345, 0x202344cd, 0x515a01b8, 0x260b8258, 0x5923448d,
		0x84edb020, 0x844d200b, 0x2604210b, 0x0d200c84, 0x21210c82, 0x08318221, 0x18452023, 0xb0204468, 0x45206001, 0x687646b0, 0x4460458a, 0xb1012c2d,
		0x23430a0b, 0x2d0a6543, 0x0ab1002c, 0x200a820b, 0x2809820b, 0x702328b0, 0x3e2801b1, 0x28088401, 0x3a452802, 0x080002b1, 0x3044820d, 0x2503b045,
		0xb0646145, 0x45585150, 0x21211b44, 0x21138459, 0x4b844300, 0x4306b024, 0x4b8407b0, 0xb0692022, 0x0037b382, 0x2cb1208b, 0xb88c8ac0, 0x60620010,
		0x23640c2b, 0x585c6164, 0x826103b0, 0x038a3d34, 0x878a8a45, 0xb02b11b0, 0xb0442329, 0x18e47a29, 0x65452c2d, 0x44232cb0, 0x232bb045, 0x4b219882,
		0x29608852, 0x2505b001, 0x8a202310, 0xbc8200f5, 0xeced2322, 0x118ab582, 0x11866120, 0x10250624, 0x1c8300f5, 0x2641e283, 0x01b02208, 0x200b8761,
		0x829b8200, 0x21df82a1, 0x8b832121, 0x40b88b2b, 0x2c2d6200, 0x5180b021, 0x2c0f8558, 0x1b620020, 0x2f4000b2, 0x02b0592b, 0x20198360, 0x211987c0,
		0x19835515, 0x19878020, 0x60223e88, 0xb7822123, 0x60452322, 0x762b0286, 0x80b01868, 0x2c2d2062, 0x842604b0, 0xb0252e02, 0x23452504, 0x03b02045,
		0x63626026, 0x24078368, 0x238a6561, 0x28e18244, 0x00b04520, 0x40b05854, 0x21088244, 0x4c416140, 0xb1452306, 0x2f822f30, 0x82606121, 0x826920ea,
		0x514b2a24, 0x232fb058, 0x2314b070, 0x056d4142, 0x44821082, 0x69452524, 0x32845853, 0x45271585, 0xb04314b0, 0x86636000, 0x2fb02235, 0x253b8245,
		0x45202345, 0x0884608a, 0x06834520, 0x51234b32, 0x3300b958, 0x34b1e0ff, 0x33b31b20, 0x59003400, 0xb0238783, 0x82584316, 0x4525089e, 0x6664588a,
		0x1b601fb0, 0x6020b064, 0x1b582066, 0x5940b021, 0x596101b0, 0x59655823, 0x442329b0, 0x29b01023, 0x236e82e0, 0x59212121, 0x3583e082, 0x2d8edb82,
		0xf6822c87, 0x2507b02d, 0x02582008, 0xb059031b, 0x82102505, 0x46202110, 0x23220482, 0x18823c42, 0x06b01023, 0x820e8425, 0x241182b0, 0x1b015820,
		0x82268700, 0x83218665, 0x25042109, 0x0c82478a, 0x43250323, 0x223c8248, 0x822503b0, 0x4843243a, 0x8259211b, 0x9a02838f, 0x851b2092, 0x218682c0,
		0x938808b0, 0x93820420, 0x84850520, 0xaf868182, 0x2d859a98, 0x29249083, 0x44654520, 0x0f832786, 0x8a250521, 0x840c8254, 0x96b585a0, 0x820220a7,
		0x8420206c, 0x422321fd, 0x08209382, 0x4521cb82, 0x20c28548, 0x200b8202, 0x221e8220, 0x8202b008, 0x081382e7, 0x452c2d2d, 0x18452023, 0x5000b020,
		0x65235820, 0x68235923, 0x5040b020, 0x40b02158, 0x65582359, 0x44608a59, 0x534b2c2d, 0x5a514b23, 0x82452058, 0x050f420d, 0x8c544b21, 0x201f850d,
		0x861b8838, 0x02b02709, 0xb0585443, 0x17822b46, 0x8405d341, 0x8447200f, 0x2d59220f, 0x201e852c, 0x201e8e48, 0x820f8449, 0x8a20261e, 0x534b2308,
		0x2079838a, 0x2f508623, 0x498a2000, 0x585100b0, 0x202340b0, 0x3412388a, 0x2b087085, 0x46234601, 0x61462360, 0x20102023, 0xb8618a46, 0x8a6280ff,
		0x8a4040b1, 0x68604570, 0x202c2d3a, 0x6449238a, 0x5853238a, 0x59211b3c, 0x5224cc82, 0x7a1b7d58, 0x26080882, 0x4b0012b0, 0x42544b01, 0x02b12c2d,
		0x23b14200, 0xb1518801, 0x53880140, 0x10b9585a, 0x88200000, 0x02b15854, 0x82594201, 0x18453629, 0x514b2368, 0x45202358, 0x40b06420, 0x597c5850,
		0x59608a68, 0x24c18244, 0x02b01600, 0x37028225, 0x2301b001, 0x02b0003e, 0x01b13e23, 0xb00c0602, 0x4265230a, 0x42230bb0, 0x3f201783, 0x3f201783,
		0x06201785, 0x27081783, 0xb0422307, 0x2d011601, 0x9f0e4000, 0x02a3afa3, 0x211a9d40, 0x2a799b46, 0xc0ffb81f, 0x0c9a0c40, 0x79974612, 0x73951f48,
		0x54211085, 0x28108294, 0x1f137392, 0x1f487391, 0x2025828f, 0x201c828e, 0x201c828c, 0x200f828b, 0x28078281, 0x1f2a838a, 0x1f488689, 0x201b8288,
		0x201b8285, 0x202b8283, 0x20178282, 0x201f827f, 0x20078278, 0x2c17827c, 0x79bf79af, 0x400379cf, 0x46231f79, 0x08138276, 0x0101ba2b, 0x00014300,
		0x68552240, 0x66556743, 0x64556543, 0x63556143, 0x62556043, 0x5e555f43, 0x5c555d43, 0x5a555b43, 0xb0555943, 0x232682b8, 0x650f014a, 0x43080282,
		0x658f657f, 0x01613003, 0x61306110, 0x61906160, 0x61e061b0, 0x015faf06, 0x30015d00, 0x905d605d, 0x4358035d, 0x43575556, 0x90535555, 0x9052554d,
		0x9051554b, 0x9050554a, 0x5b465549, 0x5b455542, 0x53545541, 0xb3374e82, 0x01050116, 0x4b9001b8, 0x52e703b8, 0x5008b04b, 0x8801b05b, 0x835325b0,
		0x40220805, 0x06b05a51, 0x5500b088, 0xb1585b5a, 0x598e0101, 0x008d8d85, 0xb04b1d42, 0xb058531d, 0x4b591da0, 0x088248b0, 0x08834020, 0x08828020,
		0xb11d002a, 0x59420016, 0x2b002b2b, 0x73220086, 0x02827374, 0x86737421, 0x2b2b220e, 0x821b8201, 0x8201200d, 0x82248510, 0x82088209, 0x82358505,
		0x1874221f, 0x82004000, 0x866b0221, 0xff0d2284, 0x290983f3, 0x0000d001, 0x00005bff, 0x0d83b502, 0xff0a0027, 0x00f6fff6, 0x250b830a, 0xf2ff6b02,
		0x2f820e00, 0x21820e20, 0x3401f22a, 0x1901f2ff, 0x78017002, 0x09261582, 0xfa00f7ff, 0x17820900, 0x2983f720, 0x52200390, 0x54201184, 0x52220582,
		0x05824600, 0x48003a22, 0x42210582, 0x26178300, 0x00550052, 0x823d0073, 0x82432017, 0x00482413, 0x82780043, 0x82542017, 0x84462007, 0x00522225,
		0x24178260, 0x00540087, 0x2023823c, 0x200b8436, 0x200b8248, 0x8709822d, 0x872a2002, 0xaf074008, 0xff190122, 0x20073141, 0x8bbb8244, 0x00bc3403,
		0x00140100, 0x00200200, 0x006c0300, 0x007c0400, 0x82500600, 0x00982403, 0x82580700, 0x00f42303, 0x23820800, 0x00080925, 0x82680900, 0x82902003,
		0xcc270803, 0x0c0a0000, 0x840b0000, 0x040c0000, 0x180d0000, 0x9c0e0000, 0x540f0000, 0x78100000, 0xc8110000, 0x24120000, 0x82130000, 0x2015253b,
		0x4c150000, 0x64200382, 0xf8240382, 0x44160000, 0xdc370382, 0xd0170000, 0x3c190000, 0x701a0000, 0x8c1b0000, 0xa81c0000, 0x821d0000, 0xac1d2427,
		0x821e0000, 0x821f2053, 0x781f2453, 0x821f0000, 0x60202527, 0x10210000, 0x97820382, 0x00a42229, 0x00302300, 0x822c2400, 0x00d82303, 0x5f822600,
		0xd2822720, 0x00682824, 0x3b822800, 0x00482930, 0x00d42900, 0x00fc2b00, 0x00b82c00, 0x6f822d00, 0xbf822d20, 0x7b822d20, 0x00342e25, 0x82702e00,
		0x20378203, 0x2033822f, 0x200f822f, 0x30038230, 0x00001c31, 0x0000c431, 0x00009032, 0x0000c833, 0x24238234, 0x0000b835, 0x20778236, 0x25f78237,
		0x0000a437, 0x03825438, 0x0000e42f, 0x0000a039, 0x0000403a, 0x0000383b, 0x20a3823c, 0x2057823c, 0x2497823d, 0x0000ac3e, 0x357b823f, 0x0000e43f,
		0x00009c40, 0x00006442, 0x00002443, 0x00009444, 0x03821445, 0x0000f423, 0x200f8246, 0x28db8247, 0x0000b447, 0x0000d848, 0x20438249, 0x203f8249,
		0x202f824a, 0x240b824b, 0x0000984b, 0x2053824c, 0x2033824c, 0x20b7824e, 0x2087824e, 0x2097824e, 0x208b824f, 0x24178250, 0x00007450, 0x25ab8251,
		0x0000c051, 0x03821052, 0x52203382, 0x5225a382, 0x530000f0, 0x820382b0, 0x82542053, 0x6c55241f, 0x82550000, 0x200383a7, 0x247b8256, 0x0000e056,
		0x241f8257, 0x00008458, 0x20c78259, 0x20678259, 0x2853825b, 0x0000285c, 0x0000ec5d, 0x2503825e, 0x00005c5f, 0x03828c5f, 0x61288b82, 0x610000d4,
		0x620000fc, 0x63242782, 0x64000000, 0x6520d782, 0x65207382, 0x6624c382, 0x66000088, 0x67206f82, 0x6720c782, 0x6720a782, 0x6820bf82, 0x69200782,
		0x69242782, 0x6b0000d0, 0x6c24a782, 0x6d0000dc, 0x6e208b82, 0x6e242382, 0x6e000030, 0x6e205b82, 0x6e203782, 0x6f201f82, 0x70242f82, 0x720000ac,
		0x72200f82, 0x72248382, 0x730000e4, 0x7320a382, 0x73206382, 0x7320df82, 0x7324b782, 0x740000cc, 0x74203b82, 0x75208782, 0x75255782, 0x7500002c,
		0x20038258, 0x82038284, 0x827520c7, 0x44762533, 0x40780000, 0x70200382, 0xb3820382, 0x82c87821, 0x20b38207, 0x20d38279, 0x20a78279, 0x207f827b,
		0x203b827c, 0x250f827c, 0x0000507c, 0x0382787c, 0x0382a820, 0x7e245382, 0x7f000064, 0x7f20b382, 0x7f25d382, 0x800000e8, 0x82038210, 0x6c80214b,
		0x98200782, 0xc4200382, 0xa7820382, 0x0f828220, 0x0f828220, 0x27828220, 0x27828220, 0x27828320, 0x00388325, 0x82688300, 0x200f8203, 0x20eb8285,
		0x20878285, 0x20278285, 0x204f8285, 0x24378285, 0x0000ec85, 0x24ff8286, 0x00000c87, 0x212b8287, 0x07826087, 0x03828c20, 0x0000b423, 0x20f78288,
		0x24d7828a, 0x0000308a, 0x20cf828a, 0x20cf828a, 0x8213838a, 0x828b20ab, 0x828b20ab, 0x548b24e7, 0x828b0000, 0x828c2017, 0x748c24a3, 0x828d0000,
		0x828d205b, 0x828d20df, 0x828d205b, 0x1c8e25d7, 0x4c8e0000, 0x1b820382, 0xdb828f20, 0x2b829020, 0x00b09024, 0x43829000, 0x5b829120, 0x43829120,
		0x5b829120, 0x00809125, 0x82ac9100, 0x20ef8203, 0x24cb8291, 0x00002092, 0x20378292, 0x247b8293, 0x0000cc93, 0x201b8294, 0x20338294, 0x20338295,
		0x25138295, 0x00005c95, 0x03828895, 0x9620a782, 0x97240b82, 0x9700003c, 0x9720e782, 0x97202382, 0x9820eb82, 0x99209782, 0x99204382, 0x99204382,
		0x99207b82, 0x99209382, 0x9a259382, 0x9b0000a0, 0x82038250, 0x829c206f, 0x829c2047, 0x7c9c247b, 0x829c0000, 0x829c2017, 0x829c201f, 0x0c9d243b,
		0x829d0000, 0x829e20a7, 0x789e243b, 0x829e0000, 0xc89e211b, 0xf0230782, 0x829f0000, 0x489f24cf, 0x82a00000, 0x82a02043, 0x38a12443, 0x82a10000,
		0x24a224af, 0x82a20000, 0x82a2202f, 0x82a2202f, 0xd4a2242f, 0x82a30000, 0x34a321ab, 0x9f820782, 0x4f82a320, 0xc382a320, 0x00dca324, 0x1782a400,
		0x7b82a420, 0x7b82a420, 0x1782a420, 0x1782a420, 0x0098a625, 0x8244a800, 0x20638203, 0x204f82a9, 0x204f82aa, 0x206782aa, 0x20df82aa, 0x255382ab,
		0x0000a4ab, 0x0382ccab, 0xac201b82, 0xac20d782, 0xac206b82, 0xac25d782, 0xac00009c, 0x230382c0, 0xad0000f4, 0xae243382, 0xae000000, 0xaf246382,
		0xaf000008, 0xaf217b82, 0x20078260, 0x82038288, 0x82af2047, 0x82b02017, 0x82b020db, 0x64b02517, 0x8cb00000, 0xfc230382, 0x82b10000, 0x82b12037,
		0x82b1204f, 0x82b1204f, 0x82b22087, 0x82b22023, 0x82b220b3, 0x82b22073, 0x10b32437, 0x82b30000, 0x82b3201f, 0x40b424d3, 0x82b40000, 0xbcb42137,
		0xe8240782, 0x14b50000, 0x3c200382, 0x70200382, 0xf7820382, 0x82d0b521, 0x24538207, 0x000038b6, 0x820383b7, 0xd8b82497, 0x82ba0000, 0x82bb201b,
		0x68be2467, 0x82bf0000, 0x82bf207b, 0x82bf20d3, 0x82bf2047, 0x82bf2017, 0xc8bf2163, 0x9f821782, 0xff82bf20, 0x0004c025, 0x8218c000, 0x002c2303,
		0x2782c100, 0x0048c224, 0x9382c400, 0xf782c620, 0x7382c720, 0x00a8ca24, 0xa782cd00, 0x7782cf20, 0xa782d020, 0x1782d220, 0x00e4d330, 0x0044d500,
		0x0094d600, 0x0058d800, 0x1382d900, 0x3f82da20, 0x0080db24, 0x6f82dc00, 0x00dcdd24, 0x2f82df00, 0x7382e020, 0x001ce224, 0xaf82e300, 0x2382e520,
		0x0050e628, 0x00ace800, 0xb782e900, 0x2782ea20, 0xf382ea20, 0x6f82eb20, 0x0028ec24, 0x1b82ec00, 0x8260ec21, 0x82742007, 0x243f8203, 0x0000b8ed,
		0x213b82ee, 0x078234ee, 0x33820b83, 0x8f82ee20, 0x7b82ef20, 0x3782f020, 0x8b82f120, 0xa782f220, 0x00bcf225, 0x82ccf200, 0x21338203, 0x0782ecf2,
		0x0000fc23, 0x201782f3, 0x203b82f3, 0x209382f3, 0x218782f3, 0x13824cf3, 0xf3202f82, 0xf3218782, 0x820b8284, 0x82f320cf, 0xc0f32187, 0xd4200b82,
		0x57820382, 0x3782f320, 0x0010f425, 0x8224f400, 0x208b8203, 0x202382f4, 0x206b82f4, 0x201382f5, 0x25bb82f5, 0x000030f5, 0x038240f5, 0xf5201b82,
		0xf520a782, 0xf5204b82, 0xf521ef82, 0x20138290, 0x200382a0, 0x820382b0, 0x82f5204f, 0xe0f521a7, 0xf0240b82, 0x00f60000, 0x14200382, 0x53820382,
		0xc782f620, 0xeb82f620, 0x8782f720, 0x00d8f828, 0x00b4f900, 0x8382fa00, 0x3b82fb20, 0x0382fc20, 0x4b82fd20, 0x0782fe20, 0x78ff2108, 0x88ff0000,
		0x78000100, 0x58010100, 0x24020100, 0xb4030100, 0x10040100, 0x28050100, 0x7c060100, 0xf4230382, 0x82080100, 0x82092017, 0x0c0b2907, 0x980b0100,
		0x200c0100, 0xf0270382, 0xbc0d0100, 0x820e0100, 0x820f2037, 0x3010383f, 0xe0100100, 0x74110100, 0xb0120100, 0xfc130100, 0x14150100, 0x82160100,
		0x9017241f, 0x82180100, 0x9c192423, 0x821a0100, 0x2c1c250b, 0x941d0100, 0xa4230382, 0x821e0100, 0xd01f292b, 0x3c200100, 0x08210100, 0x27820382,
		0x005c2224, 0x83822301, 0x67822420, 0x47822420, 0x00ac252c, 0x00a02601, 0x00642701, 0x8b822801, 0x00502924, 0x3b822a01, 0x00cc2b28, 0x00e42c01,
		0x27822e01, 0x53822f20, 0x00343028, 0x006c3101, 0x0b823201, 0x4f823220, 0x82543221, 0x201f820b, 0x20bb8232, 0x208b8234, 0x243f8235, 0x0100a836,
		0x200b8237, 0x24e78237, 0x01006838, 0x20c78238, 0x24b78239, 0x0100c43a, 0x250b823a, 0x0100183b, 0x0382443b, 0x03827020, 0x3b20af82, 0x3b201782,
		0x3c201782, 0x3d201782, 0x3d249f82, 0x3d010040, 0x3d20a382, 0x3d24b782, 0x3e0100e8, 0x3e207b82, 0x3e20e382, 0x3f20d782, 0x4028b782, 0x40010080,
		0x410100b8, 0x41201f82, 0x42245782, 0x4201000c, 0x43249782, 0x44010074, 0x4420c382, 0x4420b382, 0x45208f82, 0x4620c782, 0x47241b82, 0x4801004c,
		0x48219382, 0x820782d4, 0x284924eb, 0x82490100, 0x824920df, 0x824a2063, 0x984b2453, 0x824c0100, 0x824c201f, 0x824c201f, 0x824d201f, 0x824e200b,
		0x824e20b7, 0x824e2017, 0x824f209b, 0x1c50254b, 0x48500100, 0xb3820382, 0xb3825020, 0x17825020, 0x00f85024, 0x4b825101, 0x82545121, 0x827c2007,
		0x208f8203, 0x208f8251, 0x20738252, 0x208f8252, 0x20438252, 0x242b8252, 0x0100c852, 0x20438252, 0x202b8253, 0x24bf8253, 0x01008853, 0x242b8253,
		0x0100e453, 0x20f38254, 0x20578254, 0x21578254, 0x0f82a454, 0x0100d824, 0x03820455, 0x01002c23, 0x289f8256, 0x0100c057, 0x0100ec57, 0x20438258,
		0x29278259, 0x0100ac5a, 0x0100e85b, 0x0382205d, 0x5e201382, 0x5e203782, 0x5e206382, 0x5f248f82, 0x61010094, 0x62294f82, 0x62010084, 0x640100bc,
		0x82038274, 0xd0642153, 0xab820782, 0x003c6625, 0x826c6601, 0x20d78203, 0x20578266, 0x202f8267, 0x241f8268, 0x0100a069, 0x20f7826a, 0x2453826c,
		0x0100386d, 0x2013826e, 0x242f826f, 0x01005870, 0x207b8270, 0x20078272, 0x20df8273, 0x20078274, 0x20038275, 0x204f8276, 0x246f8277, 0x0100d477,
		0x284b8278, 0x0100b879, 0x01004c7a, 0x28f7827b, 0x0100407c, 0x0100447d, 0x24e7827e, 0x0100cc7e, 0x205b827f, 0x20278280, 0x200b8281, 0x20ff8282,
		0x24d38282, 0x01002483, 0x28178283, 0x0100f483, 0x0100b484, 0x20a78285, 0x203b8286, 0x25938286, 0x0100f086, 0x03823487, 0x87202782, 0x88249382,
		0x8901008c, 0x89203782, 0x89207782, 0x8a200b82, 0x8a20ef82, 0x8b25ef82, 0x8d0100e8, 0x20038250, 0x230382a8, 0x8e0100dc, 0x8f20d782, 0x8f20df82,
		0x9020b782, 0x90255382, 0x910100e4, 0x82038210, 0x8291208f, 0x829120a3, 0x82912027, 0xc89125a7, 0x14920100, 0x8f820382, 0x37829220, 0xdf829320,
		0xf3829520, 0x7b829520, 0x0b839520, 0x96207382, 0x9620ff82, 0x96204382, 0x9620e382, 0x9724bb82, 0x97010018, 0x97208382, 0x97282782, 0x98010048,
		0x99010030, 0x9920a382, 0x9920e782, 0x9a205b82, 0x9a200f82, 0x9b249b82, 0x9b010004, 0x9c20d382, 0x9d243f82, 0x9e010060, 0x9f25c382, 0xa0010080,
		0x82038294, 0xe0a12413, 0x82a20100, 0x2ca3241f, 0x82a30100, 0xd8a32487, 0x82a50100, 0x1ca625a3, 0xaca60100, 0x6b820382, 0xb782a620, 0x0084a725,
		0x8274a801, 0x201f8203, 0x20e782a8, 0x206b82a9, 0x256b82a9, 0x010054a9, 0x0382a0a9, 0x0100b023, 0x209b82aa, 0x202f82aa, 0x207b82ab, 0x20ab82ab,
		0x244782ac, 0x010088ac, 0x202382ad, 0x200b82ae, 0x201b82ae, 0x207782af, 0x249782b0, 0x01007cb1, 0x207f82b1, 0x201382b1, 0x20f382b2, 0x20a782b3,
		0x207f82b3, 0x205f82b3, 0x205f82b3, 0x207f82b4, 0x209382b4, 0x200782b5, 0x250f82b5, 0x0100f8b5, 0x038220b6, 0xb621eb82, 0x23078270, 0xb80100d0,
		0xb9206782, 0xba20ff82, 0xbb205b82, 0xbc20f382, 0xbd204b82, 0xbe285782, 0xbf010024, 0xc0010028, 0xc1240782, 0xc2010008, 0xc3204382, 0xc420fb82,
		0xc4207b82, 0xc5204b82, 0xc5241b82, 0xc501009c, 0xc6205382, 0xc7200f82, 0xc9204b82, 0xca295b82, 0xcc010064, 0xce010080, 0x82038218, 0x82cf2013,
		0x3cd02433, 0x82d10100, 0x82d12047, 0x82d2202b, 0x82d3205f, 0x82d420bb, 0x82d42013, 0x82d520ef, 0x82d52017, 0x00d62853, 0xf4d60100, 0x82d70100,
		0x5cd924ff, 0x82da0100, 0x82da2053, 0x82db202f, 0x82db207b, 0xbcdb2d43, 0xccdb0100, 0x68dc0100, 0x0cdd0100, 0xb4230382, 0x82de0100, 0x82df2017,
		0x82df200b, 0xecdf24af, 0x82e00100, 0x82e12047, 0x82e12097, 0x82e22063, 0x04e32827, 0x14e30100, 0x82e40100, 0x6ce52493, 0x82e60100, 0x82e82053,
		0x82e8202f, 0x4ce828cb, 0x74e80100, 0x82e90100, 0x82ea203b, 0x38eb242b, 0x82eb0100, 0x82ec207f, 0x82ed200f, 0xa0ed2573, 0x2cee0100, 0xd0230382,
		0x82ef0100, 0xa8f0251f, 0xe0f10100, 0xf0230382, 0x82f20100, 0x44f2213f, 0x78200782, 0x17820382, 0x82b8f221, 0x82c82007, 0x25af8203, 0x010020f3,
		0x038230f3, 0x03824020, 0xf3205f82, 0xf3241f82, 0xf40100dc, 0xf4207782, 0xf4201382, 0xf4211382, 0x820f8284, 0xc0f421ab, 0x93820782, 0x4f82f520,
		0x8f82f520, 0x0080f528, 0x00b0f501, 0x3382f601, 0x0088f724, 0xf382f701, 0xd782f720, 0x5382f820, 0x0054f824, 0x1f82f801, 0x1b82f820, 0x4f82f820,
		0x4f82f920, 0x4f82f920, 0x0070f925, 0x82a4f901, 0x20f38203, 0x20fb82fa, 0x205f82fa, 0x312382fa, 0x0100d8fa, 0x0100f0fb, 0x010018fc, 0x0100acfd,
		0x038290fe, 0xff254b82, 0x000200f8, 0x24038244, 0x01020054, 0x24038270, 0x02020080, 0x20038218, 0x20038228, 0x240382a0, 0x030200b0, 0x2c0382ec,
		0x040200fc, 0x050200b8, 0x0602004c, 0x24038240, 0x070200cc, 0x20038238, 0x24038248, 0x08020058, 0x2303823c, 0x090200e4, 0x09203782, 0x09201782,
		0x09201782, 0x0a203782, 0x0b243f82, 0x0c0200c0, 0x0d240782, 0x0e0200f0, 0x0f2c6382, 0x100200bc, 0x110200a8, 0x120200b4, 0x13242782, 0x13020084,
		0x13202b82, 0x14256382, 0x150200f8, 0x82038208, 0x90162483, 0x82160200, 0x82162083, 0x8217203b, 0x8218202b, 0xdc19240b, 0x821a0200, 0x821a206f,
		0x821b2007, 0xf41b246f, 0x821c0200, 0xd81d255f, 0x001e0200, 0x37820382, 0x9f821e20, 0x82681e21, 0x829c200b, 0x20378203, 0x20ab821e, 0x201b821f,
		0x259b821f, 0x0200501f, 0x0382781f, 0x1f214b82, 0x820782c8, 0x82202073, 0x602024af, 0x82200200, 0x8220206f, 0x822020e3, 0x822120a7, 0x82212047,
		0x8021252b, 0x0c220200, 0x23820382, 0x82642221, 0x82982007, 0x204f8203, 0x25378222, 0x02002c23, 0x03825c23, 0x23203782, 0x23243782, 0x240200e0,
		0x24202b82, 0x24202b82, 0x24202b82, 0x24201782, 0x2425eb82, 0x250200e8, 0x20038210, 0x2003823c, 0x8203826c, 0xd425257b, 0x04260200, 0x43820382,
		0x82542621, 0x21678207, 0x0782ac26, 0x2720c782, 0x27241782, 0x27020030, 0x2721e782, 0x8207828c, 0x822720df, 0x242824e7, 0x82280200, 0x82282013,
		0x82282013, 0xdc2825d7, 0x08290200, 0x34200382, 0xbf820382, 0x17822920, 0x87822920, 0x00e42924, 0x6f822a02, 0x6f822a20, 0x82702a21, 0x82a4200b,
		0x20578203, 0x259b822b, 0x0200402b, 0x0382742b, 0x03829c20, 0x0382c420, 0x2c25eb82, 0x2c02001c, 0x82038248, 0x822c2017, 0xcc2c219b, 0x6f820b82,
		0x17822d20, 0x004c2d25, 0x827c2d02, 0x209b8203, 0x206f822d, 0x209b822e, 0x20b3822e, 0x2587822e, 0x0200842e, 0x0382b02e, 0x2f201782, 0x2f201782,
		0x2f241782, 0x2f02005c, 0x2f208782, 0x2f24f782, 0x300200ec, 0x30204382, 0x30204382, 0x30205b82, 0x30205b82, 0x30245b82, 0x310200f8, 0x3120cb82,
		0x31201782, 0x3120f782, 0x3125cb82, 0x320200e8, 0x82038218, 0x82322013, 0xa8322113, 0xd0200b82, 0xfc240382, 0x28330200, 0x54200382, 0x17820382,
		0x87823320, 0xcb823320, 0x6f823420, 0x6f823420, 0x87823420, 0x17823420, 0x2f823420, 0x2f823420, 0x2f823420, 0x2f823520, 0x00503525, 0x82783502,
		0x21738203, 0x0782c835, 0x3620e782, 0x36255f82, 0x36020044, 0x82038270, 0x82362017, 0x0037252f, 0x30370200, 0x60200382, 0x90200382, 0xb8200382,
		0xe0240382, 0x0c380200, 0x38200382, 0x64200382, 0x17820382, 0xcf823820, 0xa3823820, 0x43823920, 0x00483924, 0x5b823902, 0x73823920, 0x8b823920,
		0x00083a24, 0x2b823a02, 0x82683a21, 0x218b8207, 0x0782983a, 0x0382c420, 0x3b207382, 0x3b20ff82, 0x3b202f82, 0x3b20ff82, 0x3b207382, 0x3b20ff82,
		0x3c20ff82, 0x3c20a382, 0x3c24bb82, 0x3c020088, 0x3c207382, 0x3d205b82, 0x3d245b82, 0x3d020040, 0x3d214782, 0x20078294, 0x230382c0, 0x3e0200ec,
		0x3e201782, 0x3e20b782, 0x3e21b782, 0x820f829c, 0x823e20cf, 0x823f2043, 0x823f205b, 0x823f205b, 0x823f2017, 0x823f2017, 0xf43f2417, 0x82400200,
		0x82402017, 0x8241202f, 0x8241201b, 0x82412073, 0x8241205b, 0x5442292f, 0xfc420200, 0x2c430200, 0x0b820382, 0x82844321, 0x82b02007, 0x20ef8203,
		0x24c38244, 0x02003044, 0x20938244, 0x24c38244, 0x02002045, 0x243b8245, 0x02002446, 0x20878246, 0x20878246, 0x20878247, 0x25378247, 0x02009047,
		0x0382bc47, 0x48205382, 0x48251f82, 0x48020050, 0x82038278, 0x8249202f, 0x8249207b, 0x344a25ff, 0x5c4a0200, 0x63820382, 0x2b824a20, 0x97824a20,
		0x53824b20, 0x004c4b25, 0x82744b02, 0x82ac2003, 0x00d82403, 0x82044c02, 0x208f8203, 0x21af824c, 0x0b826c4c, 0x4d245382, 0x4d020088, 0x4d207382,
		0x4e257382, 0x4e020010, 0x2003823c, 0x82038268, 0x824e2057, 0x824e2017, 0x004f2837, 0x284f0200, 0x82500200, 0x8250205f, 0x8251205f, 0x40512527,
		0x70510200, 0xa4200382, 0x23820382, 0x000c5224, 0x13825202, 0x6f825220, 0x82a85221, 0x2013820b, 0x20e78253, 0x204f8253, 0x20278253, 0x20278253,
		0x20138253, 0x20278254, 0x20278254, 0x20138254, 0x24c38254, 0x0200d454, 0x20278255, 0x20278255, 0x20138255, 0x20278255, 0x24278255, 0x0200fc55,
		0x20c38256, 0x28ab8256, 0x02003057, 0x0200b058, 0x24078261, 0x0200e061, 0x20c78262, 0x21f38262, 0x0b826462, 0x03829420, 0x62259382, 0x630200e4,
		0x2003821c, 0x20038254, 0x2303828c, 0x640200c4, 0x6420a782, 0x6421e782, 0x820b82c8, 0x486524eb, 0x82650200, 0x826520d7, 0x8266202b, 0x826620cf,
		0x826620ab, 0x826720e3, 0x4c67244f, 0x82670200, 0x826820df, 0x8268209f, 0x82682087, 0x38692597, 0x88690200, 0x8f820382, 0x0b826a20, 0x0b826a20,
		0x0b826a20, 0x00146b25, 0x82606b02, 0x20938203, 0x20a7826b, 0x20a3826c, 0x2073826c, 0x201b826c, 0x2083826d, 0x2497826d, 0x0200906d, 0x246b826f,
		0x02005873, 0x20638276, 0x08bb8277, 0x009c7731, 0x00320002, 0x02c20100, 0x000300ee, 0x401b0007, 0x0903040b, 0x05080007, 0x44000401, 0x2fcd3f00,
		0xd61001cd, 0xcdde10cd, 0x11333031, 0x82271121, 0x32810803, 0xfe329001, 0xfdee02d4, 0x8a023212, 0x000076fd, 0xb5000200, 0x3b01f4ff, 0x0d006b02,
		0x23001900, 0x91001140, 0x94170b0b, 0x1a1b1111, 0x0e9a1406, 0x00590c5c, 0xcefd3f3f, 0x39121101, 0x2f33ed2f, 0x013031ed, 0x07020e14, 0x35032e23,
		0x22033335, 0x36343526, 0x15163233, 0x25010614, 0x03060502, 0x05060339, 0x1b2d5902, 0x1c1b2828, 0xc3012727, 0x37383e25, 0x38371e1e, 0xfda8253e,
		0x1f1f2589, 0x82038325, 0x3d778276, 0x01ae0181, 0x00a70273, 0x00130009, 0x130ab715, 0x040f0900, 0x2f000013, 0x0132cd32, 0xb583dd2f, 0x56821320,
		0x26230723, 0x88698226, 0x0ace3509, 0x0a072a08, 0x2a070af2, 0xa7020a08, 0x2f712c2d, 0x2c2d712f, 0x00200787, 0x1b245782, 0xd9010000, 0x1b3dcf82,
		0xaf001f00, 0x0a0d5a40, 0x0e050609, 0x0f910e05, 0x031e1d10, 0x0f040f04, 0x18171412, 0x0874821b, 0x1c1f0231, 0x12011211, 0x16131391, 0x9100211a,
		0x05910401, 0x20070b05, 0x59125913, 0x1c1d590f, 0x0d970a17, 0x0d101114, 0x0602031b, 0x1e1f0997, 0x820d0918, 0x0e052c01, 0x04600559, 0x00600160,
		0x833f0060, 0x39122d00, 0x112f2f39, 0x10333333, 0x323232ed, 0x1a820888, 0xc610012a, 0xfd2f3232, 0xce10edde, 0x7d220783, 0x0082c487, 0x05841020,
		0x10180124, 0x108510ce, 0xed200a82, 0x31260a86, 0x37232130, 0x03820723, 0x37333523, 0x23038223, 0x37330733, 0x15260382, 0x15330723, 0x05822723,
		0x4b41012c, 0x4b1f6f1f, 0x1e4d401f, 0x0782796b, 0x4b1e6f33, 0x1f4d401e, 0x6e20796c, 0xa3a36e1f, 0x429f43a3, 0x080082a4, 0x439f423f, 0x00009fe2,
		0xff360001, 0x02bf019f, 0x003500b5, 0x311140b3, 0x4d001218, 0x110f2031, 0x28314c00, 0x2b4d000e, 0xb4e8ffb8, 0x4c000c0b, 0xd8ffb82a, 0x000a09b4,
		0xffb8274c, 0x0010b3e0, 0x2907824d, 0x0e0db4e8, 0xb8264c00, 0x1083f0ff, 0x2a822220, 0x0f3c4026, 0x28114d00, 0x0d212783, 0x08248220, 0x0a200936,
		0x2c154d00, 0x2f2f128b, 0x1818290f, 0x37298c05, 0x8c1f3232, 0x2f0a360f, 0x3315241c, 0x2c8f0033, 0x362e2e2f, 0x8f1c1919, 0x00131512, 0xed32dd2f,
		0x33112f32, 0x392b0786, 0x01391211, 0x33edd610, 0x82de102f, 0x250d8204, 0x32ed332f, 0x4c593031, 0x08088208, 0x3e3237ed, 0x2e343502, 0x032e2702,
		0x37363435, 0x16153335, 0x26071716, 0x06222326, 0x021e1415, 0x15031e17, 0x15070614, 0x26263523, 0x16163727, 0x1c3124e9, 0x3429180c, 0x29351b1c,
		0x4a484c1a, 0x11144328, 0x36314015, 0x2b201139, 0x3040221b, 0x4a514e1d, 0x16134e3f, 0x0b554a1b, 0x19111d15, 0x0a151b23, 0x3123180a, 0x0b504024,
		0x0f026467, 0x11084608, 0x1c152628, 0x0d0a1216, 0x2738281d, 0x730a523b, 0x0b180270, 0x00170d45, 0x12000500, 0xe201f3ff, 0x03007802, 0x1b000f00,
		0x33002700, 0x48407700, 0x1cf01ce0, 0x2eef1c02, 0x2e022eff, 0x28f028e0, 0x00222802, 0x8d020102, 0x03140003, 0x22030300, 0xff0aef35, 0xe00a020a,
		0x0210f010, 0xff16ef10, 0x04160216, 0x34040101, 0x25311f2b, 0x130d1957, 0x03025807, 0x55010056, 0x82333f00, 0xdccd2301, 0x03823fcd, 0xc6100136,
		0xdd102f32, 0xcd5dde5d, 0x32ce105d, 0x872b872f, 0x1801c47d, 0x31261186, 0x01233330, 0x77430533, 0x22232407, 0x41343726, 0x16240512, 0x13363233,
		0x5f2a1796, 0x467b0146, 0x333a38fe, 0x03833a33, 0x17189c2a, 0x17191917, 0x395b1817, 0x39251185, 0x1717199c, 0x2e158318, 0x4c8e6b02, 0x4c4c4f4f,
		0x2d4c5050, 0x822d3a3a, 0xdefe2103, 0x14821084, 0x22081086, 0x03000000, 0xf8ff1f00, 0x7902d901, 0x36002b00, 0x0c014200, 0x112041b6, 0x314c0012,
		0xb3e0ffb8, 0x824d0012, 0xb3e82207, 0x2a078411, 0x000fb3f0, 0xffb82d4d, 0x820940e8, 0x082c2508, 0x264d0008, 0x1f2c0d83, 0x4c000d09, 0x000c1820,
		0x0b10204d, 0x18260482, 0x4c000a09, 0x3482181a, 0x82301a21, 0xb8112723, 0x10b3d8ff, 0x07824d00, 0x0eb3e828, 0xb8024d00, 0x5983d0ff, 0xe8200782,
		0x07825983, 0x1f83e020, 0xf0200782, 0x01231f83, 0x83f0ffb8, 0x2207821f, 0x823c40e8, 0x37480845, 0x07282876, 0x1b2c3410, 0x760e1e04, 0x402b030a,
		0x0d0d3d04, 0x44077306, 0x1e1e763d, 0x4318762f, 0x2b1b2c40, 0x34030a10, 0x0606342b, 0x237c3a32, 0x137c3245, 0x420e0d46, 0x3f333f00, 0x12ed3fed,
		0x39392f39, 0x33333311, 0xab420383, 0x10ed2b05, 0x2f33edde, 0xed391712, 0x1a821711, 0x42ed2f21, 0xbc420db0, 0x16012a07, 0x36361716, 0x06061737,
		0x08098207, 0x27262321, 0x22230606, 0x3435022e, 0x26263736, 0x023e3435, 0x021e3233, 0x07061415, 0x15060607, 0x83161614, 0x08c44116, 0x8f083982,
		0x25111001, 0x030c0813, 0x11170645, 0x57112a17, 0x4f201511, 0x2a3c262b, 0x1a353117, 0x372a1920, 0x26321a1d, 0x42413c17, 0x3a281d1d, 0x47211c44,
		0x1a192754, 0x301d122d, 0x141b0128, 0x421c1729, 0x5b3a0928, 0x26442025, 0x23282023, 0x203a2c19, 0x2329602f, 0x3a272648, 0x21101325, 0x612e1f30,
		0x441a2429, 0x0d332720, 0x4d2d281d, 0x292424f9, 0x26321d29, 0x0100441e, 0x9c01ce00, 0xa7022501, 0x14000d00, 0x0c9101b7, 0x070e0f0c, 0xcd2f000d,
		0x2305fd45, 0x15013031, 0x0808fb45, 0x0325012b, 0x33040605, 0x03050604, 0x162da702, 0x173b3d39, 0x3a3d3b17, 0x00002c16, 0x71000100, 0x820159ff,
		0x1000bd02, 0x00b97f00, 0x05114207, 0xffb80729, 0x0011b3f0, 0x82b8064d, 0x2307870f, 0x014d000e, 0x82063142, 0x83e82007, 0x2107821f, 0x1782b3f0,
		0x2f820e20, 0x0d094026, 0x180a4d00, 0x052a0482, 0x40e8ffb8, 0x4d000f15, 0x04822002, 0x09090f3e, 0x0c030800, 0x5a0f0011, 0x2f000908, 0x01333f33,
		0xceddd610, 0x33113232, 0x2b003031, 0x01200082, 0x21068b41, 0x2b440601, 0x07270805, 0x34352626, 0x01173736, 0x17625d80, 0x2d32492f, 0x72727173,
		0x4881022c, 0x64386fbc, 0x3c2b565c, 0x7c7de155, 0x823c53e2, 0x25bf8abe, 0xb9580012, 0xb7820f00, 0x86820d20, 0x2f208f83, 0x07210882, 0x26bd8318,
		0x4d001218, 0x820f1005, 0x26048390, 0x12111001, 0x83074c00, 0x09112314, 0x9b821209, 0x11001429, 0x005a0908, 0x8d2f333f, 0x3598879b, 0x35363617,
		0x27022e34, 0x15161637, 0x07020e14, 0x635d7327, 0x98843017, 0x55391d25, 0x8b6b2c39, 0x783e2499, 0x8629636f, 0x3930089b, 0xbb01fa00, 0x2c006b02,
		0x17403300, 0x04042029, 0x0e1f1620, 0x2e1f1f0e, 0x1609292d, 0x05171728, 0x00591f0d, 0x3932cc3f, 0x32cd332f, 0x12110132, 0x2f240882, 0x32cdcc10,
		0x31340482, 0x16160130, 0x27071717, 0x06272626, 0x27070706, 0x37363637, 0x27220b82, 0x17821737, 0x82086947, 0x375b0814, 0x06060717, 0x3a1b1f01,
		0x05460414, 0x100f2215, 0x45051722, 0x1b381605, 0x07234e25, 0x4723071b, 0x560d0820, 0x4620080d, 0x061a0723, 0xa1014d24, 0x051f3719, 0x471e0633,
		0x1e472121, 0x1f063205, 0x0b051936, 0x0352020c, 0x2412220e, 0x0707264e, 0x13244e26, 0x52030d21, 0x410c0b02, 0x2e3c0563, 0xc7012b00, 0x0b00e201,
		0x0f402400, 0x0b070406, 0x0d0a0a01, 0x0102040c, 0x000a0709, 0xdd22bb82, 0xbc8533cd, 0xddcd4108, 0x3031cd32, 0x33353313, 0x23153315, 0x23352315,
		0xa948a82e, 0x01a848a9, 0x46b8b82a, 0x0100b9b9, 0x70ff9500, 0x8b005f01, 0x1f001300, 0x0e050e40, 0x08080094, 0x13001415, 0x5c059a0b, 0xdced3f00,
		0x2705c042, 0x3139edce, 0x033e1730, 0xb548f082, 0x0e240807, 0x12950702, 0x07181e23, 0x1d2d1d20, 0x2f172625, 0x044f3046, 0x14170f08, 0x28152b03,
		0x1d263529, 0x0627373f, 0x8c345f82, 0x6801d700, 0x03002501, 0x02b30d00, 0x00030003, 0x2f01cd2f, 0x15279484, 0xdcdc8c23, 0x854e2501, 0xffb126d3,
		0x004401f4, 0x27d3828d, 0x9400b610, 0x039a0906, 0x01287f83, 0x3031ed2f, 0x23061425, 0x31072e49, 0x21284401, 0x22282822, 0x1e402821, 0x1f1e2e2e,
		0x63822e2e, 0x5bff4526, 0xbb02af01, 0x23235c82, 0x82021140, 0x018d2706, 0x01011402, 0x02820302, 0x2f2c1e82, 0x01332f33, 0x10872f2f, 0xc47d872b,
		0x232ac782, 0x559a3301, 0xa5531701, 0x7b836003, 0x2e000328, 0xc601f3ff, 0x7b827902, 0x2b001733, 0x29b6f600, 0x000e0d10, 0xffb8254c, 0x000eb3e8,
		0x2507824d, 0x000db3f0, 0x0f861f4d, 0xf0220782, 0x10821440, 0x26841b20, 0x1018162a, 0x20164d00, 0x144d000f, 0xb4252082, 0x4c00100f, 0x06fb4710,
		0xd0220782, 0x19820e40, 0x23830e20, 0x82100e21, 0x83082009, 0x0022221a, 0x2007844d, 0x0807841e, 0x1bb4e832, 0x004c001d, 0x40c0ffb8, 0x001c1b27,
		0x0100904c, 0x00800050, 0x00c00090, 0x00f000e0, 0x09400006, 0x8f00480c, 0xcf069f06, 0x40060306, 0x06481e1b, 0x20202b83, 0x2d081582, 0x18220606,
		0x222d128c, 0x3f2c0c8c, 0xa0030103, 0x09090109, 0x158f270f, 0x0f8f1d57, 0xed3f0058, 0x3911ed3f, 0x5dcd5d2f, 0xedd61001, 0x0c83de10, 0x5d2b2b27,
		0x715d2bcd, 0x117d452b, 0x65410120, 0x0b22470a, 0x34252d08, 0x2223022e, 0x1415020e, 0x3233021e, 0x3401023e, 0x201a191f, 0x1f191a20, 0x616bfafe,
		0x626a6a62, 0x44016b61, 0x222e1c0c, 0x0c1c2e22, 0x012d0787, 0x26261a41, 0x28281a1a, 0xa7a79c25, 0x2703839c, 0x28445b33, 0x335b4428, 0x00240786,
		0x4b000100, 0xb6300482, 0x10006b02, 0x26404200, 0x000c1802, 0x1228014d, 0x22080482, 0x4d000d20, 0x0a090000, 0x038b0506, 0x11120a0a, 0x088e0a05,
		0x10100055, 0x0056030b, 0x2f33333f, 0x43ed3fcd, 0xfd25069d, 0x32cd10cd, 0x08cc842f, 0x3636132d, 0x33113337, 0x33352115, 0x07030e11, 0x2960334b,
		0xb3fe753a, 0x251f0b86, 0xeb011328, 0xfd2f3d14, 0x014646db, 0x14150ab2, 0x82000612, 0x01220800, 0x00003900, 0x7902bd01, 0x90002c00, 0xff2c00b9,
		0x0c0bb4f0, 0xb82c4c00, 0x0b40e0ff, 0x4c000a09, 0x05831827, 0x0f832220, 0x96820f20, 0x11181d2f, 0x164c0012, 0x4d000f08, 0xe8ffb805, 0x200782b3,
		0x06804503, 0xe8250782, 0x4d0011b3, 0x06484702, 0xe8220782, 0x10821b40, 0x008c1a3a, 0x2e000b0b, 0x2d0f8c0a, 0x24102525, 0x2a8f1f24, 0x0d8e0a58,
		0xed3f0055, 0x2f2cc382, 0x2f332f01, 0x10edd610, 0x102f32ce, 0x340d1047, 0x020e1401, 0x15030e07, 0x26211521, 0x3e343534, 0x033e3702, 0x06894135,
		0x27075708, 0x3233033e, 0x19a40116, 0x0f1b3429, 0x01182428, 0x0189fe1d, 0x1b372c1c, 0x131f2916, 0x16261d11, 0x18212b1a, 0x20082906, 0x6120382d,
		0x20cd015d, 0x1b383a3c, 0x2a2c2a0f, 0x0b05460f, 0x40482a05, 0x2a161b39, 0x1b182d2a, 0x0e0c1926, 0x3a061314, 0x10171a09, 0x00820059, 0x3b00012f,
		0xba01f3ff, 0x32007902, 0x2eb5f400, 0x24f68228, 0xd8ffb827, 0x200785b3, 0x82e383d0, 0x4ae8200f, 0xd82507f2, 0x4d0008b3, 0x28208224, 0x001211b4,
		0xffb8214c, 0x200884e0, 0x066f481d, 0xe0200782, 0x07833283, 0x0a08b428, 0xb81c4c00, 0x4b83e8ff, 0x18840782, 0xffb81524, 0x648340f0, 0x0f180e28,
		0x054c0010, 0x19461018, 0x10052606, 0x014d000d, 0x250e8220, 0x0011102d, 0x0483154d, 0x55822220, 0x82294021, 0x222b080d, 0x1f1f8c10, 0x34258c03,
		0x09091717, 0x0922332f, 0x1a0a0a8e, 0x8f003030, 0x166f572a, 0x1602167f, 0x1a8f1316, 0xed3f0058, 0x835d2f32, 0x39112a04, 0x0139ed2f, 0x2f32c610,
		0x05324b32, 0x2b32ed24, 0x5e643031, 0x0b364b07, 0x372b2b39, 0x34353632, 0x2323022e, 0x3e323335, 0x26343502, 0x07062223, 0x48363627, 0x16270776,
		0x0e141516, 0x46222302, 0xba08057e, 0x1c434fd4, 0x15213c2e, 0x272f161d, 0x2b2a3f18, 0x1520143c, 0x46313455, 0x2833162d, 0x371b4630, 0x31173c57,
		0x1007212a, 0x3f3c4610, 0x1c2e2235, 0x1709430c, 0x2b331f28, 0x0f3f0d19, 0x3b2c1821, 0x12443123, 0x2843510e, 0x071c3245, 0x47030b0b, 0x00001608,
		0x24000200, 0xd2010000, 0x0e006b02, 0x6d001500, 0x0fc24240, 0x0105d301, 0x0105b203, 0x0105a202, 0xbc0114dd, 0x0214cc14, 0x050114ad, 0x8d140f14,
		0x00140500, 0x0d0f0500, 0x070a8b15, 0x16001708, 0x8e140007, 0x0c0d0d0a, 0xd00fb055, 0x0fa3020f, 0x56050f01, 0x5d333f00, 0x2f333f5d, 0x3232ed33,
		0x10c61001, 0x8232d5de, 0x05104509, 0x825d0121, 0x5d5f2d00, 0x30315d5f, 0x3e375d00, 0x11333703, 0x08052b46, 0x0e01212b, 0x24330703, 0x544a3b11,
		0x4949502b, 0x01ebfe50, 0x34371b15, 0xd6c5122d, 0x6b6f6828, 0x4477fe2b, 0x6b019e9e, 0x504d461d, 0x27b68227, 0x42000100, 0xba01f3ff, 0x2735b782,
		0x0c40b000, 0x000d2018, 0x11280c4d, 0x064c0012, 0xb3e8ffb8, 0x06bf4810, 0x07840f20, 0x0eb3f023, 0x05464300, 0x05241782, 0xb3e0ffb8, 0x20055643,
		0x201788d0, 0x241f840a, 0x0009b3f0, 0x0aaf4a4d, 0x2783e820, 0x40210f83, 0x08408224, 0x1622222b, 0x2329038c, 0x201b8b00, 0x1b100d0d, 0x1b281b01,
		0x1100008f, 0x56208e23, 0x8f110e0e, 0x3f005708, 0x3f2f32ed, 0x2f3912ed, 0x2af782ed, 0x322f325d, 0x1032ed10, 0x4433edde, 0xfb410533, 0x41132009,
		0xfc410dd8, 0x2e670805, 0x033e2302, 0x23152137, 0x86ba030e, 0x55371a7a, 0x2a2f183a, 0x10100720, 0x36283343, 0x39170f21, 0x07064b63, 0x01020305,
		0x0301e22a, 0x7c010404, 0x295b6c05, 0x071c3246, 0x47040b0a, 0x1f121608, 0x35221628, 0x4d2c1324, 0x46284849, 0x2e322d0e, 0x36000200, 0xc101f3ff,
		0x1a006e02, 0xc9002d00, 0xff2400b9, 0x821340f0, 0x181a27c9, 0x194d0008, 0x04821020, 0x000f282d, 0xffb8164d, 0x100fb4d8, 0x41154c00, 0x0782063a,
		0xfa83f020, 0x2a820f84, 0x17831120, 0xe24b0b20, 0x84092006, 0xb3d82107, 0x10201782, 0x8206ad43, 0xb3c02407, 0x824d0011, 0xb3e82207, 0x0667460c,
		0x000e0d2d, 0xffb8044c, 0x0e2640e0, 0x83034d00, 0x8c2b3e6c, 0x13060613, 0x8c210b2f, 0x00010010, 0x8f1b1e2e, 0x050e0e0b, 0x57188f26, 0x56058f06,
		0x06414600, 0x32ed3328, 0x5dd61001, 0xa84432ed, 0x05424112, 0x3e343728, 0x0e173702, 0x29430703, 0x020e2a07, 0x37262223, 0x06070622, 0x07384614,
		0x34354f08, 0x5b313626, 0x35075282, 0x0c2e4457, 0x34203918, 0x16142c49, 0x6732482e, 0x3520c566, 0x1b0b011b, 0x281e242e, 0xf8370b1a, 0x325e8b5a,
		0x15014601, 0x0b364a2f, 0x4635200e, 0x3b472225, 0x0cbb8a25, 0x0b130a0c, 0x1f354527, 0x152f2619, 0x7342403d, 0x3f210805, 0xc7010000, 0x0e006b02,
		0x12402500, 0x00008c0e, 0x098c0506, 0x090f0610, 0x56078e05, 0x3f005500, 0x31bc833f, 0xedde10c6, 0xed2f3912, 0x3e333031, 0x35213703, 0xab821521,
		0x29059b3a, 0xfe22463a, 0x1e8801d4, 0x062e3f46, 0x7f959f47, 0x23454829, 0x53a79376, 0x35051748, 0x01f3ff33, 0x007902c1, 0x002b001b, 0xb520013b,
		0x000e183a, 0xac42384d, 0x21078206, 0x0f82b3e8, 0x0f823320, 0x11284032, 0x2f4c0012, 0x4d001218, 0x0011282f, 0x0f30284d, 0x18210482, 0x2504820a,
		0x4d000928, 0x18822823, 0x82302321, 0x451f2018, 0x1b280722, 0xb3e8ffb8, 0x194d000d, 0x27820783, 0x18821520, 0x0785b320, 0x82b3f021, 0x270f8332,
		0x00083340, 0x0a200f4d, 0x08240483, 0x200c4d00, 0x0c272f82, 0x000a0938, 0x8308094c, 0x1806256f, 0x064d000b, 0x06221f83, 0x09830918, 0x01202482,
		0xb4204f82, 0x08822283, 0x2c40e022, 0x28081182, 0x260d290b, 0x1a39008c, 0x8c2c0036, 0x3d001717, 0x0d0d8c36, 0x3c088c1c, 0x1239391a, 0x29290b21,
		0x128f3103, 0x038f2158, 0x06ed4157, 0x11331132, 0x33113912, 0xedd61001, 0x10ed2f33, 0xed2f32ce, 0x39251082, 0x3911ed10, 0x11354839, 0x23094143,
		0x14252b2b, 0x4d09ab4d, 0x16210baa, 0x063a4805, 0x26343526, 0x13060627, 0x08085048, 0x3617166a, 0x63c10136, 0x2d4c3a65, 0x55283a13, 0x2b45301a,
		0x142c4732, 0xfe672336, 0x2e1c0cc2, 0x1d2d1f21, 0x2848520e, 0x190ce02c, 0x271d1c28, 0x443b0b1a, 0x4ea12d26, 0x3c311f60, 0x1952351d, 0x3e226330,
		0x2f1e1c2e, 0x4d351b39, 0x10733117, 0x11131e23, 0x3912241d, 0x4216103d, 0x210d0f01, 0x1b12131b, 0x47291021, 0x003c1610, 0x02310082, 0xfeff3300,
		0x7902bf01, 0x29001600, 0x00b9ad00, 0x05954424, 0xffb8242a, 0x0f0e40f0, 0x20204d00, 0x10250483, 0x164d000e, 0x231a82b8, 0x154d0008, 0x27097d43,
		0x0a2840e8, 0x18114d00, 0x08250484, 0x300c4d00, 0x21048212, 0x04821138, 0x820c1021, 0x0a182604, 0x0c4c000b, 0x05ad4410, 0x5d4fd820, 0x40e02206,
		0x3952821e, 0x008c1d07, 0x0f8c272b, 0x2a0f0404, 0x078f171a, 0x22030a0a, 0x0458148f, 0x0748038f, 0x39112e05, 0x32ed332f, 0x32c61001, 0x10ed102f,
		0x0fcb51de, 0x00822b20, 0x06140127, 0x36322707, 0x070d4f37, 0x33023e25, 0x82071632, 0x34362210, 0x094e4135, 0xb4bf012c, 0x897003b5, 0x203a1816,
		0x5b434835, 0x68662905, 0x1a3720c6, 0x2f1b0b01, 0x08055b43, 0xb9730137, 0x594601bb, 0x1f0d0b6d, 0x22264435, 0x8c263a47, 0x0a0b0cb7, 0x46270a12,
		0x25191f34, 0x3f3d152e, 0xff000000, 0xffb100ff, 0x014401f4, 0x002602d0, 0x01000011, 0x32058407, 0x40100043, 0x1100010b, 0x5000050c, 0x4f0e0801,
		0x84342b2b, 0xff7d242b, 0x82470170, 0x0036252b, 0x0000e80f, 0x01352b87, 0x37003100, 0xc601ca01, 0x6c000600, 0x18050b40, 0x024d0012, 0x3b048228,
		0xd0ffb800, 0x12111240, 0x10064c00, 0xbb4d0011, 0x08040105, 0x034d0013, 0xb6f0ffb8, 0xb4230782, 0x82010102, 0x4032080a, 0x4d001116, 0x00080106,
		0x05060703, 0x021f0100, 0x0202026f, 0x00000304, 0x32322f19, 0xcd185ddd, 0x18dd1019, 0xc61001cd, 0x32ce1032, 0x2b003031, 0x02822b71, 0x2b2b013a,
		0x0705372b, 0x17253525, 0x173d018d, 0x82017efe, 0x4583ff17, 0x45a447a4, 0x28050342, 0x0184002e, 0x008901c7, 0x3ca78203, 0x06134026, 0x00070901,
		0x03070408, 0xe00100a0, 0x003f0100, 0x2f000001, 0xcd715d5d, 0x245a89de, 0x21152137, 0x24038211, 0xfe99012e, 0x24038367, 0x050147cb, 0x89298247,
		0x407024df, 0x8230060b, 0x380621da, 0x0520b482, 0x8206e548, 0xb3d82107, 0x04200f82, 0x2b28cd83, 0xb34d0013, 0x10010104, 0xbb240782, 0x10000101,
		0x00222d82, 0xe2821130, 0x00080331, 0x1f050705, 0x02046f04, 0x01000604, 0x82060203, 0x333321e2, 0xe182dc82, 0xe28ae782, 0xe582e082, 0xe4822b20,
		0x05371331, 0x25270515, 0x82011731, 0x01177efe, 0x8481013d, 0x828320e3, 0x000231e4, 0x01f4ff5c, 0x0079029a, 0x0028001c, 0x1a00b97c, 0x23057449,
		0xf8ffb81a, 0x19208e83, 0x8206bc4a, 0xb3f02507, 0x134d000e, 0x0c200f83, 0xf0220784, 0x07840bb3, 0x2640e826, 0x0e4d000a, 0x0e21a383, 0x37a38318,
		0x951c1595, 0x2601010d, 0x2a202094, 0x9a231c29, 0x0c0c5c1d, 0x5a109b09, 0x56055f47, 0xce2209e4, 0xc74adcfd, 0x2737220b, 0x11444934, 0x15040e23,
		0x0afd5607, 0x01b93808, 0x302c352c, 0x1d391d2f, 0x2b4c1e17, 0x0f264133, 0x22282217, 0x271c1c17, 0x281b1c27, 0x2b13d328, 0x2336363f, 0x100e2e26,
		0x1c131140, 0x1e18342b, 0x29262a2f, 0x57df1d30, 0x28240d13, 0xd40179ff, 0x2d27f382, 0xc3003c00, 0x4a3b00b9, 0x3120068a, 0x82068b41, 0x83f02007,
		0xb82c25fc, 0x1f40f0ff, 0x282bdc82, 0x4d000e20, 0x0d0c1028, 0x83224c00, 0x082221e7, 0x2226e782, 0x000c0b10, 0x9345194c, 0x2d078206, 0x0009b3e0,
		0xffb8144d, 0x0010b3f8, 0x3b83134d, 0x000b3c26, 0x1218104d, 0x30830482, 0x0c080926, 0x10094d00, 0x06201382, 0x06200983, 0x20080983, 0x0073360e,
		0x3e001e1e, 0x7316082e, 0x7c3a3d25, 0x2a7c110b, 0x037c3345, 0x00207c1b, 0xeddefd2f, 0x2a03823f, 0xfdd61001, 0xce10cdde, 0x43102f32, 0x2b2313ee,
		0x43252b2b, 0x362607ea, 0x17163233, 0x824d2634, 0x17372109, 0x21066645, 0x1a82023e, 0x14071523, 0x2307821e, 0x26353736, 0x75082382, 0x1ed40106,
		0x3c231a3e, 0x4d60192d, 0x34080f08, 0x2a3a2339, 0x4f331818, 0x082b2837, 0x6b492d35, 0x41252245, 0x66583256, 0x211205cb, 0x0b14081d, 0x2b081109,
		0x090c3f2f, 0x344b3017, 0x0101615d, 0x4b224a3f, 0x753f5476, 0x430d3558, 0x886a410e, 0x5e946747, 0xa86a772d, 0x1b272e14, 0x03f50302, 0x00004302,
		0x00090002, 0x02eb0100, 0x000f006b, 0x40e40016, 0x184d1617, 0x10102d05, 0x18164d00, 0x4c000e0d, 0x00111014, 0x82055642, 0xb8122807, 0x19b3f8ff,
		0x83114d00, 0x841a2007, 0xb4e82507, 0x4c001211, 0xf0211082, 0x05a554b3, 0x0f40f022, 0x0d2a3783, 0x4d001e10, 0x000e100b, 0x2c83084d, 0x2205b954,
		0x824040f0, 0x83012045, 0x02400852, 0x09101113, 0x78031003, 0x04140904, 0x14010904, 0x10000a10, 0x0a0f7800, 0x0a0f0f14, 0x8f041010, 0x180f010f,
		0x02011704, 0x13131479, 0x090a1003, 0x44030441, 0x0044000f, 0x333f323f, 0x1233333f, 0x30076845, 0x115dce10, 0x872f3d39, 0x872b1018, 0xc410c47d,
		0x260987c4, 0xc405c40e, 0x523031c4, 0xdd460769, 0x215d0807, 0x23072327, 0x3337033e, 0x0317031e, 0x33070606, 0x94012626, 0x5424ee25, 0x36312a11,
		0x351d661e, 0xf2112a2f, 0xc8183617, 0xa2a23517, 0xa3a29a42, 0xa2a34a4a, 0x2302429a, 0x5a58a63f, 0x000000a7, 0xff360003, 0x02c301fb, 0x001a0071,
		0x00380029, 0x7b51407a, 0x326a0132, 0x012e7901, 0x0802826a, 0x267a2645, 0x7b226b02, 0x19850222, 0x95021995, 0x16810117, 0x01139401, 0x90011385,
		0x0e14010e, 0x05020e84, 0x3015010e, 0x24101076, 0x2a3a1876, 0x0510731b, 0x15390501, 0x2a2a791b, 0x0b7c351f, 0x007c1f41, 0x553f0043, 0xed210579,
		0x06ac4939, 0x33edde28, 0x3132ed2f, 0x008c5d30, 0x2e221727, 0x3e112702, 0x05d14c03, 0x07020e2b, 0x14151616, 0x16150306, 0x08f44a16, 0x09882720,
		0x06227a08, 0x280fcc07, 0x0f0f2828, 0x10272927, 0x213b502e, 0x1321190e, 0xc5764533, 0x1f1f2902, 0x191b2c39, 0x541d3629, 0x28321941, 0x2f241618,
		0x08271a1a, 0x06030205, 0x04580204, 0x10020306, 0x162e3e26, 0x071b2429, 0x5c3c4b0e, 0xdd26015e, 0x1b0a0301, 0x2a1f232c, 0x0a440b19, 0x1b1d2616,
		0x010a1826, 0x00010002, 0x01f3ff2e, 0x007902cc, 0xb9b70020, 0xf0ff1b00, 0x4d0012b3, 0x06ad441b, 0x974f0782, 0x43162005, 0x07820685, 0x094bf020,
		0x83e02006, 0xb8152528, 0x11b3e8ff, 0x2805ab47, 0x000c0bb7, 0x0115284c, 0x8213830f, 0x20078244, 0x821b83c8, 0x40e02d07, 0x00100e0b, 0x0d18054c,
		0x014c000e, 0x2309f056, 0x1110b4e0, 0xe8391084, 0x000f1740, 0x0010104d, 0x08761822, 0x13111121, 0x20450d7c, 0x037c1d20, 0x05e44446, 0x2f32ed23,
		0x06ab4f01, 0x20080649, 0x0720425d, 0x2608ad43, 0x3233023e, 0x43071716, 0x39080aae, 0xcc013736, 0x372d4f23, 0x2927445d, 0x25355e46, 0x4218254d,
		0x2e41293a, 0x43301b19, 0x22401d27, 0x2713141a, 0x4f537a4f, 0x142a5278, 0x23264417, 0x40395c42, 0x0f1e3e5e, 0x00820013, 0x36000238, 0xcc01fbff,
		0x0e007102, 0x45001c00, 0x28180d40, 0x4c001211, 0x05831813, 0xc5830c20, 0x4d000d23, 0x21078203, 0x08821640, 0x00761631, 0x10730f1e, 0x1d070107,
		0x410a7c19, 0x42057c11, 0xb7820514, 0x10ed5d23, 0x069945de, 0x0e14012d, 0x27222302, 0x32333611, 0x4101021e, 0xb08206f5, 0x07063a08, 0x4b2bcc01,
		0x3f3e3c67, 0x673c3e3f, 0xbcfe2b4b, 0x462d1a19, 0x5f611a30, 0x010a190d, 0x4b785636, 0x58020f22, 0x784c220f, 0x1b03bafe, 0x7e415d3b, 0x00020176,
		0x00010000, 0x0804825b, 0x6b02cc25, 0x36000b00, 0x07071d40, 0x0d0a0303, 0x00730905, 0x02001000, 0x79080c00, 0x04090505, 0x09410179, 0x42440079,
		0x4f4c08a3, 0x2f322c09, 0x11333031, 0x15211521, 0x82231533, 0x015b2f05, 0xe8f7fe5b, 0x021f01e8, 0x46be466b, 0x5f8646db, 0x5f82ba20, 0x2f000928,
		0x06061940, 0x5d880b03, 0x5d830a20, 0x5d830020, 0xe84d5b83, 0x07aa4c07, 0x1127588a, 0xfe5f015b, 0x82ededf3, 0x45c12354, 0xb682e1fe, 0x2e355782,
		0xc701f3ff, 0x25007902, 0x00b9a200, 0xb4e0ff20, 0x4c001211, 0x060e4720, 0xf0220782, 0xf6530bb3, 0x42102006, 0x07820690, 0x5b421a20, 0x24078206,
		0x0011b3e0, 0x2d07824d, 0x0c0bb4e8, 0xb8124c00, 0x12b3e0ff, 0x07824d00, 0x1883c020, 0x2c080782, 0x0d2640e8, 0x074c0010, 0x4d000e18, 0x000d1007,
		0x0014144d, 0x1d270173, 0x00260a76, 0x15152200, 0x450f7c18, 0x057c2225, 0xed3f0046, 0x06aa5032, 0xd6100123, 0x13a14eed, 0x11330122, 0x240bfd49,
		0x0717021e, 0x0d664226, 0x52753808, 0x38395413, 0x2824415c, 0x22355c45, 0x06182534, 0x233f171b, 0x1a2e4126, 0x2a412c17, 0x0108201d, 0x07defe31,
		0x79522b15, 0x52784e4d, 0x0f0e0a2b, 0x17124504, 0x825d4224, 0x25422934, 0x00000408, 0x2d000100, 0x2c080482, 0x006b02c7, 0x4031000b, 0x73030b1a,
		0x060a0d02, 0x050c0773, 0x1f0a0f79, 0x0a0a020a, 0x41080007, 0x00440703, 0x333f333f, 0x5d2f3912, 0x20af83ed, 0x05b54a32, 0x2321a282, 0x27018311,
		0x01331133, 0xf6525275, 0x022b0282, 0x0195fd6b, 0x02e0fe20, 0x82fbfe6b, 0x5900215a, 0x9b200482, 0x2b365f84, 0x05081540, 0x01020b06, 0x0c060673,
		0x7907000d, 0x06014109, 0x5a820479, 0x3f32ed22, 0x2906e053, 0x1032cdfd, 0x303132cd, 0xd8531101, 0x35233605, 0x23011521, 0x78befe78, 0x02420178,
		0x4621fe25, 0x46df0146, 0x24b78246, 0x01f3ff36, 0x315782a4, 0x404a0013, 0x0f181017, 0x0a4c0010, 0x4d000e18, 0x5b82200a, 0x0b3f0a82, 0xb8054d00,
		0x1640f0ff, 0x4c001211, 0x15037312, 0x140b0000, 0x7c0f0c0c, 0x79004608, 0x53004101, 0x10230690, 0x432f32c6, 0x36080829, 0x2135132b, 0x020e1411,
		0x27262223, 0x33161637, 0x11353632, 0x1325017f, 0x3c3c4f2f, 0x13211352, 0x3f402a3f, 0xfe462502, 0x394e2c5c, 0x43102221, 0x5144200e, 0x82005601,
		0x00012300, 0x23470040, 0x16490805, 0x37406100, 0x03521e03, 0x090e0900, 0x14030878, 0x16030808, 0x78030003, 0x13141613, 0x00001613, 0x0e131808,
		0x10100073, 0x17100210, 0x13411600, 0x1003030e, 0x44104111, 0x00440908, 0x3f3f333f, 0x2f193912, 0x3f183333, 0x09324333, 0x0805b851, 0x10188749,
		0x2b08872b, 0x013031c4, 0x1e070606, 0x2e231703, 0x23112703, 0x36113311, 0xd6013736, 0x20447531, 0x153d4548, 0x413a195d, 0x52522345, 0x022d7741,
		0x4890496b, 0x6055481b, 0x4c582e32, 0xd8fe173f, 0xecfe6b02, 0x433f9243, 0x05340bc3, 0x11402000, 0x73050700, 0x02100200, 0x03060202, 0x02790541,
		0xed218982, 0x267f843f, 0x3031ce10, 0x82211525, 0xcc012a64, 0x46528ffe, 0xfd6b0246, 0x203f83db, 0x29048220, 0x006b02d4, 0xb9f9001a, 0xf2471a00,
		0xb81a2105, 0x13220782, 0x07824d00, 0x0ab3e025, 0x82184d00, 0x1a403b0f, 0x4c001c1b, 0x00100818, 0x0e08174d, 0x0d044d00, 0x010c0c01, 0x001b0803,
		0x1e82034d, 0x110fb424, 0x08824c00, 0x4e40f022, 0x01211c82, 0x08358238, 0x01013d2f, 0x0c01012c, 0x7b010001, 0x0b140c0b, 0x060b0c0b, 0x25011a36,
		0x1a0d011a, 0x0e7b1a00, 0x0e0e140d, 0x1300000d, 0x18027306, 0x024d001d, 0x385f8320, 0x001a1802, 0x01020b4d, 0x02010246, 0x130e1c05, 0xffb81973,
		0x1a1a40e0, 0x3d5c821d, 0x14190119, 0x411a0e1b, 0x01000f0c, 0x060d0d00, 0x010b4414, 0x333f0041, 0x2f33333f, 0x105b7133, 0x71322d05, 0x1032ed2b,
		0x715d32de, 0xed2b2b2b, 0x250a2b48, 0x115d5d01, 0x37488733, 0x460b8205, 0x71200509, 0x28822583, 0x3313132e, 0x23171216, 0x0327032e, 0x030e0323,
		0x08053248, 0x4d60fb3b, 0x50071114, 0x03030201, 0x5c485a02, 0x03030301, 0x08035001, 0x4c090f0b, 0x34013701, 0xa7cefe92, 0x8a867e36, 0x01e6fe41,
		0x8789411a, 0xa04c367e, 0x00479a9e, 0x00010000, 0x08048237, 0x6b02bd36, 0x4e001100, 0x001a3040, 0x01000d01, 0x04010926, 0x02091409, 0x00050009,
		0x14090e7e, 0x730e090e, 0x73051311, 0x01010710, 0x12070107, 0x0905410f, 0x0e440741, 0x8205f448, 0x100128d4, 0xed5d5dd6, 0x5ffdde10, 0x5d20050a,
		0x31220082, 0x29422130, 0x1e500806, 0x33111703, 0x22690111, 0x1c36373c, 0x3d29544b, 0x4b1e3033, 0x69768753, 0x0212fe35, 0x69704b6b, 0xdc01496f,
		0x000095fd, 0xff1d0002, 0x02d801f3, 0x00130079, 0xb99a001f, 0xe8ff1e00, 0x4d000eb3, 0xf0ffb81e, 0x000d1040, 0x0d181c4d, 0x184c000e, 0x16210584,
		0x821c85b8, 0x40f02207, 0x2b1c820f, 0x100f1811, 0x18114c00, 0x0d4d0008, 0xb4201b82, 0x08830d83, 0x1082b320, 0x10870720, 0xf8220882, 0x11822340,
		0x2d840320, 0x2d830320, 0x0a761a39, 0x00761421, 0x48100b40, 0x7c172000, 0x7c1d460f, 0x3f004505, 0x82ed3fed, 0x462b20d6, 0x855009d2, 0x5e132009,
		0xa5550822, 0x37200805, 0x32331614, 0x26343536, 0x1d062223, 0x32513a20, 0x213a5231, 0x31523a21, 0x203a5132, 0x46454254, 0x45370082, 0x53360142,
		0x27274f7a, 0x53537a4f, 0x2626507a, 0x7a537a50, 0x827a8282, 0x82002003, 0x00023b00, 0x01000049, 0x007102c7, 0x001a0010, 0x1a11405a, 0x4d001010,
		0x000f181a, 0xaa84174d, 0xe820b982, 0x0220ca83, 0x4021ca82, 0x3cc18220, 0x1c057619, 0x730a1515, 0x0b100b00, 0x08030b20, 0x79091b0b, 0x0b001515,
		0x007c1144, 0x22be8341, 0x832f3912, 0x5d5e22c1, 0x0c6d44ed, 0x2b05da5e, 0x23152323, 0x17033e11, 0x15070622, 0x3c08bb84, 0x375337eb, 0x4872721b,
		0x2b2b1252, 0x301a1729, 0x494b440c, 0x331c7102, 0x69612b46, 0x046202e7, 0x47010406, 0x3cfa0201, 0x02007c45, 0x5bff1d00, 0x7802d801, 0x28001c00,
		0x00b9cf00, 0x058a4127, 0xffb8272b, 0x0d1840e0, 0x10254d00, 0x2004820e, 0x20098220, 0x20098321, 0x24138321, 0xf0ffb81f, 0x821682b3, 0x40e82207,
		0x2e1a821f, 0x100f281b, 0x081b4c00, 0x1b4d000c, 0x820a0910, 0x8218200a, 0x830d20d5, 0x0bb64135, 0x830a4021, 0x10072126, 0x07203182, 0x33205f83,
		0x03272482, 0x4d001018, 0x820f2003, 0x3d338304, 0x1a1a760f, 0x0a762300, 0x2a0a1414, 0x4000761d, 0x0048100c, 0x157c1429, 0x0f1a7c20, 0xcc412646,
		0xed332206, 0x06cf41dc, 0x2f32ce26, 0x3911ed10, 0x41171c60, 0x07290bdc, 0x0717031e, 0x2627032e, 0x14e24126, 0x44301a30, 0x2b1c0329, 0x29131e37,
		0x072a3c4b, 0xeb415e51, 0x41352009, 0x4a3207eb, 0x072e5071, 0x0e151d14, 0x16074204, 0x11263424, 0xf641939b, 0x00022707, 0x01000037, 0xaf4b02cf,
		0x40652405, 0x8220283d, 0x832320d7, 0x830220dc, 0x09032209, 0x07cc450c, 0x000c0c3e, 0x76250808, 0x111f2b00, 0x10120073, 0x2a120212, 0x7910030c,
		0x1b121f1f, 0x1241187c, 0x2108c745, 0xd78212ed, 0x4b323221, 0x11210a9b, 0x08935c33, 0xe3510120, 0x25d48206, 0x27262623, 0x04422206, 0x32332306,
		0x07422716, 0x05cf6305, 0xaf016108, 0x250f333c, 0x58102526, 0x0621471e, 0x53460417, 0x2829270f, 0xda717010, 0x35092b17, 0x16293924, 0x01312416,
		0x185739ae, 0x49453d18, 0x29844823, 0x6202f401, 0x02030604, 0x02011b62, 0x2f1b0aef, 0x1b2e2426, 0x0001000b, 0x01f3ff37, 0x007902bd, 0x40d80031,
		0x0e182c0b, 0x102c4d00, 0x274d000d, 0x8206fb4e, 0xb3f02907, 0x244d0009, 0xb3f0ffb8, 0x07821782, 0x0ab3d025, 0x83234d00, 0x000f230f, 0x27831b4d,
		0x2505fd48, 0x0012b3e0, 0x1549144d, 0x21078206, 0x1782b3f0, 0xe0250782, 0x00100fb4, 0x2818844c, 0x134d000e, 0x40e0ffb8, 0x2d08823e, 0x0f0e100b,
		0x200b4c00, 0x4c000a09, 0x2a821002, 0x82280121, 0x1524083f, 0x26760315, 0x1c2e2e33, 0x100d0076, 0x320d020d, 0x08010859, 0x10211929, 0x7c002f2f,
		0x16164629, 0x45107c19, 0x2908884b, 0x12113911, 0x10015d39, 0x05655dd6, 0x13995407, 0xcb593720, 0x05036505, 0x49323321, 0x01650731, 0x07c7590a,
		0x3fea5508, 0x32281842, 0x2b371e1a, 0x195b6619, 0x0a212a31, 0x2b46141a, 0x2113422d, 0x3f261a2c, 0x666d192d, 0x222d3a21, 0x4e141909, 0x1d30303a,
		0x0a171f29, 0x36281e0c, 0x075b5125, 0x45070e0a, 0x2d2d180c, 0x161b241a, 0x2c20100b, 0x57512b3c, 0x060e0e09, 0x001d0b44, 0x013d0082, 0x00002700,
		0x6b02cd01, 0x20000700, 0x03010f40, 0x04040673, 0x05020809, 0x04410779, 0x059c5644, 0x2f29ca82, 0x31cefdce, 0x23150130, 0x2d018211, 0xaacd0135,
		0x6b02aa52, 0x02dbfd46, 0x3e824625, 0xff300025, 0x82c401f3, 0x00193843, 0x0f0d404a, 0x00121120, 0x0f100f4c, 0x0b4c0010, 0xb3d8ffb8, 0x824d0012,
		0xb3e02207, 0x22078411, 0x831340f0, 0x73123419, 0x73081b15, 0x06131a05, 0x007c0d41, 0xed3f0046, 0x4a01333f, 0x2a410559, 0x22172806, 0x1135022e,
		0x5d141133, 0x0a8405d6, 0x020e2c08, 0x304d37fa, 0x1f115216, 0x2c1c1c2c, 0x1652111f, 0x200d4d30, 0x0134543a, 0x2f73fe96, 0x1010263f, 0x012f3f26,
		0x346afe8d, 0x82203a54, 0x010027de, 0x00000d00, 0x9b82e801, 0x00162708, 0x05234041, 0x000a0500, 0x14111678, 0x05111616, 0x0b780a0a, 0x100b1410,
		0x1716180b, 0x10411600, 0x0a441105, 0x6847410b, 0x2c8c8305, 0x87de10c6, 0xc4107d2b, 0x2b101887, 0x08078208, 0x1330313d, 0x3e17031e, 0x0e333703,
		0x2e230703, 0x0c662703, 0x122a2925, 0x252a2b10, 0x2408560c, 0x66213d32, 0x24323b1f, 0x3f6b0209, 0x33889595, 0x94958a33, 0xa787283e, 0xba5a5abb,
		0x482888a7, 0x142a0b83, 0x00b9df01, 0xb3e0ff13, 0x86500019, 0x84172005, 0x40f02307, 0x08821418, 0x82122821, 0x11182104, 0x10210482, 0x28048210,
		0x4d000d28, 0xf8ffb812, 0x280785b3, 0x0b1440e8, 0x0a4c000c, 0x213b8220, 0x3882100a, 0x15100a26, 0xb80a4d00, 0x82054745, 0x83f02007, 0xb8092328,
		0x5d83f0ff, 0x402c0783, 0x4d001723, 0x0e0d2009, 0x10014c00, 0x012a4482, 0x4d000c28, 0x000b1001, 0x4483004d, 0x44830020, 0x4cb80021, 0x0882065d,
		0x82b3e821, 0x22078276, 0x820fb3e0, 0x20798322, 0x2007840e, 0x235883c8, 0xb0ffb814, 0x07825883, 0x18b3d024, 0x07824d00, 0x82b3a021, 0x2007845f,
		0x210f8415, 0xc582b3b0, 0x90220f82, 0x0f8413b3, 0x82b39821, 0x270f823f, 0x0d0940d0, 0x580b4d00, 0x0b221582, 0x0d82ffb8, 0x08211682, 0x200d8238,
		0x21bc8208, 0x0d825e40, 0x06013d08, 0x08010807, 0x08077806, 0x07080714, 0x01127c08, 0x1201126e, 0x120b0c0d, 0x0c780d0b, 0x0b0c140b, 0x521f0a0c,
		0x7b131413, 0x0b140a0b, 0x1f090a0b, 0x00140052, 0x1409087b, 0xbb090808, 0x15373a82, 0x0b010bb4, 0x15141416, 0x44130b16, 0x14410c0d, 0x0709090a,
		0x48084106, 0x3325056d, 0x33332f33, 0x2801823f, 0x39121101, 0x39122f3d, 0x2602825d, 0x2b101887, 0x86c42b87, 0x18013106, 0x102b87d5, 0x0587c100,
		0x01c4107d, 0x10187171, 0x31210f8a, 0x20421830, 0x642b2008, 0xa05d0a87, 0x270d850d, 0x032e2333, 0x13133327, 0x32080283, 0x2307030e, 0x094d9903,
		0x03080b0d, 0x485a0b50, 0x03500b5c, 0x080e0c09, 0x933d614c, 0xfd53a8a0, 0xfe1a01fb, 0x540502e6, 0x3e929fa8, 0x00003401, 0x82190001, 0xdb470804,
		0x15006b02, 0x41406c00, 0x080e1512, 0x10090f11, 0x090c0e15, 0x05000d10, 0x000d1108, 0x10091008, 0x14081178, 0x11110811, 0x000d0115, 0x0e150e00,
		0x14000d78, 0x15000d0d, 0x090d0d17, 0x41101116, 0x09410d0e, 0x52154408, 0x3f21085d, 0x05c15733, 0x9d4bce20, 0xc40e2c06, 0x18331101, 0x872b872f,
		0x820fc47d, 0x05754900, 0x06063a08, 0x36362307, 0x17330337, 0x16033337, 0x80011716, 0x27221e0b, 0x1e462315, 0x32582159, 0x82795ba1, 0x5a30a459,
		0x48441b23, 0x91381f48, 0x50ad4a45, 0xeded2401, 0xa84edffe, 0x0d6f4354, 0x00102b08, 0x0829404d, 0x0b05080b, 0x140f0c78, 0x0f0c0f0c, 0x05080173,
		0x01047805, 0x04010414, 0x12110101, 0x0f410b0c, 0x05010108, 0xa3834104, 0x39333f24, 0x9b413311, 0xdd2f2a06, 0x107d2b87, 0x101801c4, 0x430982fd,
		0x3325057b, 0x27262635, 0x82918233, 0x8233209d, 0xd2153da5, 0x5c25633d, 0x2e2b4b1d, 0x265a1d47, 0x64e63c62, 0x995463be, 0x50995551, 0xe867ba62,
		0x36218b85, 0x057b5b00, 0x37001129, 0x0e051d40, 0x5e780e09, 0x0630058c, 0x0f130006, 0x0012090f, 0x4110790e, 0x08790509, 0x2608d34d, 0x2f32c610,
		0x4632ce10, 0x2f0809f7, 0x2107030e, 0x3e352115, 0x35213703, 0x20bf0121, 0x1d4d524f, 0x6ffe3301, 0x4e4e4b1f, 0x01e5fe24, 0x2c2b027a, 0x37858479,
		0x853f3646, 0x46337880, 0x2c087882, 0xff8f0001, 0x027e015b, 0x000700bb, 0x020b401b, 0x07040502, 0x03070408, 0x3f005a00, 0x01cd2fcd, 0xcdddd610,
		0x30312f32, 0x23153313, 0x2e038211, 0xa1a1ef8f, 0x41bb02ef, 0x004122fd, 0x82460001, 0x82ae203b, 0x0003373b, 0x01104021, 0x8d030003, 0x02140102,
		0x03000201, 0x00000102, 0x2a64322f, 0x872b2305, 0x4183c47d, 0x4623012e, 0x54150153, 0xa0fcbb02, 0x76000100, 0x65203b82, 0x05297787, 0x00030205,
		0x5a070409, 0x21368203, 0x77893fcd, 0x35230524, 0x03821133, 0x83650121, 0x41a52378, 0x7783de02, 0x19012836, 0x6b02cc01, 0x41000600, 0xff0400b9,
		0x0e2140f0, 0x10024d00, 0x03270482, 0x4d001038, 0x820f3003, 0x82202004, 0x0504210e, 0x032c8982, 0x06030402, 0xcd332f00, 0x2f190132, 0x21050958,
		0x1f43cd18, 0x2b013b05, 0x0713012b, 0x13270727, 0x42ad1f01, 0xad429090, 0xd0fe6b02, 0x22fcfc22, 0xa3823001, 0xa3820820, 0xa1ffec28, 0x0f000300,
		0x058201b4, 0x10000434, 0x2f01cdde, 0x1730312f, 0x08211521, 0x1cfee401, 0x2782465f, 0x0602a326, 0xb5024a01, 0x18222182, 0xfc830940, 0x80000324,
		0x72820201, 0x73821a20, 0xfe827883, 0x07173a08, 0x2a72d827, 0x8ab5027d, 0x00007a25, 0xff3a0002, 0x01b001f5, 0x000e00db, 0x40730030, 0x12182816,
		0x181f4d00, 0x4c000b0a, 0x000b201b, 0x0a181b4d, 0xb8124d00, 0x0ab4e8ff, 0x050e510c, 0x0908b425, 0x820a4c00, 0x40260811, 0x00121124, 0x7f24044c,
		0x2e2e3214, 0x311d820c, 0x22008907, 0x08022210, 0x000f2222, 0x2d511888, 0x0f882a2d, 0xad5f0050, 0x39112305, 0x57505e2f, 0x2f332105, 0x210c0e5b,
		0xe6563237, 0x020e2906, 0x13161415, 0x15021e32, 0x240c1351, 0x2e343517, 0x06b06102, 0x1fff5008, 0x2d101031, 0x222c1719, 0x342c3d16, 0x1d122c47,
		0x4826325f, 0x37232238, 0x2f312447, 0x222b1909, 0x0a11402b, 0x043b4f11, 0x06058a03, 0x161d1207, 0xa001232d, 0x27422e1a, 0x0e05defe, 0x2d3a210d,
		0x0f223728, 0x2715170b, 0x060c1320, 0x820c0844, 0x824720ff, 0x02cc32ff, 0x001200b5, 0x407e0021, 0x10301c2a, 0x201c4d00, 0x2404820f, 0x4d000e18,
		0x210e8317, 0x0e823817, 0x0d181723, 0x20f7820e, 0x211e8210, 0xef60180a, 0xb3e82205, 0x05805008, 0xd760b320, 0xe8240805, 0x00091d40, 0x0882194d,
		0x7f130023, 0x08011000, 0x12112210, 0x0d88164d, 0x881e2151, 0x00500300, 0x32ed333f, 0x2306b447, 0x32ed5d5e, 0x45099350, 0x13200500, 0x240c685f,
		0x11371127, 0x05e84c16, 0x08050041, 0x390f9a3e, 0x334a2f23, 0x523a201b, 0x1a563732, 0x11261353, 0x1e0e4e45, 0x361d212f, 0x09bf010e, 0x59402413,
		0x3f5a3836, 0x02081022, 0x93fd0e9a, 0x55550505, 0x1a2d3f24, 0x00000d17, 0x31000100, 0xc322e782, 0xe582db01, 0x00b94326, 0xb4e0ff14, 0x2108ce83,
		0xe0ffb80e, 0x0e0d1d40, 0x08084c00, 0x8211231a, 0x001f000f, 0x19220002, 0x1d881619, 0x0c090951, 0xbf410588, 0x2f322807, 0x5dd61001, 0x65ce10ed,
		0x37210599, 0x07145534, 0x200cae52, 0x05cd5217, 0x28313808, 0x22355d46, 0x21132643, 0x40241c37, 0x2f1a1c2f, 0x3b202842, 0x48230c23, 0x435d382a,
		0x5c3fe725, 0x0c091d3c, 0x13070c47, 0x2c2e4129, 0x0714293f, 0x0b0d450c, 0x825b3c1f, 0x8228207c, 0x02ad24a7, 0x820e00b5, 0x40612fa9, 0x0f201c12,
		0x1b4c0010, 0x4d000a10, 0x7942181b, 0xb3d82506, 0x0a4d000e, 0x2006c44a, 0x21078205, 0x10821e40, 0x7f0e213a, 0x82082311, 0x0c094019, 0x00221948,
		0x1e218803, 0x14880b50, 0x4d100f51, 0x2205c16c, 0x8232ed33, 0xed2b21c3, 0x200b7e42, 0x076e5301, 0x32331626, 0x37113736, 0x080c7a42, 0x0117163d,
		0x1d360e5a, 0x0e1e2f21, 0x2b1f3d4c, 0x541b530a, 0x3a523238, 0x49341b20, 0x0e38252f, 0x170d6e01, 0x243f2d1a, 0x03065851, 0xfd0e5f02, 0x22100858,
		0x36385a3f, 0x12244059, 0x8600000a, 0x01c724cb, 0x821800db, 0xb9cf23cb, 0xff611e00, 0xb81e2506, 0x0e40e0ff, 0x1b22b282, 0xd6821018, 0x000f1022,
		0x82059c5e, 0x8316200c, 0x830920cd, 0x08102410, 0x82124d00, 0x82b3200d, 0x8211200c, 0x24078330, 0xe8ffb807, 0x822582b3, 0x86d02007, 0x05c7410f,
		0x18830220, 0x4d000922, 0xe0210782, 0x053160b3, 0x12b3d828, 0xb8014d00, 0x446cd0ff, 0x40250807, 0x4d000a23, 0x0c048219, 0x2123040c, 0x40148205,
		0x14480c09, 0x21860522, 0x0b0b0021, 0x510f8808, 0x5000881c, 0x05325300, 0x2f391122, 0x2005bd4d, 0x181d6232, 0x1632012b, 0x16211515, 0x36323316,
		0x06f64137, 0x3e343523, 0x06d55a02, 0x01074d08, 0xfe665e03, 0x4d5505b4, 0x0b103e2c, 0x3c314e0f, 0x261e3c5b, 0x3e994e3e, 0x222f1d33, 0xdb010314,
		0x481d7775, 0x46080e4b, 0x40251208, 0x5c3e3459, 0x3bc61e3c, 0x2e241645, 0x00010018, 0x0100003f, 0x00b502e2, 0xb956001b, 0xf0ff1400, 0x1325c283,
		0x40e0ffb8, 0x26d3822a, 0x000c1007, 0x8218074d, 0x0d0d3ecc, 0x1a171d19, 0x0001047f, 0x02080102, 0x110e0e1c, 0x1a4d0a88, 0x04178501, 0x004a0049,
		0x056d433f, 0x012f3228, 0x5d5ed610, 0xe96232d5, 0x05284b05, 0x23113324, 0xae833335, 0x4205d857, 0x2d0805c3, 0x23153315, 0x6262a111, 0x2441311e,
		0x0f204924, 0x15224216, 0xbb101c25, 0x458b01bb, 0x2c47362a, 0x470b1012, 0x1b0b100b, 0x4529222d, 0xdf4175fe, 0x01583905, 0x00db01ad, 0x002d001e,
		0x2800b9c2, 0x10b3e0ff, 0xb8284d00, 0x0fb3e8ff, 0xf0280784, 0x4d000eb3, 0xd0ffb823, 0x07821783, 0x1783d820, 0x17870782, 0x0db3e822, 0xf0271f84,
		0x000c0940, 0x82181c4d, 0xb812263d, 0x11b4f0ff, 0x0d6b4512, 0x3940f032, 0x4c00100f, 0x0009100a, 0x08180a4d, 0x18064d00, 0x06210982, 0x3f098220,
		0x117f1e2d, 0x0882252f, 0x2e081717, 0x030f882a, 0x0802031f, 0x182e0303, 0x14881b18, 0x0d88224b, 0x2008d241, 0x05804533, 0x581a9060, 0x11220ef0,
		0x24550614, 0x0868720b, 0x32336608, 0x5a013736, 0x29263a0e, 0x1d1f3547, 0x3c335037, 0x6e6d1d55, 0x0f1c492d, 0x4828431a, 0x242a0c3e, 0x21134340,
		0x371f182a, 0x12082b11, 0x3a55371b, 0x233e5533, 0x62fe0811, 0x0a0e606c, 0x3a0e0b49, 0x046c0141, 0x28495807, 0x12112539, 0x0001000c, 0x01000047,
		0x00b502b0, 0x40600015, 0x12201015, 0x28104d00, 0x21048211, 0x04821018, 0x000f1028, 0xffb8094d, 0xec82b3d8, 0xffb80827, 0x000ab3e8, 0x2c07824d,
		0x091a40d8, 0x7f0d4d00, 0x1503170c, 0x2c3f827f, 0x11160008, 0x01500688, 0x000d4d02, 0x051c5c4a, 0x45078e51, 0x33230b67, 0x45153711, 0x11210666,
		0x05425223, 0x11072208, 0x32145347, 0x2a473518, 0x3e305212, 0x020b311a, 0x08ec0ea7, 0x4e381f09, 0xf4fafe2f, 0x050b4756, 0x3a6082fe, 0x00020000,
		0x01f5ff36, 0x009e02c2, 0x0021000b, 0x1f294044, 0x000d0b18, 0x82281f4c, 0x1f210890, 0x4d000920, 0x0f098303, 0x0d0c0c7f, 0x220d2317, 0x88131616,
		0x8a06511c, 0x0f850c00, 0xed3f0049, 0x051b6ade, 0x10c61028, 0x2f3911ce, 0xb759d4fd, 0x5f132005, 0x07250a33, 0x11333523, 0x054f4314, 0x030e2608,
		0x022e2223, 0x261ad135, 0x251b1a26, 0xd8863025, 0x311d2626, 0x16060c0e, 0x2c13231d, 0x020e233a, 0x1f1f2418, 0x30038324, 0xe3fe458d, 0x080e2f45,
		0x08090346, 0x47301806, 0x24a7822f, 0x0156ff47, 0x3ea78480, 0xb939001f, 0xe8ff1100, 0x0a091c40, 0x83094c00, 0x7f1e0303, 0x1717210f, 0x1b18200c,
		0x82521488, 0x851f229f, 0x4a9f880e, 0xde2305ec, 0x832f32ed, 0x8b01209e, 0x1134579c, 0x86340121, 0x01dd2f9d, 0x3b2d1b0e, 0x224d2621, 0x1c3d1919,
		0x9b8c3428, 0x4330352e, 0x1110122a, 0x29110c46, 0x0087013b, 0x0805eb41, 0xb502de42, 0x65001600, 0x00063640, 0x0b810005, 0x000b1406, 0x13060b14,
		0x13140010, 0x10810014, 0x13101413, 0x14141000, 0x0b101805, 0x010d007f, 0x0b170d08, 0x49140510, 0x0d4d0f0e, 0x4a06054a, 0x3f333f00, 0x12270282,
		0x10013939, 0x435d5ed6, 0x102305d8, 0x4c0487c1, 0x872c0885, 0x2b101808, 0xc47d0587, 0x1e373031, 0x24054457, 0x37112315, 0x05074b11, 0x1bee2908,
		0x123c4344, 0x3f381362, 0x5353193f, 0x612c6e37, 0x14ff792b, 0x1f49463d, 0x323c411f, 0xa702df11, 0x3059fe0e, 0x6c33335f, 0xf341af82, 0x00b02e05,
		0x40450017, 0x0e18032c, 0x20034d00, 0x2104820d, 0x04820c18, 0x830b2021, 0x00093504, 0x067f094d, 0x19130706, 0x85061807, 0x12124d09, 0x5100880f,
		0x2006f848, 0x06f24101, 0x2905f041, 0x22052b2b, 0x1135022e, 0xa44f3523, 0x36260806, 0x030e1737, 0x3a2c5201, 0xd8860e22, 0x131c1309, 0x0c0e321d,
		0x231e1606, 0x4730180b, 0x46b7012f, 0x2c2303fe, 0xdf410a1b, 0x3c8f8206, 0x01000029, 0x00da01d0, 0xb9560021, 0xe8ff0a00, 0x00100db4, 0xffb80a4c,
		0x000cb3f0, 0x0807824d, 0x2140e822, 0x154d000b, 0x197f1805, 0x7f0e2119, 0x7f20230d, 0x19192221, 0x124a210e, 0x15500788, 0x0205881d, 0x21098848,
		0x456e2f33, 0x32ed2d09, 0x2b303132, 0x36132b2b, 0x17163233, 0x1e2e0482, 0x23111502, 0x23263411, 0x16070622, 0x2d431515, 0x07370805, 0x3c292311,
		0x12331d35, 0x2b18312b, 0x204b1421, 0x0b1a0c18, 0x20164b06, 0x014b1914, 0x121117c3, 0x36241223, 0x01b6fe24, 0x0c26244c, 0x971c170d, 0x09282398,
		0x820073fe, 0x43012000, 0xbb8205e7, 0x5e001336, 0x080c0c40, 0x0c4d0016, 0x00100f10, 0xffb8054c, 0x0012b3e0, 0x63053b6a, 0xb425066c, 0x4c000a08,
		0x21188204, 0x11821b40, 0xef7f0836, 0x15070107, 0x13007f12, 0x080213e0, 0x13081413, 0x03880e4a, 0x0351c982, 0x5d5e2505, 0x5dde10ed, 0x82076341,
		0x20bf82c3, 0x49be8416, 0x2208053b, 0x2d472311, 0x5f5d2759, 0x291d1052, 0x152d1418, 0x0bc30153, 0xfe6a600c, 0x2d0101f0, 0x050c1f38, 0x4778fe04,
		0xcc3206af, 0x1300db01, 0x98001f00, 0x181e1040, 0x1e4d0010, 0x04820f20, 0x000e0824, 0x8c821c4d, 0xae83b420, 0xf0210882, 0x201082b3, 0x82108718,
		0x40f82208, 0x2111820f, 0x1f832016, 0x2d831620, 0xffb8122b, 0x081140e8, 0x0c4c0009, 0x20058310, 0x20058407, 0x22328203, 0x5d0009b3, 0x183805de,
		0x144d0008, 0x1a210082, 0x09400a82, 0x200a480c, 0x500f8817, 0x5105881d, 0x211c0d57, 0x05571425, 0x05be4605, 0x07021e23, 0x09ee7634, 0xcc013308,
		0x2e4e381f, 0x1f384d2d, 0x2d4d381f, 0x1f384e2e, 0x393a4455, 0x3a394343, 0x5937e844, 0x40232340, 0x5a373759, 0x3f23233f, 0x5b4f375a, 0x5b4e4f5b,
		0xf782005b, 0x5bff4732, 0xda01cc01, 0x21000e00, 0x00b97600, 0xb4f0ff20, 0x1f26b283, 0xb3f8ffb8, 0x24710010, 0x000f2105, 0x8305064c, 0x26db82e0,
		0x0a09b4f0, 0x82114c00, 0x294021ce, 0x0c20c682, 0x023ff283, 0x4d000e18, 0x000d1002, 0x0f82004d, 0x7f180723, 0x08011900, 0x88032219, 0x4b19501d,
		0x8414880a, 0x453f20d7, 0x2b221395, 0xc584252b, 0x16110728, 0x3e323316, 0xe3843702, 0x15272624, 0xac451123, 0x77012605, 0x27223d4c, 0x068d490b,
		0x1b552b08, 0x252f4a33, 0x1b530e38, 0x52323755, 0x51e7203a, 0xfe040659, 0x1a160ddb, 0x35243d2d, 0x12244059, 0x6702b70b, 0x3f221008, 0xdf83005a,
		0xdf822820, 0xdf86ad20, 0x2a407825, 0x82091820, 0x832820d4, 0x0f2021d9, 0x18210982, 0x2004830a, 0x20e08208, 0x20138208, 0x26138312, 0x09081011,
		0x820d4c00, 0x82b320de, 0x210782d3, 0x945fb3f0, 0x40e82205, 0x2410821b, 0x187f1908, 0x33e48223, 0x480c0940, 0x8805220f, 0x4b19511d, 0x5014880c,
		0x3fed3f00, 0x7909c758, 0x372e0dbf, 0x33021e14, 0x11373632, 0x22232626, 0x404b0706, 0x23112206, 0x05334b35, 0x4b0f7d21, 0x340805c9, 0x3d22270b,
		0x3a20554d, 0x53363253, 0x380f531d, 0x334a2f23, 0x3d24e71c, 0x0d161a2d, 0x06042501, 0x5a385159, 0x0811223f, 0x0ab79afd, 0x59402413, 0x00010000,
		0x2004826b, 0x27df82b6, 0x4024000d, 0x0d0f0612, 0x29050f47, 0x0a07070e, 0x00500388, 0x9382004a, 0x27060649, 0x31ce10ed, 0x36113330, 0x3708f748,
		0x666b1107, 0x233a2068, 0x1d31200f, 0xb7013f3d, 0x49080523, 0xfe110509, 0x24084283, 0xf5ff4200, 0xdb01b201, 0xec002700, 0x20221240, 0x4c001210,
		0x0f0e2822, 0x08214c00, 0x1d4d000e, 0xb3e0ffb8, 0x2207840c, 0x840bb3e8, 0xb3e02207, 0x2207840a, 0x8409b3c8, 0xb3e02507, 0x1b4d0008, 0x0d262783,
		0xb81a4d00, 0x2f83d0ff, 0xe8200782, 0x19202783, 0x2706d54a, 0xe8ffb817, 0x4d0010b3, 0xf0280782, 0x000e5140, 0x0b18084d, 0x20260482, 0x4c000a09,
		0x40821808, 0x82280621, 0x3005363d, 0x054d000c, 0x4d000a18, 0x000f1004, 0x0820034d, 0x024c0009, 0x3d378210, 0x82000d0d, 0x2222291c, 0x07018215,
		0x28070801, 0x23230a18, 0x1f038826, 0x130e0e51, 0xc04c0a88, 0xed392406, 0x46112f32, 0x3321062f, 0x138b5f2f, 0x23099252, 0x042e3425, 0x2a051275,
		0x032e0717, 0x14152223, 0x4915041e, 0x53080a0c, 0x3d295f01, 0x5b293d48, 0x1d512661, 0x241c080f, 0x296c1329, 0x293e483e, 0x50306a62, 0x4d231024,
		0x1974712c, 0x22171820, 0x4b382832, 0x044a090b, 0x3b040709, 0x19181d15, 0x3f273324, 0x4b101045, 0x01001510, 0xf5ff3f00, 0x6002c201, 0x49001b00,
		0x18132940, 0x2208dc82, 0x000b2013, 0x7f03004d, 0x17161619, 0x1d020d0d, 0x08011700, 0x1b1a1c17, 0x00851603, 0x0c0c4919, 0x46108809, 0x332b0654,
		0x32cd32ed, 0x5ec61001, 0x83ce105d, 0x822f20d6, 0x30312710, 0x33132b2b, 0x996d2315, 0x09934b05, 0x23353008, 0x37353335, 0x0ac4c4f3, 0x241a2417,
		0x0e0c142c, 0x42342d3d, 0x62620e25, 0x45d00152, 0x1b2c23d8, 0x460a0c0a, 0x30181406, 0x45d82f47, 0x82000e82, 0x4425089b, 0xad01f6ff, 0x1500d001,
		0x00b95600, 0xb3d8ff0d, 0x0d4d0011, 0x40e8ffb8, 0x00100f30, 0x1218064c, 0x20064d00, 0x25048209, 0x4d000818, 0x0e822005, 0x0a100536, 0x7f134d00,
		0x7f0b1700, 0x08010800, 0x09141608, 0x03880e49, 0x3f25af83, 0xd6100133, 0x0aab625e, 0x672b2b21, 0x11230808, 0x43141533, 0x250805f0, 0xad013311,
		0x353c591b, 0x52122c46, 0x1b0d3c33, 0x53031218, 0x1f10070d, 0x012f4e39, 0x4856f305, 0x01030302, 0x9b828801, 0xa0821e20, 0x9b82d620, 0x6e001428,
		0xff0b00b9, 0x7d82b3f0, 0xffb80f28, 0x1210b4e0, 0x08824c00, 0x2f40e823, 0x2f99820f, 0x810a0f0a, 0x09140609, 0x14050609, 0x0081140f, 0x31055071,
		0x004f090f, 0x0002005f, 0x00150916, 0x090a4914, 0x4e480f49, 0x05e15405, 0x66c61021, 0x87220d43, 0x33521018, 0x003e0805, 0x2b012b2b, 0x07030e01,
		0x27262623, 0x17031e33, 0x0137033e, 0x302e12d6, 0x2f4b1732, 0x0c5a2560, 0x1123221f, 0x21242511, 0x41d0010c, 0x2f6c777d, 0x2c82f05e, 0x245b6262,
		0x62625b24, 0x0082002c, 0x13000126, 0xe1010000, 0x2a25b782, 0x28b54801, 0x27a28218, 0xf0ffb828, 0x00091b40, 0x2605a26c, 0x0017101c, 0x82201b4d,
		0x181a2104, 0xec230482, 0x8219011a, 0x82b620d4, 0x19e6270a, 0xffb81801, 0x0a82b3e8, 0xffb81725, 0x820e40f8, 0x10162608, 0x154d0010, 0x82048318,
		0x82b32045, 0x4c132044, 0x0c200674, 0x40210f82, 0x345e8213, 0x000b180c, 0x09180c4d, 0x080b4d00, 0x084d000b, 0xb3d0ffb8, 0x21078412, 0xb376b3e8,
		0xb3e02505, 0x074d000e, 0x40213782, 0x2010824d, 0x21938303, 0x22821802, 0x82080221, 0x1802210e, 0x56081c82, 0x1a1f1a00, 0x14000584, 0x1f000505,
		0x0a257f24, 0x84191419, 0x05140a05, 0x0e05050a, 0x1f250f2a, 0x5f254f25, 0x0525df25, 0x0f142c25, 0x2b0e0b7f, 0x1a492425, 0xffb80519, 0x161340c8,
		0x05054d00, 0x0e0f1919, 0x0a141449, 0x1f2a4a0b, 0x2f00001f, 0x3f322f32, 0x832f3333, 0x2f332303, 0x965f112b, 0x32ed2506, 0x325dce10, 0x28058f5f,
		0xc47d872b, 0xed101801, 0x05705532, 0x2311b567, 0x5d2b2b2b, 0x06820182, 0x212b2b25, 0x4127032e, 0x9b410d94, 0x82332006, 0x01520815, 0x15160f57,
		0x160e0e15, 0x3e0f1715, 0x4e09251c, 0x0d0a0703, 0x12161008, 0x0a3e0a11, 0x0f141210, 0x080a0e09, 0x0e054b03, 0x220d1814, 0x273d3838, 0x38383d27,
		0x64f17b22, 0x60524b27, 0x363c283c, 0x38232338, 0x37273c36, 0x294e535e, 0x7b787232, 0x00820039, 0x00014f08, 0x0100001d, 0x00d001d8, 0x40700017,
		0x130a1441, 0x0b111017, 0x0e101712, 0x120b0f00, 0x0a090605, 0x0b120a13, 0x0a138112, 0x130a1314, 0x00011713, 0x1710000f, 0x000f8110, 0x000f0f14,
		0x0f0f1917, 0x1213180b, 0x490f1049, 0x174a0a0b, 0xa84c4a00, 0x56332005, 0x87271b67, 0xc4c4c40e, 0x560f0f0f, 0xd982056b, 0x36233908, 0x33273736,
		0x07333717, 0x01171616, 0x221d0a7c, 0x28121225, 0x550b2025, 0xa72e5f21, 0x58737d5d, 0x205b2d99, 0x32333014, 0x33321716, 0x7f3c1330, 0xa2a2dc39,
		0x3e803bd7, 0x0025ba82, 0x0158ff24, 0x31bf82cd, 0x40080120, 0x11101942, 0x10184d00, 0x174d0010, 0x04821218, 0x820f1021, 0x0c182504, 0x10164d00,
		0x12200482, 0x11200e83, 0x934d0e83, 0x82182005, 0x2010212c, 0x10212282, 0x201d8220, 0x2518830f, 0xe8ffb80c, 0x17822a40, 0x10380725, 0x83064d00,
		0x10062821, 0x4c00100f, 0x830c2806, 0x0b0a240f, 0x83054c00, 0x2005210a, 0x0f200a83, 0x82068542, 0x67d82007, 0xc82306c3, 0x820e3c40, 0x12302129,
		0x142a8882, 0x1581140f, 0x15151418, 0xbf430618, 0x0f200809, 0x151f090f, 0x20221501, 0x01092020, 0x0f182109, 0x03090606, 0x154b1d88, 0x090a4914,
		0x333f0049, 0xed250182, 0x33113912, 0x050d7433, 0x2119c343, 0x036a2b2b, 0x842b200f, 0x50172000, 0xdb4305c5, 0x33460809, 0x0e070606, 0x26222303,
		0x21093327, 0x1737310e, 0x5a206238, 0x27221b0a, 0x181c1016, 0x20560d18, 0x27112d4f, 0x13253a2e, 0x0557082d, 0x6a312b06, 0x5d2879f3, 0x2e2d6362,
		0x355f5b5a, 0x2868f482, 0x0a12263a, 0x00820004, 0x49000135, 0xab010000, 0x1100d001, 0x24404200, 0x05010515, 0x440e090e, 0x0637068e, 0x0f130006,
		0x0109000f, 0x00120908, 0x4910850e, 0x08850509, 0x653f004a, 0x1027052a, 0x325d5ec6, 0x57c6102f, 0x01280758, 0x0130315d, 0x3307030e, 0x08055a57,
		0x21352323, 0x3e12a401, 0xff1b4647, 0x3f159efe, 0xe4184144, 0x92014e01, 0x645b4b15, 0x2837462d, 0x1c545d5f, 0x357a8245, 0x5bff4f00, 0xbb02ab01,
		0x67002c00, 0x10234440, 0x234d000f, 0x04820e18, 0x820d1021, 0x0a182d04, 0x094c000c, 0x4d000f18, 0x0e0d1009, 0x0c200a83, 0x20210a82, 0x0804820b,
		0x000a182d, 0x131e0e4d, 0x162c7f1a, 0x2e252506, 0x002c162d, 0x1f1e0d00, 0x2f000d0e, 0x11cd2fcd, 0x39cd2f39, 0x39121101, 0xce33332f, 0x48ce32fd,
		0x13360bea, 0x023e3233, 0x3e343535, 0x15333302, 0x15062223, 0x07061415, 0x06821616, 0x10841620, 0x1c832e20, 0x022e4408, 0x284f2323, 0x09111a11,
		0x2e3d240f, 0x232a5551, 0x281a1a28, 0x51542a24, 0x0f243d2e, 0x11191109, 0x0f2b0129, 0xa1101f19, 0x14273825, 0x8a322641, 0x0c0b3f43, 0x328a3f42,
		0x27144126, 0x0fa12538, 0x8310191f, 0x82d420df, 0x822120df, 0x00032edf, 0x7f02b714, 0x04050303, 0x2f000003, 0x2e9b842f, 0x133031ed, 0xd4231133,
		0xbb024d4d, 0x4100a0fc, 0x2f82058f, 0x0f41a520, 0x00b92505, 0xb3f0ff23, 0x2323fc82, 0x51e8ffb8, 0xe02006a9, 0x26069151, 0x0c0ab4e8, 0x82094c00,
		0x0bb42218, 0x3608840d, 0x0a1840e0, 0x0e1e4d00, 0x26911219, 0x07070016, 0x00162d2e, 0x410e2c2c, 0x12200812, 0x22081241, 0x413333ce, 0x25240b12,
		0x020e2223, 0x0e20fd82, 0x352af282, 0x35363233, 0x37363435, 0x06822626, 0x23232622, 0x1e201082, 0x1e261c83, 0x01333302, 0xf78228a5, 0x250f0922,
		0x220f1041, 0x82080f25, 0xeb292118, 0x2d230f41, 0x01bd0025, 0x005101cf, 0xb9460021, 0xd7821900, 0x4d001137, 0xf0ffb819, 0x00100a40, 0x0918144d,
		0x034c000c, 0x40e0ffb8, 0x08098313, 0x10002120, 0x16212111, 0x881c0b88, 0x05101005, 0x2f332f00, 0xeddced10, 0x2f012f32, 0x31cddccd, 0x00822b30,
		0x09430120, 0x05285505, 0x2006a67a, 0x06a64b17, 0x03cf0137, 0x1f2c1d0f, 0x18152d1b, 0x140e1a2c, 0x39030a0d, 0x2b1c1003, 0x21108320, 0x1084192d,
		0x113a012e, 0x151a262c, 0x0d1c0e0d, 0x100b1914, 0x00200c8b, 0x2c058f44, 0x02d301f4, 0x00310076, 0x240c4096, 0x26a48210, 0x0e0d1824, 0x821a4c00,
		0x12b323b3, 0x07824d00, 0x82b3f821, 0x820c20c3, 0x4040080f, 0x4d00133f, 0x0e0e1717, 0x33200606, 0x19283030, 0x2676130d, 0x19322c00, 0x16297926,
		0x792f1029, 0x0f000d00, 0x02291f29, 0x00af004f, 0x290300bf, 0x03002900, 0x7c1c1f1f, 0x07074623, 0x45037c0a, 0x2d06934f, 0x39112f32, 0x5d2f2f39,
		0x1033115d, 0x048432ed, 0xd410012b, 0x32ed3232, 0x2f32ce32, 0x21038210, 0x4d782f32, 0x36132108, 0x2a092d4b, 0x07330706, 0x15140623, 0x82171414,
		0x05364408, 0x06176708, 0x26222306, 0x33352327, 0x34353426, 0x35233734, 0x5f73126a, 0x10183328, 0x441b3315, 0x0cc70a40, 0xb30101c4, 0x490da00c,
		0x1536263c, 0x2e4b0f12, 0x440e6d68, 0x3d01013d, 0x676aa501, 0x0846090a, 0x403f4b0a, 0x0b0d170b, 0x50400a16, 0x470b0d3e, 0x65721208, 0x0b160a40,
		0x400b170d, 0x01000000, 0x70ff9400, 0xcf7f5e01, 0x12942f35, 0x07181e23, 0x1c2e1d20, 0x2f172625, 0xcf7f2f46, 0x073a0814, 0xe20156ff, 0x2800b502,
		0x00b94a00, 0x40e0ff1b, 0x00090829, 0x0c10054c, 0x18054d00, 0x4c000a08, 0x190b1517, 0x0002217f, 0x292a2727, 0x521e8824, 0x4d08880f, 0x15852818,
		0xd3584902, 0x01ed3207, 0x2f391211, 0xfdcc33ce, 0x31ce33cc, 0x2b2b2b30, 0x16615513, 0x2706da4d, 0x32331637, 0x3f113536, 0x2b116e55, 0x203c2d1b,
		0x120e1e1c, 0x35271715, 0x08137a55, 0x42307837, 0x03061229, 0x3b2b0847, 0x00008701, 0x2a000200, 0xca017cff, 0x11007900, 0x30002500, 0x20171740,
		0x20941a12, 0x940c0327, 0x12260600, 0x1d112500, 0x03179a09, 0x36aa845c, 0x32cd32dc, 0xced61001, 0xd61039ed, 0x3912cefd, 0x36173031, 0x18263736,
		0x2308b849, 0x3707020e, 0x0f134118, 0x39222a39, 0x211d1d0d, 0x112b1d21, 0xda314127, 0x161c2011, 0x201d1d06, 0x832a1d22, 0x074a350f, 0x27032316,
		0x27291917, 0x2e371d2c, 0x043a0622, 0x12150e07, 0xa382118b, 0x00032a08, 0x01f4ff1f, 0x006000d5, 0x0017000b, 0x40330023, 0x1e95181a, 0x0012950c,
		0x121e0695, 0x1e120606, 0x21242503, 0x1b9a0915, 0x2da8840f, 0x3232ed33, 0x17121101, 0x2f2f2f39, 0x0183ed10, 0x37303122, 0x200acc7f, 0x240b9617,
		0x18181d89, 0x2403831d, 0x18181ca6, 0x8803831c, 0x162a2408, 0x92162020, 0x00240803, 0xff480001, 0x02ac017f, 0x0011006b, 0x110f4024, 0x0a0c000f,
		0x12130909, 0x0c0f0900, 0x2f00050d, 0xcd32dd2f, 0x39238c83, 0x8233cd2f, 0x312c080a, 0x14150130, 0x26230706, 0x23353526, 0x33353335, 0x01153315,
		0x2908071e, 0x8e8e0808, 0x64018e48, 0x3d7a4be3, 0xe34b7a3d, 0x45c2c245, 0x5f8afa82, 0x00172108, 0x0c1c403c, 0x17130708, 0x0e001115, 0x1907070a,
		0x110b1418, 0x08010e0f, 0x0a150f0e, 0x00040700, 0x2f236b84, 0x875d5edd, 0x82332072, 0x250b8272, 0x3132cd10, 0x76862530, 0x79877583, 0x7d842320,
		0x84070821, 0x2a7f837d, 0x49788e8e, 0x753b3b75, 0x83a84449, 0x44a82180, 0x81347f82, 0x73010802, 0x0500af02, 0x1b405b00, 0x00100805, 0x1220034d,
		0x18210482, 0x3b048211, 0x4d001010, 0x70056004, 0xb8050205, 0x1b40c0ff, 0x05481815, 0x7f016f02, 0x40010201, 0x012a0b82, 0x01030040, 0x00030202,
		0x9e820580, 0xcd1a3329, 0x33113332, 0x822f1901, 0x822b2009, 0x5d0382a5, 0x380807c2, 0x27071713, 0x79fa2707, 0x22575722, 0x2780af02, 0x00274e4e,
		0xff090007, 0x02eb01f3, 0x000b0078, 0x001f0013, 0x00330027, 0x003f003b, 0x283bb6fa, 0x4c00130d, 0xd8ffb839, 0x250883b4, 0xd0ffb837, 0x09831140,
		0x18843520, 0x83302721, 0x8725200b, 0x8223201e, 0x201e8508, 0x201e8421, 0x23058413, 0xe0ffb811, 0x0f203d84, 0x40210882, 0x21318364, 0x0583200d,
		0x3f3e3c08, 0x9614383f, 0x20502040, 0x20032060, 0x244f961a, 0x246f245f, 0x96282403, 0x34503440, 0x34033460, 0x4138962e, 0x0c3d3d3c, 0x104f9606,
		0x106f105f, 0x96001003, 0x3e3f400c, 0x823e3c3d, 0x0e3d0801, 0x981d3126, 0x01224036, 0x98172b22, 0x035c263a, 0x01124f98, 0x0e980912, 0xed3f005a,
		0x3fed5dd4, 0xd432ed33, 0x32ed325d, 0x39391211, 0xcd102f2f, 0x1001cd10, 0x5ddcfdd6, 0x2f3311ed, 0x21098533, 0x0f875dde, 0x220dc765, 0x69161413,
		0x072808bd, 0x15323334, 0x17222314, 0x37201392, 0x25291392, 0x46170127, 0x0e0d0d0d, 0x2604820e, 0x50514e35, 0x820ea24f, 0x260e820c, 0x514d330e,
		0x82f94f4f, 0x3a0c8217, 0x4e340e0d, 0xfe504e50, 0xc5011de1, 0x33ef011d, 0x33332727, 0x89332626, 0x83e98a89, 0x23038307, 0x89898a8a, 0xda280b8a,
		0x2d28012d, 0xffff0000, 0x2f054367, 0x26023d03, 0x00003600, 0x5f010701, 0x8b001200, 0x2c052379, 0x252e3632, 0x370f0150, 0x342b2b4f, 0x081c8200,
		0x00900073, 0x01550138, 0x000500c3, 0x0300b934, 0x0cb3e8ff, 0xb8034d00, 0x1040f8ff, 0x014d000b, 0x02020405, 0x06000304, 0x03000105, 0x332f1900,
		0x1801cdcd, 0xcd32d610, 0xcd102f32, 0x2b303132, 0x1737372b, 0x90071707, 0x63633a8b, 0x1fc5fe3a, 0x0020a6a6, 0xff1b0002, 0x02e201fa, 0x000e0071,
		0xb5870024, 0x000f0814, 0xffb8144d, 0x0e0e40e8, 0x10104d00, 0x20048210, 0x29128218, 0xf0ffb807, 0x000e0db4, 0xba48024c, 0x24078206, 0x000db3f0,
		0x0807824d, 0x2940f82e, 0x4c000c0b, 0x0b73201c, 0x1e1e120b, 0x26211a1a, 0x25127605, 0x1c1c791f, 0x23792018, 0x18791b42, 0x157c0041, 0x0f7c0841,
		0xed3f0042, 0xf15b0185, 0x46ed2006, 0x0d8305fc, 0x270ad249, 0x020e2213, 0x33161415, 0x2005bd52, 0x07175803, 0x15331724, 0x03861523, 0xdc065c08,
		0x0f1c2b1b, 0x14143839, 0x09150d03, 0x5a686859, 0xc10e1e0b, 0x8d696980, 0x2a021dce, 0x3a5d4224, 0x01067874, 0x0205db01, 0xa093d0fd, 0x0204a4a0,
		0xdb46be46, 0x00000646, 0x95000100, 0x5f01ab01, 0x1300c602, 0x0c401b00, 0x08000e05, 0x9a0b0e94, 0x5a130005, 0xdccd3f00, 0x452f01ed, 0x012205a8,
		0xd774030e, 0x83232005, 0x023e2480, 0x465f0137, 0x2e290bdc, 0x85022f47, 0x180f0804, 0xad461813, 0x265f830c, 0x01a80194, 0x82c3025e, 0x40192c5f,
		0x940e050b, 0x13000800, 0x820b9a05, 0xdcfd2a5e, 0xce2f01cd, 0x303139ed, 0x0ff54513, 0x210f3947, 0x4718e901, 0x0029110a, 0x012b0002, 0x02ca01b7,
		0x285b82b5, 0x402e0027, 0x94221916, 0x2ac1851c, 0x1f0b1c14, 0x0019059a, 0x82271314, 0xcd332668, 0xed32dc32, 0x206c8232, 0x20cd83de, 0x90728310,
		0x900720d0, 0x11ca25e1, 0x06161b20, 0x20097c46, 0x0e7c46d9, 0x467b0221, 0x1826066d, 0x2c282919, 0x7f46381c, 0x2511890a, 0x02000000, 0xa7822a00,
		0xa786c920, 0x14402a22, 0x1420a782, 0x942ba882, 0x00140800, 0x05191327, 0x830b1f9a, 0x82fd20a5, 0x83cd20a5, 0x39fd22a5, 0x151641de, 0x9d111d47,
		0x013022a2, 0x24a282f1, 0x28021216, 0x47a28317, 0x118d0822, 0x003ba282, 0x00720001, 0x018201ad, 0x001300cb, 0x0a00b30d, 0x2f00050f, 0xcd2f01cd,
		0x56013031, 0x21080ef2, 0x23138201, 0x32201f33, 0x23131323, 0x331f2032, 0x3c011323, 0x1727341d, 0x1d342717, 0x1728341c, 0x9f432817, 0x00452805,
		0x01af01ec, 0x82030032, 0x0301214f, 0x4f860682, 0x1521132c, 0x6a014521, 0x320196fe, 0x77820046, 0x27820020, 0x2786f420, 0x86020321, 0x312f2327,
		0x27821130, 0xfef40123, 0x8226840c, 0x02703727, 0x02840124, 0x001b0091, 0x1811b637, 0x4c00100b, 0xe0ffb802, 0x09831640, 0x002f1b30, 0x0002003f,
		0x1b1b0e0d, 0x05180a13, 0x4d4b0d0d, 0xdccd2205, 0x054d4bcd, 0xc7825d20, 0x4b2b2b21, 0x2322074c, 0x4a4b0622, 0x32333308, 0x84013736, 0x1e160f03,
		0x0b230d13, 0x180d101a, 0x0d832b06, 0x0d851220, 0x0206192d, 0x181c0b7b, 0x0e050e11, 0x83170e1a, 0x830f2009, 0x82002009, 0x1241086c, 0xdc016501,
		0x07006b02, 0x53002400, 0x1e232840, 0x1608241d, 0x0d091d16, 0x010f8014, 0x261d180f, 0x06050201, 0x17172325, 0x02151509, 0x16590705, 0x0f0f0808,
		0x2f00041e, 0x33113333, 0xcd3f332f, 0x82078232, 0x01760802, 0xddddd610, 0x32d610cd, 0xcd325ddc, 0x11391232, 0xcd103333, 0x13303132, 0x23152315,
		0x05352335, 0x15030e27, 0x37033e23, 0x33371733, 0x2317031e, 0x27022e34, 0x3a40cc07, 0x27340140, 0x01010202, 0x0706033a, 0x2c360507, 0x0705362f,
		0x3a030506, 0x01020101, 0x326b022a, 0xc132d4d4, 0x393c1474, 0x4a32042c, 0x881b333c, 0x3c341b88, 0x2c04314a, 0x74143c39, 0x5f56ffff, 0x02480805,
		0x002602b2, 0x01000056, 0x0a5f0106, 0x40100000, 0x280a010b, 0x501b222c, 0x4f2d0901, 0x00342b2b, 0x009f0001, 0x01640138, 0x000500c3, 0x020f4021,
		0x000c0b10, 0x0405024c, 0x04010300, 0x19000200, 0x01cdcd2f, 0xcd332f18, 0x3124ba82, 0x27372b30, 0x172d0182, 0x63633ad9, 0x20388b3a, 0xc51fa6a6,
		0x33008200, 0xff1f0003, 0x01de01f5, 0x002700db, 0x0042003b, 0x2200b993, 0x2105417d, 0x5f60b822, 0x831a2005, 0x05a55607, 0x0cb3e824, 0x0f834d00,
		0x0b40402c, 0x10114d00, 0x4c000b09, 0x0a82100b, 0x180b2e08, 0x4c000a09, 0x1f420616, 0x0e2d2d82, 0x001b823c, 0x37441b00, 0x1f430e82, 0x24424286,
		0x19883f16, 0x13883250, 0x09882850, 0x06272751, 0x05ff5424, 0x2f323222, 0x20056245, 0x06217032, 0xce10ed24, 0x126f2f32, 0x18322005, 0x200b7e41,
		0x05484c25, 0x0c0e4018, 0x3636172a, 0x14153233, 0x14230714, 0x21053d58, 0x346e3205, 0x22232405, 0x8215020e, 0x37830813, 0x22232634, 0xd1011506,
		0x23162e14, 0x2e11143c, 0x1f2f212a, 0x301e0f0f, 0x0e362521, 0x791d3012, 0x150bb001, 0x1e0d1621, 0x0fe3fe17, 0x06050d14, 0x0f10170e, 0x07060d16,
		0x1afb170f, 0x0f1d1914, 0x33270c0e, 0x452a2c2e, 0x572d2e58, 0x302a2944, 0x06ec2b2f, 0x351c090e, 0x0e081929, 0x3c2f1c17, 0x313f2020, 0x3d2e1d1f,
		0x323e211f, 0x453bd71e, 0x00003947, 0x00ffff00, 0x0100000d, 0x021a03e8, 0x823c0026, 0x00073f09, 0x00020083, 0x4017008b, 0x01010210, 0x0c042513,
		0x1d040250, 0x1104014f, 0x2b2b2b4f, 0x33823434, 0xb6261f82, 0x3c015bff, 0x3b82d101, 0x21001937, 0x910b0f40, 0x94110000, 0x1a1b1717, 0x0e9a1405,
		0x2f2f000d, 0x595518fd, 0x34372d0b, 0x3337023e, 0x1515031e, 0x16321323, 0x36058057, 0xcc363435, 0x03070403, 0x05060339, 0x1c2d5a02, 0x1b1c2727,
		0x18032828, 0x290a5755, 0x1f257602, 0x1f24241f, 0x7383251f, 0x31000132, 0xc2019fff, 0x23006b02, 0x00b96000, 0xb3c8ff16, 0x28056d63, 0x000eb3e0,
		0xffb8114d, 0x065f63d0, 0x2040e822, 0x23081082, 0x057f1e08, 0x0b002121, 0x14251b0b, 0x1a240082, 0x1e89171a, 0x0c0c2021, 0x0805880f, 0xdd2f0006,
		0x2f32ed32, 0x01230585, 0x57edd610, 0x2b220d7c, 0xb083132b, 0x0a965318, 0x08083447, 0x06061746, 0x35231507, 0x1e312626, 0x4a2c4b36, 0x121f361b,
		0x241c3621, 0x631a2e3f, 0x233a2050, 0x223c1e0c, 0x016f5c4a, 0x3a513504, 0x7c7f0622, 0x450a0902, 0x2713070c, 0x4f532b3f, 0x0b440c08, 0x7e7c020a,
		0x0100740d, 0x2c06c777, 0x00220076, 0x1f00b96a, 0x12b3f0ff, 0x059c5b00, 0x07841120, 0x3140f02e, 0x144d0010, 0x000c0b10, 0x0a18144c, 0x2a080a83,
		0x1a4d0009, 0x0801011a, 0x91000324, 0x230f110e, 0x9b1d1b1b, 0x970e0317, 0x17111100, 0x0a97075a, 0xed3f0060, 0x332f393f, 0x821032ed, 0x100122da,
		0x48e283d6, 0xb5490503, 0x05545807, 0x21070629, 0x36362115, 0x4d233535, 0x23210bd6, 0x08e38222, 0xaaaad27a, 0x03010707, 0x0f0aa0fe, 0x321c5353,
		0x35272c47, 0x382d1419, 0x0f1d2718, 0x07434d01, 0x472d622d, 0x0d407d40, 0x57424a43, 0x0b0d1432, 0x220e1647, 0x00002b39, 0x26000200, 0xcf016100,
		0x1c000a02, 0x53002800, 0x19042340, 0x1a1a0319, 0x13130a00, 0x1d12120b, 0x2900230e, 0x131a1a12, 0x0b161919, 0x040a0303, 0x26072004, 0xcd2f0016,
		0x2f33cddc, 0x2f193333, 0x18331133, 0x01230885, 0x92d61018, 0x30313e16, 0x27373413, 0x33361737, 0x17371732, 0x14151607, 0x07170706, 0x22230627,
		0x37270727, 0x05715c26, 0x2e05d648, 0x3341194e, 0x33342b42, 0x4334432b, 0x820d0d1a, 0x332b2d05, 0x33422936, 0x15011941, 0x3e2b2b3e, 0x013e0383,
		0x42283736, 0x1a1a4333, 0x28423343, 0x142e1d37, 0x19423442, 0x41344219, 0x3c333828, 0x0382333c, 0x0120d382, 0x08051743, 0x006b023d, 0x4076001e,
		0x1d1c183e, 0x120f1216, 0x14161378, 0x19131613, 0x0801731d, 0x780c0f0c, 0x0b14080b, 0x02060b08, 0x20010105, 0x13120f1f, 0x79051941, 0x080f1608,
		0x0479011d, 0x8208041a, 0x0b0c2d01, 0x00420041, 0x39333f3f, 0x112f2f39, 0x8305a550, 0x333f2c05, 0x12112f01, 0xcd332f39, 0x5787dc32, 0xfd20062c,
		0xcd250a89, 0x33303132, 0x061f4d35, 0xfb6b2620, 0x06a7490c, 0xd2152b08, 0x7a919191, 0x5b265731, 0x27294c20, 0x285b2049, 0x907b3156, 0x3f5f9090,
		0x9b4e405b, 0x408b4649, 0x4b468b40, 0x5b404e99, 0xcf825f3f, 0x53000221, 0x0736095f, 0x0c401d00, 0x07910106, 0x08090000, 0x03000407, 0x2fcd2f00,
		0x561801cd, 0x372408ab, 0x11231133, 0x28056e53, 0xfeb14d4d, 0xfe6003aa, 0x364282aa, 0x44000200, 0xaf019fff, 0x38007902, 0x4b014a00, 0x122047b5,
		0x5b3a4d00, 0x078206f4, 0x0db3f025, 0x82334d00, 0x0bb4240f, 0x824c000c, 0xb4e02a08, 0x4c000a09, 0xd8ffb830, 0x822982b3, 0xb3e82407, 0x844d0010,
		0x8229820f, 0xb3d02207, 0x300f840c, 0x000bb3e0, 0xffb82f4d, 0x0011b3e0, 0xffb82e4d, 0x200783d0, 0x82378328, 0x2107840f, 0x8e65000f, 0x840d2005,
		0x83e02007, 0x86272037, 0xb8242a2f, 0x7240f8ff, 0x164d000e, 0x22458218, 0x830a2016, 0x00092509, 0x1218134d, 0x20280482, 0x4c001110, 0x0d0c2813,
		0x1f830582, 0x15830b20, 0x82200b21, 0x100b2757, 0x0b4d000f, 0x04820d10, 0x820c1821, 0x0534087e, 0x45323276, 0x1b1b2a76, 0x22124c2a, 0x3c151576,
		0x38380d76, 0x08010d00, 0x4a124b0d, 0x1f354a08, 0x4125412f, 0x03000018, 0x1c1c357c, 0x00187c1f, 0x2f32ed2f, 0x11260383, 0x33113939, 0x05831211,
		0x55100121, 0xed2105ec, 0x46188233, 0x0983051e, 0x200d384d, 0x2e00902b, 0x33161617, 0x26343532, 0x35032e27, 0x50023e34, 0x172e08c6, 0x23262607,
		0x14150622, 0x031e1716, 0x40181415, 0x2325070f, 0x13272622, 0x08168206, 0x17021e28, 0x35363617, 0x27022e34, 0x32401b5a, 0x21393065, 0x0f192c39,
		0x160d1c17, 0x2e4e571a, 0x1613184e, 0x32232f3d, 0x1683322c, 0x1b160e32, 0x5f201a0d, 0x174d3c58, 0x15201a84, 0x111d3224, 0x46080682, 0x011a2f23,
		0x203e110b, 0x190b1323, 0x17243223, 0x08192128, 0x3e1e2e12, 0x45081148, 0x1e1d1208, 0x0b10221f, 0x24312419, 0x1a212716, 0x21321308, 0x0b134443,
		0x2d11b801, 0x1820171b, 0x11060a12, 0x1f171c2c, 0x420a1216, 0x713a051f, 0x83012602, 0x0b008f02, 0x25001700, 0xff1500b9, 0x0f1040c0, 0x0f154812,
		0x06824003, 0x12090333, 0x00000c06, 0x32cd322f, 0x2bcd2f01, 0x312bcdde, 0x0b386530, 0x8f4c3320, 0x14152b07, 0x2014a506, 0x1f151420, 0x0382951f,
		0x03821520, 0x1e260229, 0x1d1d1717, 0x871e1717, 0x00003e07, 0xff220003, 0x01d201f5, 0x001300db, 0x01450031, 0x1043b502, 0x394d0010, 0x40e8ffb8,
		0x20088228, 0x2a0d8335, 0x000f181f, 0x0b201f4d, 0x831a4d00, 0x08192104, 0x11210e82, 0x26048330, 0x000c0b20, 0x46b80d4c, 0x07820539, 0x83b4e021,
		0xb80c2b10, 0x11b3f8ff, 0xb8074d00, 0x9a69d8ff, 0x0cb32107, 0x40210f85, 0x21468218, 0x3c822803, 0x0d180326, 0x20034d00, 0x03211782, 0x20138228,
		0x2072820a, 0x068972b3, 0x820e4021, 0x1800211a, 0x00200d82, 0x0f202483, 0x16221a83, 0x07824d00, 0x2b40f022, 0x05211582, 0x210d8218, 0x09821005,
		0x24242308, 0x3c960014, 0x1c962b47, 0x4632960a, 0x0f17982e, 0x285c4198, 0x98052198, 0x3701374f, 0xfd5d2f00, 0x4418edde, 0xed27088f, 0xcefdd610,
		0x71002f32, 0x5342087c, 0x0f521814, 0x4807200f, 0x4e420d84, 0x32332508, 0x34253736, 0x07b05718, 0x29058762, 0x2d1b9801, 0x381e1e38, 0x07841b2d,
		0x2c392608, 0x2511511b, 0x1c2b1d11, 0x2b1c0e0e, 0x1123101e, 0x09160b14, 0x1e211b20, 0xfe0b1709, 0x4e3d26ec, 0x3c4e2828, 0x2c078325, 0x253c4d29,
		0x2f4730e7, 0x472f1818, 0x0807852e, 0x08404623, 0x2d231508, 0x242e1818, 0x36080516, 0x19280305, 0x05042520, 0x3d5c3d3a, 0x5b3d1e1e, 0x3d5b3d3c,
		0x05276c1f, 0x26017634, 0x76028001, 0x2d000e00, 0x1b407700, 0x00151825, 0x4f6b1b4d, 0x181b3208, 0x184d000e, 0x00100e20, 0xffb8114c, 0x0010b3c8,
		0x2007824d, 0x06ec47e8, 0xfc47d820, 0xe0320806, 0x0d0b1e40, 0x04214c00, 0x2b2b2f12, 0x072e190c, 0x1e301e20, 0x1e031e40, 0x16000f1e, 0x5a0f275e,
		0x3fcd3f00, 0x2f3911cd, 0x1001cd5d, 0x2f33cdd6, 0xb94fde10, 0x06894305, 0xbb6e0120, 0x1516240e, 0x4e060615, 0x3323069d, 0x6e171632, 0x74080aba,
		0x26140301, 0x0e1e0a05, 0x101a1f0f, 0x3a491f2a, 0x3b254816, 0x3328174c, 0x131d0d1d, 0x171d1005, 0x09123015, 0x5d013611, 0x02590202, 0x130a0402,
		0x01171a0f, 0xc8384419, 0x38300705, 0x0b18271c, 0x0d020202, 0x050d151b, 0x08053806, 0x02000000, 0x4f003f00, 0xae019d01, 0x0b000500, 0x19403a00,
		0x08400b07, 0x0006090a, 0x40050180, 0x03800402, 0x07050b00, 0x380f8201, 0x2f190003, 0xcd333333, 0x0132cd32, 0x1a332f18, 0xcd1a32dd, 0xdc101a32,
		0x21088432, 0x83503031, 0x32058505, 0x5434773f, 0x783e3250, 0x32505333, 0x951bb0fe, 0x84af1f90, 0x306f8205, 0x00290001, 0x01c2012b, 0x0005005b,
		0x0003b511, 0x05254d04, 0x01cd2508, 0x31cddd2f, 0x23110130, 0x01352135, 0xaefe47c2, 0xd0fe5b01, 0xffff46ea, 0xd7008c00, 0x25016801, 0x10000602,
		0x04203f82, 0x2f0a7343, 0x003a0027, 0x40720145, 0x1310380b, 0x08374d00, 0x30210482, 0x05cc48b8, 0xe8240782, 0x4d0011b3, 0x40380783, 0x4d000e0f,
		0x12110826, 0x10254c00, 0x1c4d0010, 0xb3f8ffb8, 0x1b4d0012, 0x40252b82, 0x4d001015, 0x27158317, 0x14131011, 0x28114c00, 0x21069443, 0x0e83b4e8,
		0x25059543, 0x074c000d, 0x1185ffb8, 0xb3230883, 0x824d000d, 0x40e02207, 0x272c8315, 0x00141803, 0x1320034d, 0x3c840482, 0x2a821120, 0x6016b321,
		0x0e2006e7, 0x07210882, 0x21048218, 0x04821003, 0xffb80a26, 0x000fb3e0, 0x29055d67, 0x4d000d09, 0x000f2000, 0x30820f4d, 0x15304026, 0x18054d00,
		0x3a340482, 0x3301335f, 0x01364b37, 0x3f963f36, 0x40310131, 0x40481c19, 0x00220782, 0x2f820d20, 0x471e962e, 0x3096293b, 0xb82a012a, 0x2940c0ff,
		0x2a351b82, 0x1430960a, 0x33461401, 0x3a013a3f, 0x013b3098, 0x362e3b3b, 0x2c2082df, 0x4623980f, 0x052e9842, 0x01194f98, 0x07cc4319, 0x325dce39,
		0x712f3911, 0x013271ed, 0xfd72d610, 0xed722bde, 0xfdd61032, 0x825dde2b, 0x5dd62c09, 0x3271c532, 0x012b2b00, 0x542b2b2b, 0xe85c058c, 0x0fe54315,
		0x330fc943, 0x35231537, 0x32333636, 0x07141516, 0x23171616, 0x27272626, 0x4309aa53, 0xfe2111e7, 0x0fcd438a, 0x0e36ba37, 0x37391322, 0x0d1a0c28,
		0x0a140d39, 0x1a1b1224, 0x0b061120, 0x0fe54305, 0xcf432f20, 0x1022080e, 0x0504ee4d, 0x17302a2c, 0x181a2f11, 0x0e321025, 0x010d1417, 0x00000001,
		0x027b0001, 0x0279013b, 0x5818007b, 0x7b25136b, 0x7b02fefe, 0x3c268240, 0x7d000200, 0x7701bd01, 0x1300b502, 0x39001f00, 0xff1200b9, 0x081140e0,
		0x0c4c000b, 0x20058320, 0x21058408, 0x1582b802, 0x0f830c20, 0x0a140031, 0x1d170f1a, 0xdd2f0005, 0x2f01cdde, 0x45cddecd, 0x69500517, 0x0c5c670f,
		0x23147728, 0x2d19192d, 0x07871423, 0x1b263c24, 0x0383261b, 0x1d390229, 0x1111202e, 0x871d2e20, 0x24202307, 0x03822024, 0x2e209b85, 0xc73ec882,
		0x0b002a02, 0x33000f00, 0x0c0c1740, 0x0d0d0a0b, 0x01070406, 0x11100a0a, 0x045b0f0c, 0x59180102, 0x3f2009e5, 0x20065249, 0x062954dd, 0x18312f21,
		0x230cec59, 0x21152115, 0x07f05918, 0x67fe992b, 0xb4b47601, 0xe9b4b446, 0x3a628247, 0x19017c00, 0x79027801, 0xe1002000, 0xff2000b9, 0x0014b3e8,
		0xffb8204d, 0x8413b3f0, 0xb3e82207, 0x22078412, 0x8411b3e0, 0xb3d82207, 0x22078410, 0x840fb3e0, 0xb4d82507, 0x4c000e0c, 0xd0273082, 0x000b2740,
		0x82101c4d, 0x10102716, 0x0f4d0012, 0x04821318, 0x00111026, 0x13200e4d, 0x18200482, 0x0d201382, 0x12280e83, 0xb3e0ffb8, 0x114d001a, 0x1b230783,
		0x83104d00, 0x200f826c, 0x250f860f, 0xe8ffb80e, 0x10822840, 0x19200425, 0x83034d00, 0x18022104, 0x13370982, 0x09090096, 0x1b1b0b00, 0x1a0b9608,
		0x1e98151a, 0x0b98085a, 0x6d3f005f, 0x2f290524, 0x102f33ed, 0x102f32cd, 0x0a3d78ed, 0x340fba5f, 0x020e1401, 0x07060607, 0x26231533, 0x3637023e,
		0x23343536, 0x08128222, 0x36362755, 0x01163233, 0x261d116a, 0x021e0f15, 0x0e03eea6, 0x1e12231a, 0x1b0f3726, 0x20051016, 0x3e283d10, 0x1316023b,
		0x12242323, 0x390b1d0d, 0x1f262d1e, 0x152c1a10, 0x0c0b082d, 0x1f102c04, 0x01000033, 0x12017e00, 0x79027601, 0xf8002b00, 0x1b2024b5, 0x82234d00,
		0x0bb425c7, 0x1e4c0010, 0xb3200882, 0x1c201082, 0xb4240782, 0x4c001411, 0xe0230882, 0x820e2840, 0x081b271a, 0x184d0024, 0x04821718, 0x00161025,
		0x82080e4d, 0x180521f6, 0x05212b82, 0x20098210, 0x2d098328, 0xf8ffb818, 0x4d0018b3, 0xd8ffb817, 0x1a823c40, 0x15831520, 0x1718152c, 0x054c0018,
		0x4d001918, 0x1d821005, 0x43830520, 0x101f2908, 0x22401d96, 0x401d482d, 0x1d48201a, 0x2d229603, 0x09281717, 0x091f2809, 0x1a0a0a98, 0xc0ffb829,
		0x001c2340, 0x1b40294d, 0x38210482, 0x2104821a, 0x04821940, 0x98002926, 0x40166225, 0x162b1982, 0x1a981316, 0xed3f005a, 0x842b2f32, 0x2b2b3604,
		0x2f39112b, 0x2f0139ed, 0x33112f33, 0xedde102f, 0xed2b2bd4, 0x16624132, 0x36321322, 0x16335718, 0x67051d44, 0x4508090f, 0x102330e2, 0x1113241b,
		0x161b0d16, 0x181a210f, 0x0e170f29, 0x36411e3d, 0x44242031, 0x10391c4f, 0x012c140d, 0x0f171d4a, 0x33060e15, 0x0e120b05, 0x07111316, 0x34140a31,
		0x0a1c2b2a, 0x3e2d202d, 0x0835080d, 0x0082000a, 0xaa000137, 0x52010602, 0x0300b502, 0x09401800, 0x02010003, 0x02800300, 0x0cbf7601, 0x07012008,
		0x52013727, 0x02722a7e, 0x8a257a80, 0x47000100, 0xad015bff, 0x1a00d001, 0x00b93e00, 0x18e0ff11, 0x3808864c, 0x100f1a40, 0x7f174c00, 0x0d091c00,
		0x010c007f, 0x191b0c08, 0x4b0b490c, 0x05965113, 0x97663f20, 0x07867507, 0x2f067e51, 0x15151616, 0x15331123, 0x33021e14, 0x37023e32, 0x2a069866,
		0x03112d29, 0x0b535301, 0x661e2919, 0x1133079c, 0x2e170f12, 0x75025c1a, 0x263c2bf3, 0x03020211, 0x85890101, 0x821c20c7, 0x02bf3993, 0x00120071,
		0x05114026, 0x0801020f, 0x14100002, 0x05051308, 0x04120d02, 0x2f35cf82, 0x012f33cd, 0xde10c610, 0x5d5ededd, 0x013031cd, 0x23110726, 0x0c611811,
		0x16330807, 0x01231117, 0x45292e79, 0x4625645d, 0x50233e63, 0x29024624, 0x30fd0406, 0x5c0a8f01, 0x3249315c, 0xfc0a0619, 0x00fffffa, 0x01b800b1,
		0x02510144, 0x82110007, 0x82c42078, 0x00012603, 0x0157ff9c, 0x3e798241, 0x4034001c, 0x1a031118, 0x140b1900, 0x00001e14, 0x081d1414, 0x0f1d1919,
		0x08010800, 0x822f0008, 0x33112176, 0x29054a4e, 0x3911012f, 0xdd33cc2f, 0x8982dd32, 0xff820520, 0x020e1422, 0x0808f871, 0x2734353b, 0x37033e27,
		0x01060633, 0x09171a10, 0x171a2315, 0x0b0a0b28, 0x25200f18, 0x0b0b0307, 0x0539020a, 0x1e0c2110, 0x13170a1d, 0x3305070d, 0x14140504, 0x1809020b,
		0x0b041318, 0x088f841d, 0x19017e23, 0x72027f01, 0x2e000e00, 0x05051740, 0x0e010e2f, 0x960a0b00, 0x000a0008, 0x055f0d98, 0x08010404, 0x005c1859,
		0x2f470809, 0x10cdfd32, 0x2f3271cd, 0x35133031, 0x27070606, 0x33373636, 0x23153311, 0x3214e735, 0x42221112, 0xfa592c18, 0x0dce5201, 0x0b310514,
		0xe0fe1725, 0x02003939, 0x25015900, 0x78029b01, 0x1f001300, 0x00b93b00, 0x45e8ff12, 0x182506fb, 0x4c000b08, 0x25058408, 0xe0ffb802, 0x0f830e40,
		0x1a00142e, 0x5a0f170a, 0x005e051d, 0xcd3fcd3f, 0x560bea60, 0xfd450e67, 0x189b280c, 0x23233b2b, 0x87182b3b, 0x42220807, 0x322d2e31, 0x312e2e31,
		0x3e27cf01, 0x2d18182d, 0x3e27273e, 0x2c18182c, 0x3a33273e, 0x3c32333a, 0x9b82003c, 0x4f005524, 0xa749b501, 0x40363606, 0x08070b17, 0x04400105,
		0x09000302, 0x080a8006, 0x07010b05, 0x490b8206, 0xa04910a5, 0xcd102b06, 0x25303132, 0x27372707, 0x05840737, 0x78b5012d, 0x32505434, 0x5434773f,
		0x49ff3251, 0x04200ca4, 0x4408f882, 0x02dd01fc, 0x000a0072, 0x001c0017, 0x40630020, 0x1e1f1d34, 0x1d209c1f, 0x201d2014, 0x1818171e, 0x12120f0c,
		0x050e141b, 0x1f000603, 0x1e1d5920, 0x14130f67, 0x111b1b0c, 0x11651718, 0x00610667, 0x03070a0a, 0x068e4160, 0x333f3f36, 0x332f3912, 0x3f32cd33,
		0x01333f33, 0xcd32dc2f, 0x3932cd2f, 0x33260382, 0x2f2f3311, 0x4f7b2b87, 0x36362b05, 0x23153337, 0x07060635, 0x08821501, 0x23210a82, 0x20138235,
		0x08108217, 0x23053363, 0x22123301, 0x3b281830, 0x01122014, 0x3b242496, 0x1f301a81, 0x0f221518, 0x46e1fe46, 0x02467b01, 0x171c0e31, 0x0e0ba8fa,
		0x98f9fe06, 0x29303032, 0x2b284b2e, 0x661a381b, 0x03006b02, 0x00001100, 0x7202e201, 0x29001e00, 0xb8002d00, 0xff1e00b9, 0x0016b3f0, 0xffb81c4d,
		0x0015b3e0, 0xffb81b4d, 0x260788d8, 0x184d0013, 0x83e8ffb8, 0x2207820f, 0x8614b3e0, 0x2817850f, 0x0e4440e0, 0x144c0012, 0x27168230, 0x17161008,
		0x10074c00, 0x3b080a82, 0x2c2b2c2a, 0x142a2d9c, 0x2b2d2a2d, 0x1f252224, 0x0019040c, 0x051e1900, 0x2c051313, 0x2b2a592d, 0x1f612567, 0x22262929,
		0x160f1260, 0x5b031e66, 0x3fcd3f00, 0x333f32cd, 0x3fcd2f33, 0x24051541, 0xcd102f33, 0x2404832f, 0x32dc2fcd, 0x081641cd, 0x2b0bae46, 0x26231525,
		0x36343534, 0x36363737, 0x0b7d5c18, 0x14151626, 0x0107020e, 0x08094041, 0x01231346, 0xc5e20133, 0x161a2801, 0x10171218, 0x200c200f, 0x2f1a3411,
		0x28261a2f, 0x23b4fe0d, 0x3b29182f, 0x2e122114, 0x467b0146, 0x11033232, 0x10232003, 0x0e190e0f, 0x0d0d1011, 0x32131328, 0x1c251a20, 0xff010c18,
		0x08075241, 0x02fffd2b, 0x0000006b, 0x00150004, 0x02df0100, 0x000c0079, 0x003c0037, 0xb9070140, 0xe0ff3200, 0x001514b4, 0xffb8324c, 0x0013b3e8,
		0x2207824d, 0x8412b3e0, 0xb4e82307, 0x18841110, 0x0fb3d822, 0xb3241085, 0x2e4d000e, 0xb4282882, 0x4c00100e, 0xd8ffb82d, 0x2b231083, 0x83f8ffb8,
		0xb8292720, 0x18b3e0ff, 0x07824d00, 0x17b3e822, 0xd8220784, 0x078416b3, 0x13b4e025, 0x834c0015, 0x404a0818, 0x00121148, 0x3e3f3d4c, 0x3d409c3f,
		0x403d4014, 0x2b1c2e3e, 0x3730132b, 0x17372323, 0x380c3717, 0x07040138, 0x03093b07, 0x3d59403f, 0x172e673e, 0x0d261818, 0x6435100d, 0x261f2222,
		0x09080463, 0x063b3b01, 0x06650c38, 0x96420067, 0x32cd230a, 0x03823f2f, 0x2f391124, 0x8d4139cd, 0x099f4205, 0x2305e446, 0x2f33cddd, 0xac422182,
		0x0e444807, 0xb0422520, 0x1625220b, 0x06ec4a16, 0x4a352321, 0x273309f5, 0x32333636, 0x1415021e, 0x15160706, 0x23020e14, 0x42052722, 0x012107d9,
		0x06d042b9, 0xbefe2f08, 0x1614210b, 0x0c262621, 0x191c1a16, 0x0c240e0e, 0x1a310f13, 0x0f192011, 0x0c2b100f, 0x2e1e2a1a, 0x15690125, 0xfe460f22,
		0x7b0146e6, 0xe942fa46, 0xb4260807, 0x110d0805, 0x0b320c15, 0x0a090f12, 0x0d092b05, 0x12190f07, 0x140b1e0f, 0x171d0e2d, 0x1bae0e0e, 0x02621a38,
		0x0082006b, 0x5c000238, 0x9a0156ff, 0x1d00d101, 0x84002900, 0x181b1040, 0x144d0012, 0x04820a20, 0x18092821, 0x2214755d, 0x860db3e0, 0x05955e17,
		0x0a40e827, 0x4c000d0c, 0x0838830f, 0xffb80823, 0x111b40e8, 0x95084d00, 0x911d1616, 0x000e0e00, 0x27942100, 0x1d2a2b27, 0x0b1e9a24, 0x2f00119b,
		0x088c57ed, 0x332f322c, 0x32ed102f, 0x312bed2f, 0x594c0030, 0x17252909, 0x15040e14, 0x32331614, 0x220aff79, 0x57373504, 0x012b0aaa, 0x1f15013d,
		0x30151f25, 0x18393b2e, 0x3c140856, 0x2c1d14f3, 0x26222126, 0x1e2e2617, 0x1c141040, 0x1e18342b, 0x2824272e, 0x25de1e2d, 0x06c5571f, 0x00ffff2d,
		0x01000009, 0x023e03eb, 0x82240026, 0x00073a09, 0x00040043, 0x40100089, 0x1a00020b, 0x500f0418, 0x4f190902, 0x00342b2b, 0x222b9200, 0x86fdff8f,
		0x1901222b, 0x202b8417, 0x202b8e18, 0x2257883a, 0x5f000069, 0x578205eb, 0x0a091a22, 0x1c205792, 0x75202b88, 0x25202b89, 0x24205785, 0x1a20578e,
		0x83202b88, 0x23082b84, 0x1022402c, 0x02261020, 0x30012630, 0x50204020, 0xc0209020, 0xe020d020, 0x0820f020, 0x23090320, 0x1709024f, 0x01254282,
		0x715d5d10, 0x20318231, 0x36f78503, 0x1a00ed02, 0x2d002100, 0x00b99f00, 0x40d8ff11, 0x000f085d, 0x83280d4c, 0x12550805, 0x9d0c229d, 0x1e022828,
		0x03091b1c, 0x0478031b, 0x04041409, 0x1b1f0109, 0x001b0015, 0x14151a78, 0x041b151a, 0x1a9f1a8f, 0x5f1a4f02, 0xaf1a7f1a, 0xef1abf1a, 0x071aff1a,
		0x2e042f1a, 0x2b25a30f, 0x1f790201, 0x1b041e1e, 0x412b0915, 0x03421a00, 0x3f004204, 0x22018333, 0x58123333, 0xde2b0515, 0xc61001ed, 0x715dde10,
		0x18873911, 0x2f135755, 0x2f183301, 0x31eddeed, 0x212b2b30, 0x23072327, 0x220c455f, 0x181e0706, 0x21085b55, 0xa6743437, 0x2594350a, 0x105424ee,
		0x1a33302b, 0x2537140e, 0x0e133725, 0x292f3319, 0x076e5518, 0x141b1a24, 0x03831b14, 0xa2a22108, 0x969f9b3f, 0x17250c3b, 0x2a31312a, 0x3b0b2616,
		0x3e9ba097, 0xa63f2302, 0xaba75a58, 0x171a1a17, 0x00210382, 0x08ec8202, 0xe201002d, 0x11006b02, 0x6a001600, 0x15133840, 0x03070302, 0x04780312,
		0x04041407, 0x0f0b1207, 0x04000073, 0x09090d0d, 0x17041810, 0x820b790e, 0x161523f6, 0x01820b15, 0x0a120f25, 0x82410779, 0x790f22f7, 0x20fb8200,
		0x22fb82ed, 0x571232ed, 0x10200874, 0xce2afd84, 0x2f322f32, 0xed2f3911, 0x966e3332, 0xc4102805, 0x31c40ec4, 0x82352130, 0x123622f0, 0x075a5737,
		0x15333a08, 0x07060603, 0x76070133, 0x5c2d5125, 0x6980fa37, 0x1cdb8d69, 0xa2641533, 0x3101aea2, 0x46be468c, 0x360246db, 0x004aae58, 0x2e000100,
		0xcc0157ff, 0x37007902, 0x00b93a01, 0x05a25236, 0x55543620, 0xb8352906, 0x11b4e8ff, 0x2f4c0012, 0x82061751, 0xb3e82407, 0x834d0011, 0x0bb42d07,
		0x2a4c000c, 0xb3f8ffb8, 0x294d0010, 0x08822987, 0x0cb3f022, 0xb3241085, 0x244d000b, 0xb3211882, 0x20078412, 0x283983e0, 0xe0ffb823, 0x00100fb4,
		0x2708824c, 0x0e1540c8, 0x081a4d00, 0x19286183, 0x000e0d28, 0x0810194c, 0x2a052b44, 0x001514b4, 0xffb8054c, 0x8413b3d8, 0x83e02010, 0x460f8243,
		0x08820513, 0x0fb3d02d, 0xb8024d00, 0x13b4c8ff, 0x824c0014, 0x83d02008, 0x08078221, 0x3240d833, 0x4c00110f, 0x40033011, 0x03035003, 0x17003703,
		0x1c14140b, 0x39352424, 0x381c762c, 0x38141400, 0x3808400f, 0x31343480, 0x4637177c, 0x7c272525, 0x068f6921, 0x32ed332d, 0xdc101a2f, 0x3912cd1a,
		0x5b01cd2f, 0xcc250958, 0xd532dd33, 0x06994f5d, 0x8310fc56, 0x13ad4a10, 0x37363622, 0x21050e57, 0x55183233, 0x17240fb4, 0x3d010706, 0x280fc54a,
		0x31060c04, 0x29213c53, 0xc7551846, 0x3a162212, 0x10dc4a4a, 0x0d1b0b27, 0x74502b05, 0xdc55184d, 0x21443311, 0x00000005, 0x5b00ffff, 0xcc010000,
		0x26023e03, 0xaf442800, 0x000e3306, 0xb9130089, 0xf1ff0100, 0x0d0f0940, 0x01500a00, 0x2e440e01, 0x222f9305, 0x441a008f, 0x012305b3, 0x840c0e04,
		0x440d202c, 0x5b85085b, 0x5b883a20, 0x12006924, 0x5b858b00, 0x0940f923, 0x205b9611, 0x202f881a, 0x2a2f8483, 0x0102b11a, 0x40f9ffb8, 0x82200e0d,
		0x0102265f, 0x01014f18, 0x05aa5d0c, 0x5920bf82, 0x9b20b582, 0x2c20bf84, 0x0520bf86, 0x01278f86, 0x02040d0f, 0x86090150, 0x222b92bc, 0x860a008f,
		0x0e0e222b, 0x892b840c, 0x835785bb, 0x455785bb, 0x0122086f, 0x57951100, 0x2b85b783, 0x31054345, 0x1015401e, 0x50155015, 0x041b6f1b, 0x15011baf,
		0xb9820902, 0x450c0921, 0x712b0536, 0x00020031, 0x01fbff12, 0x827102cc, 0x002430e5, 0x1d154060, 0x4d001228, 0x0011201d, 0x8218184d, 0x83182009,
		0xb8102809, 0x0db3e8ff, 0x82034d00, 0x1e402107, 0x1b3f0882, 0x23260076, 0x0b731321, 0x24250709, 0x0b217908, 0x7c1e160b, 0x7c16410e, 0x3f004205,
		0x45ed3fed, 0x0128050b, 0x33ced610, 0x10ce32fd, 0x2005ee44, 0x5200822b, 0x272b052e, 0x33352311, 0x32333635, 0x6d01021e, 0x44080518, 0x23263435,
		0x33150722, 0xcc012315, 0x39624729, 0x35353d3d, 0x62393d3d, 0xcefe2947, 0x2a0b180b, 0x5b182d41, 0x62121958, 0x56360162, 0x0f224b78, 0xff401901,
		0x784c220f, 0x0102bafe, 0x415d3b1b, 0xc403767e, 0x054b4240, 0x0000372a, 0x1c03bd01, 0x31002602, 0x07210982, 0x08774600, 0x20000129, 0x50100712,
		0x421f0801, 0x1d26081b, 0xd801f3ff, 0x2b823e03, 0xb7413220, 0x0102290d, 0x09002123, 0x22040250, 0x8f222b98, 0xb7410900, 0x0c022305, 0x2b842022,
		0x2b8e2120, 0x57883a20, 0x2208b741, 0x95250002, 0x85af8357, 0x22af8883, 0x852e0002, 0x05d56157, 0xffff0023, 0x20af8500, 0x2057881a, 0x29f28283,
		0x4017008b, 0x00020310, 0x84823422, 0x2c040326, 0x2004024f, 0x08094360, 0x46000127, 0xae015200, 0x0b00bb01, 0x10402d00, 0x0b090008, 0x03050206,
		0x06080509, 0x0200030b, 0x19332f00, 0xdc1832c5, 0x21058232, 0x0c8a1801, 0x25303132, 0x37270727, 0x37173727, 0x01170717, 0x3282827c, 0x52240287,
		0x83328383, 0x83220e85, 0x93820300, 0x01df2608, 0x008b02d8, 0x00230019, 0xb967012d, 0xf0ff2c00, 0x4d000cb3, 0xf8ffb82c, 0x000b2c40, 0x1138294d,
		0x18284d00, 0x20048313, 0x3004820f, 0x4d000e10, 0x00142027, 0x1108234d, 0x10224d00, 0x2004820c, 0x2d278208, 0xe0ffb81e, 0x4d0013b3, 0xd8ffb81d,
		0x1f821d40, 0x11101c27, 0x28184d00, 0x2004820d, 0x21248220, 0x0e822017, 0x0e181724, 0x8f424d00, 0x450b2007, 0x078206fe, 0x82b3e021, 0x22078217,
		0x820940d8, 0x1003212f, 0x2005bf5c, 0x208883d0, 0x82258327, 0x2007821d, 0x210f86e8, 0x6f82b3d8, 0xffb82626, 0x120940b8, 0x40207082, 0x75825882,
		0x1d40d027, 0x1c4d000c, 0x20128220, 0x2612831c, 0x0010281c, 0x8228174d, 0x830b201c, 0xb807237a, 0x3f83c8ff, 0xffb80625, 0x823140a8, 0x0a32081a,
		0x15141e1d, 0x28071509, 0x15161727, 0x78081608, 0x09141509, 0x1a090915, 0x162f0d76, 0x00762416, 0x2115162e, 0x0946127c, 0x057c2b08, 0xed3f0045,
		0x038332c6, 0xd6100124, 0x517933ed, 0x05214805, 0x82c40e21, 0x87102100, 0x5d520684, 0x05c0450a, 0x850e814b, 0x2b2b2614, 0x023e3413, 0x05a65f33,
		0x3407664b, 0x26372707, 0x26342526, 0x16160327, 0x25363233, 0x13171614, 0xf2531826, 0x385f0808, 0x1e3e152f, 0x3a21231f, 0x2e3e3152, 0x1e203d17,
		0x0b67011f, 0x270fbf0c, 0xfe464614, 0xbe0b06ed, 0x4515240f, 0x53360142, 0x1b274f7a, 0x293d1f2d, 0x7a53557b, 0x301c2650, 0x7928421f, 0x1f543255,
		0x0a0d76fe, 0x53307a82, 0x0c88011f, 0x0000820a, 0x00ffff00, 0x01f3ff30, 0x023e03c4, 0x43380026, 0x0020063f, 0x2a07b745, 0x1d0940fd, 0x5014041b,
		0x451c0601, 0x2f8f09b7, 0x23084343, 0x1a1c0d01, 0x1b202c84, 0x85084343, 0x883a202b, 0x0843435b, 0x1f000122, 0x8788588c, 0x2b881a20, 0x24081743,
		0x1c000102, 0x2658822e, 0x4f260602, 0x431a0601, 0x8f630817, 0x20bb8308, 0x89bb843c, 0x130c288b, 0x500c0411, 0x85120401, 0x0200238b, 0x21824900,
		0x6b02c731, 0x1e000f00, 0x15406f00, 0x0010101c, 0x8328184d, 0x0f182104, 0x102c0982, 0x094d000e, 0xb3e8ffb8, 0x064d0008, 0x82064748, 0xae721807,
		0x1f402108, 0x1a3f1882, 0x14200776, 0x00730d02, 0x200f100f, 0x0f08030f, 0x0d79141f, 0x7913420f, 0x00410002, 0x82eddd3f, 0x05f77902, 0x60533220,
		0x05eb4107, 0x15331322, 0x2c056258, 0x2323020e, 0x22132315, 0x33150722, 0x05d46432, 0x52492f08, 0x7c731e1f, 0x375b4023, 0x199c5237, 0x233a0e23,
		0x19172a3a, 0x6b023328, 0x585b0367, 0x1633503b, 0x01bf0180, 0x35200df9, 0x192b2129, 0xc682000a, 0xff47003a, 0x02dc01f5, 0x013f00b5, 0x3e00b935,
		0x0db3f0ff, 0xb83e4d00, 0x0cb3d8ff, 0xe0250784, 0x000b0ab4, 0x2010844c, 0x21108509, 0xbd820e40, 0x82083921, 0x1039251e, 0x314d000a, 0x0782e086,
		0x1840e027, 0x2a4d0011, 0x21418218, 0x04821025, 0x0b102425, 0x83234d00, 0x82102009, 0x0cb42424, 0x824c000e, 0xb3e02108, 0x07821582, 0x0ab3d824,
		0x07824d00, 0x08b4e024, 0x2a7e0009, 0x203d8205, 0x227a830d, 0x824d0010, 0x7ef82007, 0xe820063a, 0x0c219283, 0x069a54b8, 0xd0210882, 0x202082b3,
		0x21108203, 0x4a824140, 0x17174b08, 0x40088227, 0x2f4d0009, 0x6f083f08, 0x08080308, 0x00822d0f, 0x480b0840, 0x82200000, 0x7f34410f, 0x08013500,
		0x2d004035, 0x200f0827, 0x08203b2d, 0x88301d08, 0x4a354d3b, 0x5112881d, 0x3fed3f00, 0x3912ed3f, 0x3912392f, 0x01833311, 0x2d057541, 0x33edde10,
		0x11ed2b2f, 0x2b5d2f33, 0x6b1832ed, 0x8a410f19, 0x20058405, 0x05475701, 0x2f08e37c, 0x3727022e, 0x3233031e, 0x2e343536, 0x36343504, 0x0808b350,
		0x2311159f, 0x023e3411, 0x021e3233, 0x160f9001, 0x0d0e0c1c, 0x282e281b, 0x1057521b, 0x05151d21, 0x1a14050e, 0x26290f1e, 0x2830281b, 0x15171e1b,
		0x2a282421, 0x2a17532d, 0x402e263d, 0x26021126, 0x1c212818, 0x0f15100d, 0x18171a14, 0x4c273323, 0x0808064d, 0x09034903, 0x26280609, 0x171b231b,
		0x241e271d, 0x28141730, 0x442d2617, 0x0113fe3c, 0x34492cef, 0x3428171d, 0x00ffff00, 0x01f5ff3a, 0x02b502b0, 0x00440026, 0x00060100, 0x00000043,
		0x020b4010, 0x1c323401, 0x0f025013, 0x2b2b4f33, 0x21279234, 0x2785128f, 0x31331b22, 0x32202784, 0xaf20278c, 0x69214f88, 0x21278509, 0x4f93360e,
		0x27889120, 0x77867520, 0x853f0521, 0x8c3e204f, 0x888f204f, 0x82832027, 0x40172727, 0x05020310, 0x78824533, 0x3d0f0326, 0x310f024f, 0x8806ad43,
		0x87b820a7, 0x6301212f, 0x14222f82, 0x2f820d40, 0x58833620, 0x0f02032a, 0x342b4f34, 0x0034342b, 0x0809b768, 0x42003421, 0xbb004b00, 0x18252b40,
		0x254d0010, 0x000e0d10, 0x0b18244c, 0x204c000c, 0x4d000d20, 0x820c1020, 0x0b203104, 0x101f4d00, 0x194d000e, 0x4d001218, 0xe8ffb80e, 0x22069360,
		0x831940e8, 0x4b27082a, 0x3e820c03, 0x41411a2a, 0x0b824322, 0x4d0b1212, 0x32228238, 0x40c0ffb8, 0x48161328, 0x4c223232, 0x0c278935, 0x82274b86,
		0x3b003501, 0x511d1a88, 0x880f1111, 0x48035117, 0x31500688, 0x00882e31, 0x2b064d7f, 0xed3f32ed, 0x333f2f32, 0x393911ed, 0x2705a072, 0x32c61001,
		0xed102b2f, 0x2208db68, 0x18333333, 0x20075144, 0x2300852b, 0x17163213, 0x2409ce68, 0x37323316, 0x055a7617, 0x530d6c60, 0x13230921, 0x6e150622,
		0x26280575, 0x37262726, 0x23022e34, 0x9b081182, 0x0f382c96, 0x811a2a10, 0x2934b901, 0x040b2520, 0x0d1c1813, 0x1b133321, 0x31211d38, 0x22111021,
		0x1d0c2131, 0x1626240c, 0x0909082a, 0x21213035, 0x2711201f, 0x020c0b0e, 0x0f09d114, 0x24170812, 0x1e22db01, 0x05ec221e, 0x4b480711, 0x09044616,
		0x14170508, 0x28191417, 0x371f1b33, 0x06051729, 0x0c402f17, 0x0c084406, 0x242afcfe, 0x0d10301e, 0x0b203b19, 0x1e31253e, 0x00463a0c, 0x31000100,
		0xc30157ff, 0x3700db01, 0x00b98c00, 0xb4e0ff2e, 0x4c000e0d, 0xe0ffb828, 0x4d000eb3, 0xe8270782, 0x000d0940, 0x4d18184d, 0xe02b0550, 0x00150fb4,
		0xffb8024c, 0x833040d8, 0x40112509, 0x02035003, 0x27061c4d, 0x3422221a, 0x1a822b39, 0x2b091c4d, 0x88303333, 0x23513717, 0x1f882623, 0x4d066a41,
		0xcd22191c, 0x1c4dd432, 0x16094d09, 0x18095258, 0x250e5860, 0x07060617, 0x0b4d2601, 0x070d2310, 0x4d186e5b, 0x222216bc, 0x0b4d2a46, 0x0e1e2411,
		0x186a770d, 0x2213ce4d, 0x47010b0c, 0x282a0553, 0xc701f5ff, 0x2602b502, 0xbb434800, 0xb9132e08, 0xffff0200, 0x23250940, 0x02500213, 0x05385100,
		0x00ffff22, 0xbf432b8f, 0x24182207, 0x20288422, 0x066f4323, 0xaf202785, 0x69215388, 0x05bf430d, 0x8a270f21, 0x204f8850, 0x2027888f, 0x27278283,
		0x03104017, 0x36240f02, 0x03265082, 0x024f2e00, 0x97432200, 0x82362009, 0x83c220ab, 0x0c0121ab, 0xdd21ab85, 0x05594d00, 0x0940d829, 0x0b011719,
		0x52020150, 0x5b82053c, 0x8f212b8f, 0x242b86e6, 0x180940e8, 0x202b8416, 0x21598217, 0x2b880034, 0x5786af82, 0x57876920, 0x0940db23, 0x8257941b,
		0x202b86b3, 0x4d2b8283, 0xdb2405ad, 0x2a180d40, 0x02265882, 0x014f2202, 0xfc471602, 0x00022208, 0x32b78237, 0x00b502cc, 0x00350022, 0x331040d0,
		0x4d000f18, 0x820e1033, 0x0d083104, 0xb82f4d00, 0x0fb3f0ff, 0xb82a4d00, 0x2840e8ff, 0x103b0882, 0x4d001018, 0x000a1810, 0x08280f4d, 0x0c4c0009,
		0x4d000920, 0x0008180c, 0x82200b4d, 0x100b2519, 0x074d000a, 0x0c823483, 0x40210783, 0x0825833e, 0x1e01214c, 0x001d1e04, 0x1a191900, 0x141d1d17,
		0x37048223, 0x360e822c, 0x00180117, 0x221a2122, 0x88291819, 0x10110011, 0x03112011, 0x11182208, 0x03221811, 0x314d1e1d, 0x00510988, 0x333fed3f,
		0x2f2f3917, 0x105d5e2f, 0x11cd10ed, 0x04843939, 0xd6100133, 0xedde10ed, 0x392f3232, 0x332f3339, 0x1133112f, 0x0b106d12, 0x22053644, 0x4a160701,
		0x2e2e0612, 0x36343502, 0x17163233, 0x07272626, 0x05823727, 0x16163729, 0x34033717, 0x52263526, 0xb35b055c, 0x015e0805, 0x271d60cc, 0x3b4c2c11,
		0x172d442d, 0x3a265360, 0x141c050e, 0x0f5c156b, 0x142e171f, 0x586e1a33, 0x17391901, 0x190d3438, 0x2d221825, 0x4b020a1a, 0x5a8d3121, 0x34536531,
		0x274c3e26, 0x0d1d7872, 0x251f4224, 0x1f112038, 0x2b0d3011, 0x8cfe2620, 0x1b081216, 0x1d475a16, 0x25182936, 0xd7424c3c, 0x00472a05, 0x02b00100,
		0x00260291, 0x22098251, 0x82750006, 0xb9132e16, 0xffff0100, 0x14220940, 0x01500500, 0x05404d02, 0x22068742, 0x82b502cc, 0x8452202b, 0x4643202b,
		0x0528066f, 0x00092123, 0x220e0250, 0x8b0ad742, 0x868f2027, 0x220d2227, 0x84278420, 0x204f8850, 0x204f88af, 0x06974669, 0x93250021, 0x85a3834f,
		0x07bf4677, 0x852e0021, 0x8c2d204f, 0x888f2077, 0x08bf464f, 0x34220022, 0x03257882, 0x024f2c0e, 0x08854d0e, 0x00032008, 0x0124002e, 0x00e901c7,
		0x000f0003, 0x4026001b, 0x04021010, 0x0a0a0316, 0x0d071c1d, 0x82131903, 0xdd2f2517, 0xde10cdde, 0x2d05c960, 0xcedd33ce, 0x13303133, 0x05211521,
		0x79180614, 0x112008f5, 0x2e2e0b8a, 0x67fe9901, 0x1a200601, 0x1b21211b, 0x0787201a, 0x462a0134, 0x24241884, 0x25251918, 0x25183301, 0x24191825,
		0x5d820024, 0xe0ff282a, 0xf001cc01, 0x24001a00, 0x9d278b82, 0xff2d00b9, 0x580fb4e8, 0xf027059b, 0x000e0f40, 0x8318234d, 0x1023210e, 0x1e200a82,
		0x2a06a758, 0xf0ffb814, 0x00084040, 0x8210074d, 0x19420804, 0x040e1e1f, 0x28011a0d, 0x0c040b29, 0x0d0d0c00, 0x3011821b, 0x2500001a, 0x1f2f0482,
		0x04291e28, 0x1688222c, 0x0b1a1a00, 0x0419010e, 0x2c511609, 0x0c0d0988, 0x0050090c, 0x332f333f, 0x123fed10, 0x08843917, 0x39171122, 0x2305004d,
		0xedde1033, 0x11201182, 0x03831882, 0x21086667, 0x83453737, 0x37172207, 0x08ca4217, 0x07272624, 0x04823401, 0x33161628, 0x14273632, 0x25821716,
		0x06222330, 0x1b172d2d, 0x2d4d381f, 0x2f2a3045, 0x0a82182e, 0x2e4e2608, 0x2a193a21, 0x09071c01, 0x15240eb5, 0x07fa443a, 0x250eb409, 0x04433915,
		0x3353203e, 0x233f5a37, 0x3f243924, 0x080a821f, 0x23405926, 0x01391113, 0x14321c08, 0x5b0a0cf5, 0x142e1f4e, 0x5b0b0cf4, 0xffff0000, 0xf6ff4400,
		0xb502ad01, 0x58002602, 0x2b0b8345, 0x40feff01, 0x07171909, 0x09015000, 0x8f08d744, 0x0683422b, 0x180e0123, 0x20288416, 0x06334217, 0xaf202785,
		0x83425388, 0x01012206, 0x88508a1b, 0x888f207b, 0x065b4227, 0x01010224, 0x50822a18, 0x22090225, 0x4409014f, 0x2f8207cc, 0x58ff2424, 0xab84cd01,
		0xab845c20, 0x000f8f2c, 0x0b401000, 0x21231401, 0xa8821520, 0x7f832220, 0x00020039, 0x015bff47, 0x00b502cc, 0x00250014, 0x231f407c, 0x4d001020,
		0x820f1823, 0x0e102404, 0x83184d00, 0x2818210e, 0x18200e82, 0x13290e83, 0xb4e8ffb8, 0x4c000a08, 0x23088202, 0x4d000ab3, 0xe0220782, 0x078409b3,
		0x40e82608, 0x4d00081e, 0x27008215, 0x7f080d1e, 0x08010a00, 0x881a260a, 0x0c0b5010, 0x214b0a4d, 0x00510588, 0x3f3fed3f, 0xb74a1833, 0x0dce4c08,
		0x252b2b23, 0x052e5f14, 0x18231521, 0x20085a50, 0x05aa4807, 0x11074908, 0x32331616, 0xcc01023e, 0x2f4a331b, 0x530e3825, 0x1a361d53, 0x1e35482a,
		0x2d211255, 0x1a2f1a1a, 0x211d360e, 0xe70e1e2f, 0x24405935, 0x03b70b12, 0x0ff60e4c, 0x5a3f210d, 0x2a412b3a, 0xfe111215, 0x1a160df3, 0x00003d2d,
		0x23081741, 0x0026028f, 0x35051741, 0x00000f83, 0x02104017, 0x35231001, 0x02501520, 0x014f2d09, 0xcb462109, 0x05335909, 0x83580620, 0x588a2008,
		0x172009af, 0x4b0f3359, 0x7b20055f, 0x2008bf4a, 0x0677448a, 0x4b310e21, 0x53850d0f, 0x53872820, 0x89610121, 0x291b2353, 0x84820f04, 0xef4e1720,
		0x20538508, 0x08e34a9d, 0x10292b83, 0x05020b40, 0x131c4335, 0x050e4b50, 0x00344f08, 0xff090002, 0x02f00159, 0x0022006b, 0x40750029, 0x2426163d,
		0x23171d23, 0x1d187817, 0x1d181814, 0x1e232715, 0x78142314, 0x00141e00, 0x00231e00, 0x060c1118, 0x2a182b00, 0x2a0e4008, 0x79161580, 0x18262627,
		0x411d1e23, 0x14421817, 0x6e184400, 0x1a2f0d13, 0xcd1adc10, 0x10c61001, 0xcdccdede, 0x57391211, 0x873b08bb, 0x872b1018, 0x0e10c47d, 0xc4c405c4,
		0x06253031, 0x06060706, 0x32331415, 0x44173736, 0x3720069f, 0x2306cb58, 0x03031e33, 0x4d081e82, 0x01262633, 0x0b150eea, 0x06240e0d, 0x17070a14,
		0x282c3324, 0x24ee2617, 0x312a1154, 0x1d661e36, 0xe0292f35, 0xc8183617, 0x08023517, 0x150e0b12, 0x03031a0d, 0x20220a36, 0xa513321d, 0xa29a42a2,
		0xa24a4aa3, 0xdf0199a2, 0x5a58a63f, 0x008200a7, 0x3a000222, 0x2608f782, 0x00db01b1, 0x00430034, 0x3f00b99a, 0x12b3f0ff, 0xb83f4d00, 0x1a40e8ff,
		0x2c4d0011, 0x00121110, 0x0b18234c, 0x831f4d00, 0x18182904, 0x4c00110f, 0xe0ffb803, 0x2306647a, 0x0b09b4e8, 0x29081085, 0x00082e40, 0x2919394d,
		0x1116057f, 0x4145050b, 0x32322182, 0x400d4421, 0x3c804413, 0x10260089, 0x26080226, 0x88350026, 0xc24b511c, 0x3911250c, 0xed5d5e2f, 0x29072441,
		0xed102f32, 0xccdcde10, 0xb54b10cd, 0x3213270d, 0x1115021e, 0x1e41030e, 0x0bb24b0e, 0x200be66a, 0x0c116b13, 0x4734f737, 0x1a09122c, 0x06231218,
		0x16060b14, 0x1b2f3325, 0x1225111b, 0xb2591826, 0x35250812, 0x1010311f, 0x2c17192d, 0x013d1622, 0x422e1adb, 0x06defe27, 0x0c1b1915, 0x3603031a,
		0x1520240a, 0x02021d2a, 0xc159180d, 0x60fe3411, 0x058a0304, 0x1d120706, 0x00232d16, 0x2e00ffff, 0x5701f3ff, 0x2620057b, 0x2f060751, 0x00890036,
		0x010b4010, 0x07212337, 0x0c015000, 0x2a090355, 0x01f5ff31, 0x02b502c3, 0x44460026, 0x2d20056b, 0x27056b44, 0x00222431, 0x0401501a, 0x85076f4a,
		0x823a2053, 0x22538527, 0x5c360069, 0x01230527, 0x84222633, 0x24298453, 0xffff0000, 0x20538500, 0x215388af, 0x53853269, 0x23273222, 0x24205384,
		0x85063f45, 0x87222053, 0x62012153, 0x23215389, 0x55538429, 0x5385097f, 0x53879720, 0x36620122, 0x36225385, 0x53842a24, 0xfb88d184, 0x53883d20,
		0x53895f20, 0x84252121, 0x43262053, 0x5385089f, 0x5388b220, 0xa7875f20, 0x84262221, 0x86272053, 0xff3625a7, 0x03cc01fb, 0x27285383, 0x07010000,
		0xddff5f01, 0x26056f58, 0x40d6ff02, 0x45211d09, 0x2b2306c3, 0x8200342b, 0x00033000, 0x01f5ff14, 0x00b502f4, 0x0021000e, 0x186a0025, 0x3927c159,
		0x4d000e23, 0x0e212522, 0x0827117f, 0x09401982, 0x2619480c, 0x004d2524, 0x59188803, 0x3f2b12c6, 0xd61001cd, 0xde10ed2b, 0x5ade32ed, 0x5918081e,
		0x23081eca, 0x35230737, 0x2c0b1901, 0x17241a19, 0x19303c0b, 0x18520823, 0x472c334b, 0x2c171c32, 0x2e202840, 0x3718db0c, 0x1cd15918, 0xc7c7f625,
		0x58ffff00, 0x0223075f, 0x82ab0006, 0x000222ef, 0x20ef8228, 0x27ef82e0, 0x0029001a, 0x2500b97e, 0x0d5f8218, 0xffb82025, 0x824240f0, 0x181530db,
		0x4c00100f, 0x00091014, 0x0820144d, 0x83104d00, 0x1b320804, 0x7f000103, 0x2b090607, 0x2a128223, 0x06860009, 0x1e050303, 0x01174188, 0x17101700,
		0x08031720, 0x88265017, 0x0504510d, 0x333f004d, 0x5e3fed3f, 0x8b585d5d, 0x25fe8209, 0xcdfdcd32, 0x6a483333, 0x23012908, 0x37353335, 0x23153315,
		0x0ec65a18, 0x26261523, 0x09c27d23, 0x4c013708, 0x4252b1b1, 0x36501a42, 0x1f384f30, 0x2c47321a, 0x0e0e3423, 0x2c1f1c31, 0x39480d1c, 0x0209281d,
		0x0e453e24, 0xe9fd3e53, 0x3f221008, 0x5936385a, 0x0a122440, 0x5a180d51, 0xe35a08ec, 0x5a06200a, 0x8a200857, 0x200c875a, 0x10875a0c, 0x2005b34d,
		0x4e2f827b, 0x63460507, 0x220b2107, 0x260db34d, 0x0100005b, 0x872803cc, 0x61012157, 0x1024578c, 0x500a001e, 0x2005aa5a, 0x0b5f4e34, 0x57879d20,
		0x46610121, 0x0b2506bb, 0x02133426, 0x05de4d50, 0x935b3420, 0x88222008, 0x00622257, 0x05c74216, 0xfdff0126, 0x140e0940, 0x97205795, 0x62205788,
		0x24215787, 0x0857892a, 0x0001003c, 0x0159ff5b, 0x006b02cf, 0x404a0021, 0x050b1025, 0x1a1e1e21, 0x2321161a, 0x1773201c, 0x1c791f22, 0x791b201c,
		0x20204118, 0x07177921, 0x00800d40, 0x3f004217, 0x1adc1a33, 0x7e1810cd, 0xd6300ac5, 0xce1032ed, 0x322f3232, 0xccdc102f, 0x253031cd, 0x23129146,
		0x21373636, 0x09527118, 0x19cc0123, 0x058d4617, 0x24160636, 0x10152c33, 0xfe050e08, 0xfe5b01e5, 0x01e8e8f7, 0x170e021f, 0x21098446, 0x1c822615,
		0x6b020426, 0xdb46be46, 0x20057b46, 0x35b38228, 0x00db01c7, 0x0037002e, 0x3400b9b7, 0x1d40e8ff, 0x2d4d000e, 0x04821010, 0x820f1821, 0x08102404,
		0x83284d00, 0x2027210e, 0x2105044e, 0x2082b3e8, 0xffb80729, 0x0d0cb4e0, 0x82024c00, 0x748a1808, 0x49092008, 0xb3200546, 0x01273282, 0xb3d0ffb8,
		0x824d0012, 0x83e82007, 0x0807821f, 0x2740d826, 0x4c00100f, 0x2212181d, 0x822f0c0c, 0x05373903, 0x14382a82, 0x80381a40, 0x37378605, 0x080b0b00,
		0x32512588, 0x21055a52, 0x685fed3f, 0x06954605, 0x32edd622, 0x2105554b, 0xe643ccde, 0x05144e08, 0x182b2b21, 0x470e7f5c, 0x362111c1, 0x09a44637,
		0x26361728, 0x020e2223, 0x5c180107, 0x0a3f0b95, 0x0f0d0f23, 0x0a140624, 0x33241606, 0x09101730, 0x08100809, 0x1e3c5b3c, 0x994e3e26, 0x18333f01,
		0x210fa85c, 0x53411119, 0x20242807, 0x0a102415, 0x18010107, 0x2508ba5c, 0x24164739, 0xcb5d182e, 0x423d2009, 0x5f220867, 0x2b461b00, 0x0c012806,
		0x500a0010, 0x45110101, 0x13430883, 0x42b22005, 0x5f200863, 0x26076342, 0x02132622, 0x45000250, 0x2e260783, 0xc701f3ff, 0x27823a03, 0x00002a28,
		0x69000701, 0x53862d00, 0x272b2c28, 0x01500109, 0x538a280e, 0xad015824, 0x2b82af02, 0x2b824a20, 0x2b820620, 0x1000002e, 0x0f020b40, 0x10072f33,
		0x300c0250, 0x220a7f46, 0x872803c7, 0x61012153, 0x22082b46, 0x84382a35, 0x092b4653, 0x83ff2821, 0x879d2053, 0x862b8253, 0x40322153, 0x2e205384,
		0x2220538c, 0x62205388, 0x2821a789, 0x2053942e, 0x21538897, 0x53860062, 0x8e363021, 0x01562453, 0x867902c7, 0x01062b53, 0x000012c3, 0x0d01b60a,
		0x5082292f, 0x00342b26, 0x00ffff00, 0xb9209f85, 0xc4214b88, 0x224b8516, 0x8c383025, 0x002d224b, 0x06474100, 0x09822b20, 0x5e000721, 0x07240c7f,
		0x00015001, 0x2306d75e, 0x2c000200, 0xb0292182, 0x15003e03, 0x8a001b00, 0x955c1840, 0x092e3429, 0x7f0d4d00, 0x1a401d0c, 0x6017181b, 0x1c191916,
		0x827f1503, 0x0008314b, 0x0688111c, 0x40171b50, 0x80181619, 0x01181a1a, 0x09a95c18, 0x2f32ce29, 0x32cd101a, 0x4c32cd1a, 0x11240865, 0x332f1933,
		0x15821082, 0x705e1820, 0x332b210a, 0x2008644c, 0xbf5c1815, 0x17112509, 0x27072707, 0x0ec55c18, 0x541a6e28, 0x9d021a54, 0x5c18e20e, 0x03270eca,
		0x3728553e, 0x82002837, 0x821220e3, 0xe2350897, 0x13006b02, 0x55001700, 0x0e172c40, 0x11137302, 0x0d161901, 0x080a7305, 0x06010600, 0x07001518,
		0x0a0d110a, 0x00167904, 0x0a080116, 0x06160a16, 0x02410b0f, 0x05276406, 0x39391222, 0x2205d351, 0x82333311, 0x01322dbf, 0xce5dd610, 0x3232ed33,
		0xce32de10, 0x31240682, 0x23110130, 0x35240185, 0x15333533, 0x152b0384, 0x33152323, 0xc053ad01, 0x83353553, 0xc0882e04, 0xfed401c0, 0xfe20012c,
		0x3dd401e0, 0x2500825a, 0x01006e3d, 0x9b821400, 0xb502b027, 0x87001d00, 0x053c47b6, 0xffb80e24, 0xd656b3d8, 0xb3f02405, 0x844d0011, 0x8409200f,
		0xb3e02807, 0x0d4d0008, 0x83e8ffb8, 0x0807821f, 0x2d40e034, 0x124d000a, 0x081f117f, 0x7f1a0406, 0x1b00011d, 0x121e1b01, 0x1c074a1b, 0x03010104,
		0x0b008816, 0x0b200b10, 0x08040b40, 0x0302500b, 0x333f004d, 0x5b475e3f, 0x32cd2305, 0xc783333f, 0xfdce3225, 0x4133cc32, 0x13200b7a, 0x18065c47,
		0x82113f5e, 0x42143ae3, 0x13a2a252, 0x43311631, 0x2d521228, 0x0a311737, 0x62024252, 0x3e530e45, 0x0e7f415b, 0x00240223, 0x08376100, 0x26021c23,
		0x05df6000, 0x2208275f, 0x611a0001, 0xd3660537, 0x056b5409, 0x26029122, 0x20061354, 0x0a3f5475, 0x01162426, 0x0201500b, 0x8805804a, 0x88062057,
		0x08f74d57, 0x0c000122, 0x850f6361, 0x887b2057, 0x8a8a2057, 0x54162057, 0x59260e97, 0x9b010000, 0x57872803, 0x2909fb4d, 0x1e100001, 0x01500204,
		0x83440c09, 0x20578508, 0x2157879d, 0x578a6101, 0x84281a21, 0x851620af, 0x0136082c, 0x59ff5900, 0x6b029b01, 0x41002100, 0x1b1e2040, 0x0f14191c,
		0x04022109, 0x1c1c7301, 0x400b2223, 0x00802211, 0x411f791d, 0x04791c01, 0x3f004219, 0x3f32ed33, 0x1f4632ed, 0x12112905, 0x32fd2f39, 0xccdc32cd,
		0x0a517618, 0x3a472320, 0x23373013, 0x23113335, 0x01152135, 0x10777823, 0x4d100d17, 0x2f2507c6, 0x0b0d1016, 0x78761877, 0x470c2008, 0x24310836,
		0x11251520, 0x01460810, 0x004646df, 0x00020000, 0x08a78236, 0x9e02c238, 0x33002700, 0x26404800, 0x0d091825, 0x2b314c00, 0x171c272b, 0x040b2211,
		0x2727017f, 0x40133435, 0x0b803419, 0x51228807, 0x8500282e, 0x3f004903, 0x3fcddeed, 0xaf8933ed, 0xdcfdce2e, 0xcdccde32, 0xcd2f3311, 0x132b3031,
		0xe2589783, 0x4e172005, 0x36261385, 0x2e223736, 0xed7a3502, 0xbc34080b, 0x2626d886, 0x0c0e311d, 0x0d07171e, 0x1506230f, 0x2516060a, 0x10182f33,
		0x2c040804, 0x150e233a, 0x1a26261a, 0x0125251b, 0xe3fe458b, 0x080e2f45, 0x08151546, 0x2a0ab846, 0x08031125, 0x47301802, 0x1865012f, 0x42074260,
		0x22200a8f, 0x2008df41, 0x28f58262, 0x4010008b, 0x0e00010b, 0x0bdf4114, 0x01002108, 0xf5ff3600, 0xd001c201, 0x28001500, 0x20131640, 0x4c000d09,
		0x017f040b, 0x16171515, 0x51108807, 0x3f29f986, 0x121101ed, 0xfdce2f39, 0x22e98ecc, 0x8323030e, 0x18c988d5, 0x8908d560, 0x090323b3, 0xa4830608,
		0x3f578482, 0x029e2408, 0x824c0006, 0x00022c10, 0x01f3ff2a, 0x006b02d7, 0x82130003, 0x0b143581, 0x7312000b, 0x73001505, 0x7c0f1401, 0x02134608,
		0x00420141, 0x2d07b251, 0xedde10ed, 0x312f3911, 0x11233330, 0x74542133, 0x27320805, 0x33161637, 0x11353632, 0x0152527c, 0x234b575b, 0x11211b46,
		0x2927222f, 0x40fe6b02, 0x19195662, 0x331b1343, 0x00bf013f, 0x59000400, 0x9c0159ff, 0x6b849702, 0x2b001f36, 0x27404700, 0x1717831d, 0x2d117f0e,
		0x23238329, 0x03070700, 0x3005de45, 0x148a1a2c, 0x880b490f, 0x8a264b04, 0x00490120, 0x2682824a, 0xed3fedde, 0x5dedde3f, 0x33240592, 0x2f33112f,
		0x32228e83, 0x8e82ed2f, 0x11331125, 0x88262217, 0x8233208a, 0x0be7419a, 0x35082755, 0x6c061415, 0x220b2c52, 0x17090a0b, 0x52252c0a, 0x23192851,
		0x03821923, 0x0786e420, 0xfed0013b, 0x0505a730, 0x35040344, 0xfec80133, 0x02565a39, 0x1b1c21c5, 0x1c1b2121, 0x41078721, 0xf3280747, 0x3a03a501,
		0x2d002602, 0x2006ff46, 0x06474832, 0x15193f27, 0x0150020b, 0x06964301, 0x00ffff2d, 0x0156ff47, 0x02af0287, 0x485d0126, 0x14270547, 0x40100000,
		0x8b2a010b, 0x20278229, 0x22278240, 0x826b02eb, 0x832e2053, 0xc3013127, 0x0d0000ef, 0xff0100b9, 0x1a20b4cf, 0x2b500810, 0x8306a74b, 0x02de224f,
		0x202782b5, 0x20278d4e, 0x212782d2, 0x2785050d, 0x02004808, 0x00004000, 0xa7020602, 0x22000d00, 0x37406900, 0x0e110e1f, 0x141f2278, 0x171f2222,
		0x78111611, 0x1a14171a, 0x0706171a, 0x0e00000d, 0x1f24160e, 0x231c731a, 0x111a1f11, 0x411d1c11, 0x1617421c, 0x06060c42, 0x70410e22, 0x333806c2,
		0x39123f3f, 0x33332f19, 0x102f1801, 0x1032edd6, 0x332f32ce, 0xcddedd2f, 0x08050b52, 0x10188721, 0x7d04872b, 0x013031c4, 0x36373434, 0x06173736,
		0x16141506, 0x06062717, 0x17031e07, 0x18262623, 0x08097b79, 0x03018736, 0x13401922, 0x5d010113, 0x1f335026, 0x152a2d34, 0x3357225d, 0x4d2a5252,
		0x0bd0011e, 0x5b2e0912, 0x4f281528, 0x0b140923, 0x4d874d9b, 0x5e51461e, 0x2d9e5d37, 0x0c8f7918, 0xf9824720, 0xd001de26, 0x65001600, 0x31fb6218,
		0x62184920, 0x33213cfb, 0x22de8215, 0x18060633, 0x271ffb62, 0x30c2d001, 0x6c33335f, 0x200ec768, 0x24b9822f, 0xff8f0007, 0x070f63c2, 0x0940ad2a,
		0x00020608, 0x07030150, 0x1805c945, 0x29081f65, 0x17003e03, 0x55001b00, 0x63183440, 0x1831182d, 0x091a1a80, 0x0706067f, 0x1c071d13, 0x191a1b18,
		0x35631806, 0xcdde2f0f, 0x1001cddd, 0x11ce10c6, 0x33ed2f39, 0xfe4b1a2f, 0x18052007, 0x24123d63, 0x37270703, 0x41631801, 0x96202f12, 0x180b9013,
		0x012f4730, 0x0dfe46ad, 0x63182c23, 0x03320845, 0x46313608, 0x00ffff00, 0x0156ff5b, 0x026b02cc, 0xdf830026, 0xc3010624, 0xbb420000, 0xb4e22305,
		0xdc82090f, 0x2007bb42, 0x22278236, 0x82b002c2, 0x424f2027, 0x362b05bb, 0xb60a0000, 0x1b212f01, 0x4a501307, 0x5b200683, 0xcc221982, 0x4b886c02,
		0xb72cc222, 0x12222383, 0x48860608, 0x2008c744, 0x244786b5, 0x00c20107, 0x82718283, 0x1a802249, 0x82498418, 0x87478523, 0x01072793, 0xfe710062,
		0x238200ea, 0x0e085722, 0x47854984, 0x881b0221, 0x2023838f, 0x222385e5, 0x84201ae3, 0x01002347, 0x8f841200, 0x0d006b3d, 0x20404200, 0x0b0a0f00,
		0x04730c09, 0x0e030605, 0x0b04030c, 0x0a06090a, 0x820a0405, 0x41072d01, 0x4202790d, 0x3fed3f00, 0x2f2f3939, 0x230c9b5b, 0xfd32cd32, 0x2a080382,
		0x3031ce10, 0x11211525, 0x11372707, 0x17371533, 0xcc011507, 0x1d42a5fe, 0x1c6b535f, 0x01464687, 0x313b2200, 0x37f62101, 0x82e5463b, 0x051b4672,
		0xb0023508, 0x65001f00, 0x18033a40, 0x4c000c0b, 0x0a092003, 0x10024c00, 0x0f4d000d, 0x110e1b10, 0x0b08077f, 0x01060009, 0x21060608, 0x07061120,
		0x090e0f10, 0x0f07080f, 0x17280182, 0x4d0d850a, 0x51008817, 0xed219183, 0x27938e12, 0x2f391211, 0xcc335d5e, 0x04829883, 0x2b30312a, 0x22052b2b,
		0x3535022e, 0x35249c82, 0x11333523, 0x14269e83, 0x3233021e, 0x65183736, 0x42270857, 0xd8865e1c, 0x186a1c4e, 0x2b105d65, 0x3037227e, 0xf1fe46f4,
		0xa8373728, 0x690a1e42, 0x3e200b77, 0x20087769, 0x071f698f, 0x140d0129, 0x50100712, 0x42130801, 0xff2305f8, 0x4a4700ff, 0x0b5c05ab, 0x07335908,
		0x14160b28, 0x01500500, 0x1f4d1502, 0xff372606, 0x02bd0156, 0x2353866b, 0xf8c30106, 0x23066f42, 0x151bb4f4, 0x2b455382, 0x01b0220b, 0x454f87da,
		0xe9230953, 0x82171db4, 0x20278751, 0x22778237, 0x863d03bd, 0x0107224f, 0x09b3475f, 0x84161221, 0x098f57a3, 0xb220a385, 0x2b835388, 0x2107af5c,
		0xa6841814, 0x2206704a, 0x831d0002, 0xb5023e57, 0x1b000f00, 0x00b9aa00, 0xb3e0ff0b, 0x094d000f, 0xb3f8ffb8, 0x084d000e, 0x40d0ffb8, 0x22088209,
		0x4f101802, 0x402105fa, 0x211e8230, 0x04832001, 0x17821020, 0x0c002d08, 0x010f4f73, 0x15141d0f, 0x1f100f1b, 0x03102f10, 0x73030710, 0x06100600,
		0x06b00620, 0x080506c0, 0xc0ffb806, 0x100d1640, 0x141c0648, 0x40201b82, 0x7f283982, 0x07030103, 0x0c410d07, 0x0a201a83, 0x25081082, 0x0c010c70,
		0x00420400, 0x5d32333f, 0x11333f2b, 0x102b5d33, 0x1001cdd6, 0x5d5e2bd6, 0x5dde32ed, 0x10c5d6dd, 0xc07a71de, 0x4521200b, 0x490806af, 0x1117031e,
		0x15011133, 0x27070614, 0x34353636, 0x72012726, 0x461c3516, 0x1b1d0e4b, 0xfe460918, 0x381c1cd0, 0x01010f11, 0xfe72d360, 0x326b025b, 0x2c616667,
		0x95fd8c01, 0x3309b502, 0x23152e52, 0x1409233f, 0xffff0005, 0xd7410b00, 0x0107240c, 0x5d47ff5e, 0x482307e5, 0x411b0940, 0x1a2005dc, 0x82050642,
		0x3700302a, 0xbd0159ff, 0x20006b02, 0x2f405300, 0x18250915, 0x3e0bd27d, 0x19190e00, 0x2211730e, 0x07107305, 0x07020720, 0x09050f21, 0x167c1d41,
		0x08010e0f, 0x8407000e, 0x5d5e26e7, 0x333feddc, 0x20e38233, 0x0527485d, 0x87c11034, 0x05872b04, 0x5d01c47d, 0x2e253031, 0x23112703, 0xde853311,
		0x4806755a, 0x390806c9, 0x37147201, 0x4b204540, 0x3f401c54, 0x084b1438, 0x0d283119, 0x08080a20, 0x17210717, 0x7e732c15, 0x12fe3b81, 0x76316b02,
		0x012f7379, 0x2595fdc2, 0x05182c3e, 0x02024102, 0xb783292b, 0xb7824720, 0xda01b030, 0x59002100, 0x401a1040, 0x1a4d0012, 0x04821128, 0x00102029,
		0xffb8054d, 0x840ab3e8, 0xb3e02107, 0x3f056974, 0x081a40d8, 0x160f4d00, 0x2023077f, 0x0121007f, 0x21222108, 0x0c89134a, 0x03881c4b, 0xed3f0050,
		0xc2820182, 0xc3835e20, 0x31ccfd23, 0x05b15130, 0x36361326, 0x15163233, 0x0f7a8118, 0x2907295b, 0x592d4723, 0x0b5f5d27, 0xb885331e, 0x21081624,
		0x6718101a, 0x29230eab, 0x86152a3f, 0x100121b5, 0x08b66718, 0x2008476c, 0x08476c06, 0x2208f34c, 0x6c200002, 0x28260f9f, 0xcc01f5ff, 0xeb5e7b02,
		0x222b8308, 0x830b4010, 0x0c8b5f29, 0x20059b6c, 0x4c538728, 0x022609ef, 0x00322400, 0x966c5009, 0x00342105, 0x83057f50, 0x879d2053, 0x081f5153,
		0x53842982, 0xff432020, 0x6d538506, 0x0125089f, 0x00240065, 0x05ef6c89, 0x24222322, 0x03255482, 0x024f2504, 0x07c55b04, 0x3b605b8a, 0x65012308,
		0x31850024, 0x24222422, 0x03215c82, 0x2031820e, 0x2831870e, 0x3700ffff, 0xcf010000, 0x20638303, 0x05b34735, 0x47000021, 0x022c05b3, 0x0940fbff,
		0x08122a2c, 0x2b170250, 0x8206b342, 0x826b202f, 0x02b62125, 0x55205f83, 0x280c0359, 0x000e101a, 0x02015006, 0x0abb440f, 0x7102cf22, 0x5783e382,
		0xc301062e, 0x0d0000dd, 0xff0200b9, 0x2d33b4d0, 0x93445482, 0xff2a2607, 0x01b60156, 0x832782da, 0x0107244f, 0x827fffc3, 0x25298281, 0xb464ff01,
		0x53821117, 0xa7882982, 0x4f863d20, 0x5f010724, 0x8f55e6ff, 0xff022605, 0x2a0940dd, 0x20a7842e, 0x20a78f2f, 0x2c5786b2, 0x245f0106, 0x40100000,
		0x0e0d010b, 0x20a78412, 0x22a78813, 0x84bd01f3, 0x863620ff, 0x591220ff, 0x162806ff, 0x252e3234, 0x330f0150, 0x2408b745, 0x01f5ff42, 0x20fb84b2,
		0x20fb8556, 0x27538609, 0x1b22282a, 0x29090150, 0x3a20538c, 0x53857b82, 0x09006922, 0x2206374b, 0x84333709, 0x8e342053, 0x82af2053, 0x6853852b,
		0x0123065b, 0x84292d09, 0x842a2053, 0x01200829, 0x57ff3700, 0x7902bd01, 0x21014700, 0xff4600b9, 0x0a09b4e8, 0xb8464c00, 0x08b3e0ff, 0xb8454d00,
		0x82050e5c, 0xb3e82507, 0x424d0011, 0x0d230f83, 0x83414d00, 0x840f201f, 0x83d82007, 0xb83f2827, 0x09b3d0ff, 0x833d4d00, 0x000e2317, 0x0783384d,
		0x07841220, 0x3783d820, 0x0f833220, 0x07843f82, 0x2205cc79, 0x822f40d8, 0x182c2128, 0x2c216e83, 0x216b8220, 0x18821829, 0x0a202526, 0x18244d00,
		0x51081982, 0x00102019, 0x0e18194d, 0x194c000f, 0x4d000d10, 0xffb80311, 0x0b3640c0, 0x4703480e, 0x140b1700, 0x331a4414, 0x44762133, 0x3a1a1a49,
		0x012b0076, 0x00482b08, 0x0f171414, 0x80480840, 0x261e2e3f, 0x37343417, 0x1b452e7c, 0x177c1e1b, 0xed3f0046, 0xd4552f32, 0x12112305, 0xe3731a39,
		0x5d5e220a, 0x06346eed, 0x2f261882, 0x32dd33cc, 0xe3552bd5, 0x05394410, 0x662b2b21, 0x3d4d18dc, 0x2e342f07, 0x032e2702, 0x33363435, 0x17021e32,
		0x0d642607, 0x1e172807, 0x06141503, 0x66070107, 0x0b2b10e8, 0x11543c06, 0x384e1419, 0x1818423f, 0x211b257e, 0xf4665358, 0x1b0a2810, 0x0b1d030c,
		0x181d0b44, 0x0820367e, 0x08564821, 0x01000000, 0x57ff4200, 0xdb01b201, 0xff003e00, 0xff3c00b9, 0x000db3e0, 0xffb83c4d, 0x840cb3f0, 0xb3e82207,
		0x2507840b, 0x0a09b4d8, 0x18824c00, 0x08b3d026, 0xb83a4d00, 0x39212885, 0x05cc6cb8, 0xe02a0782, 0x4d000ab3, 0xc8ffb837, 0x078409b3, 0x2783e020,
		0xffb83630, 0x0e6540e8, 0x274c0010, 0x4d000b18, 0x23822027, 0x09282726, 0x20244d00, 0x24226682, 0x09820c28, 0x13821820, 0x10212908, 0x214d0010,
		0x4d000f18, 0x12102819, 0x03114c00, 0x0b17003e, 0x193b1414, 0x821f2c2c, 0x1919403b, 0x26008234, 0x3f260801, 0x3c05ce41, 0x2937803f, 0x3217221d,
		0x1d502988, 0x51173e88, 0x00511500, 0x333f333f, 0x11ed3fed, 0x07cd4139, 0x2f391122, 0x4105ea45, 0xcb410fcc, 0x17c94116, 0x2005c841, 0x05726c35,
		0x16323323, 0x78691817, 0x13bf410b, 0x56060c28, 0x4d231041, 0x6918712c, 0x4d21158a, 0x10b64152, 0x0d1b0b2a, 0x104b1d03, 0x20193915, 0x159b6918,
		0x07423934, 0x27000100, 0xcd0157ff, 0x20006b02, 0x1db44800, 0xfe42181f, 0x0b1d3e05, 0x0003480e, 0x1a14140b, 0x21221818, 0x1b79191e, 0x14140041,
		0x08400f18, 0x42181f80, 0x05d05900, 0x2f391126, 0x32ed3fcd, 0x2b05f450, 0xddcc2f33, 0x10cd2bd5, 0x3031ced4, 0x2325f496, 0x21352311, 0x42058215,
		0x0528119e, 0xaa0d070f, 0x0baaa601, 0x0d29c590, 0x25020e23, 0xdbfd4646, 0x20ab8200, 0x36ab823f, 0x006002c2, 0x40760033, 0x0e181944, 0x194c0010,
		0x4d000d20, 0x820c1819, 0x0b202404, 0x84114d00, 0x301d32b5, 0x26232530, 0x1d1d207f, 0x0035251e, 0x1e08011e, 0x20be8234, 0x2ebe8233, 0x882c8034,
		0x21513317, 0x851d2622, 0x82492023, 0x32ed25c9, 0x333f32cd, 0x83051760, 0x100126d1, 0x105d5ec6, 0x270a82ce, 0x1132ed33, 0x39122f33, 0xde41d983,
		0x23d99606, 0x3535032e, 0x20088b5c, 0x078f4b15, 0x07060624, 0x88434601, 0x070d3410, 0x0a1b2f25, 0xc4526262, 0x24170ac4, 0x142c241a, 0x6a3a0d0c,
		0x0d2b1369, 0x412f1d05, 0x8245d829, 0x1845900e, 0x3008b66a, 0xff000212, 0x002700ff, 0x03cd0100, 0x0026023d, 0x4b098237, 0x08260c07, 0x5000060c,
		0x83760001, 0x693f2009, 0x002107e3, 0x302b8257, 0x68c50106, 0xb60a0000, 0x1c1e6101, 0x2b500d17, 0xdf811834, 0x0f29080c, 0x1b403700, 0x06010305,
		0x0a0c0e73, 0x11100909, 0x0f790d02, 0x03790906, 0x0f080c0c, 0x00420841, 0x39123f3f, 0x32ed332f, 0x06f64110, 0xcc33cd30, 0xcd33ccfd, 0x15013031,
		0x15331523, 0x01821123, 0x35333539, 0xcd013523, 0x527676aa, 0x02aa7777, 0x40c8466b, 0x1d01e3fe, 0x8446c840, 0x088f856b, 0x2300603b, 0x35406100,
		0x000b2017, 0x0c18164d, 0x00074d00, 0x1a217f03, 0x111f1e1e, 0x02050511, 0x001c1c25, 0x1f08011f, 0x03232224, 0x0721851e, 0x1d1d041a, 0x10492100,
		0x14880d10, 0x05644551, 0x88823320, 0x8883cd20, 0x0132cd2a, 0x5d5ec610, 0xce102f32, 0x6d06b77a, 0x13200889, 0x4107a97a, 0x23230992, 0x41022e22,
		0x232005ac, 0x3722a882, 0x0082c4f3, 0x27078741, 0x342d3d0e, 0x620e2542, 0x52260082, 0x7a45d001, 0x6c18203e, 0x20260c2d, 0x82457a3e, 0xaf72000e,
		0x021c2108, 0x56073773, 0x28270acb, 0x5014041a, 0x47270601, 0x3766081f, 0x66912005, 0x2b83080f, 0x0b40102c, 0x16240101, 0x01500007, 0x73472309,
		0xff302606, 0x03c401f3, 0x49538806, 0x012208d3, 0x2f731a00, 0x2053850f, 0x8353887b, 0x2053842b, 0x0d8b6616, 0x28205385, 0xd3495387, 0x00012309,
		0xa7842c1e, 0x6606cc4b, 0x9d2008b7, 0x2b845387, 0x1a215384, 0x20a78428, 0x20a78c16, 0x2b53883e, 0x00000063, 0xb70c0086, 0x1f000102, 0x2b23fb83,
		0x67003434, 0xb8200983, 0x27834f88, 0x01212583, 0x82f7831b, 0x117f7425, 0x00650123, 0x051f4a1b, 0x1b010224, 0xa0821e1c, 0x1f060226, 0x1b06014f,
		0x8808fa6b, 0x08db67a7, 0x1b650123, 0x05176600, 0x1a181c22, 0x0226a882, 0x014f1b09, 0x31871709, 0x3000013b, 0xc40159ff, 0x2b006b02, 0x0fb65e00,
		0x00100f10, 0xffb80b4c, 0x0010b3e8, 0x2807824d, 0x0f2b40f0, 0x20024d00, 0x2104820c, 0x04820b10, 0x0a182408, 0x29004d00, 0x051e1e24, 0x2d157312,
		0x2c057308, 0x132c2620, 0x0d1b4106, 0x0046007c, 0x3f33ed3f, 0x7bdc1033, 0xde2405b3, 0x2f3912ed, 0x2207954f, 0x182b2b2b, 0x21138b84, 0xe5560706,
		0x37f03612, 0x52132d49, 0x1c2c1f11, 0x111f2c1c, 0x0b2b2552, 0x0f0e0e26, 0x07326424, 0x23180e24, 0x8418573f, 0x452710ac, 0x1c071b64, 0x65180e0e,
		0x24270569, 0x001e1520, 0x82440001, 0x01ad29db, 0x002a00d0, 0x2200b960, 0x2230d585, 0x40f0ffb8, 0x4d000f33, 0x0011101b, 0x13101a4d, 0xd5830482,
		0x281a2408, 0x4c000908, 0x050b1015, 0x2c007f28, 0x1d007f20, 0x2b1d0801, 0x292b0d07, 0x8823491e, 0x00511800, 0x87ed333f, 0x5d5e26dd, 0xedde10ed,
		0x20dd8ade, 0x10126525, 0x23086f5e, 0x14153311, 0x09d46e18, 0x1b1a0623, 0x076d5814, 0x10183027, 0x2b170c0c, 0xe56e1810, 0x1606230d, 0xe6641d1b,
		0x10252508, 0x0402080d, 0x0ff66e18, 0x00ffff2d, 0x01000020, 0x023a03d4, 0x5c3a0026, 0x1a260fbb, 0x500d0616, 0xeb4f0601, 0x82132009, 0x02e12221,
		0x202b82af, 0x3709825a, 0xfe690006, 0xb9130000, 0xfeff0100, 0x2c300940, 0x0150250e, 0x2b4f2d0e, 0x2005874b, 0x2021820d, 0x205784e8, 0x26578f3c,
		0x0c041216, 0x50040150, 0x9b6909e7, 0x20578305, 0x0b5b5e5c, 0x26010125, 0x43152022, 0x36200abb, 0xc7221d82, 0x7f823e03, 0x8b763d20, 0x1408270e,
		0x50060812, 0x53891001, 0x21824920, 0xb502ab22, 0x5d202b82, 0x8b0d834b, 0x85ff8229, 0x87222053, 0x58012053, 0xd584059f, 0x0940fc24, 0x56841a14,
		0x2f4c1220, 0x20578509, 0x84578797, 0x4010242f, 0x8b00010b, 0x2057882a, 0x5157883d, 0x57870543, 0x84161221, 0x065a4157, 0x2f820020, 0xb2205785,
		0x2f835788, 0x2a8c5784, 0xa1000122, 0x2008cd82, 0x00b502e2, 0xb92e0013, 0xe8ff0f00, 0x12111540, 0x7f134c00, 0x14150000, 0x0a150909, 0x06880d0a,
		0x9b73184d, 0x33112b08, 0x3912112f, 0x3031ed2f, 0x6575332b, 0x4a162005, 0x0e2505c6, 0xa1111502, 0x917c181e, 0xfa01300d, 0x122c4736, 0x0b470b10,
		0x2d1b0b10, 0x8307fe22, 0x055b5297, 0x97827920, 0x79823620, 0x27089f4d, 0xb4d9ff01, 0x252e353b, 0x26088757, 0x0156ff42, 0x4cdb01b2, 0xc74d079f,
		0x23278307, 0x1b222b31, 0x27202788, 0xcd222782, 0x27826b02, 0x4f853720, 0x0000e42d, 0x0100b90d, 0x11b4e0ff, 0x8800060b, 0x823f2027, 0x02c22227,
		0x47278260, 0xc329054f, 0x0a000024, 0x251901b6, 0x094f471f, 0x23824720, 0x01802c08, 0x001300d0, 0x0500b92f, 0x1640e8ff, 0x4c000a09, 0x15037f12,
		0x14000b0b, 0x880f0c0c, 0x85135208, 0x3f004902, 0x32ed3fed, 0x1810012f, 0x2008b091, 0x777a1813, 0x01722211, 0x6e7a180e, 0x8b01290c, 0x3035fe45,
		0x10122a43, 0x08657a18, 0x2a08b082, 0xf901c400, 0xb5023401, 0x1a000d00, 0x0f0c0a40, 0x0707060e, 0x060d0d00, 0x01cc2f00, 0x2f33cd2f, 0x391211cd,
		0x14013031, 0x52060714, 0x34310925, 0x151f0301, 0x010f1138, 0x0ab50201, 0x4b2e080e, 0x070c5223, 0x00012208, 0x010b0281, 0x00b20273, 0x40250005,
		0x0104030f, 0x02024000, 0x03030607, 0x05028001, 0x1a332f00, 0x82b782cd, 0x2f192153, 0x27080982, 0x303132cd, 0x37173713, 0x22810717, 0x79225757,
		0x4e278b02, 0x0080274e, 0x00ffff00, 0x013b027b, 0x027b0279, 0x008a0006, 0x8238a783, 0x72012102, 0x15009d02, 0x11b71500, 0x10060510, 0x00000b06,
		0x32cedd2f, 0xde21a682, 0x294782cd, 0x37022e22, 0x33031e33, 0x07823e32, 0x020e1632, 0x212c19fa, 0x01360112, 0x13180f06, 0x060e1913, 0x26080a82,
		0x022c2112, 0x2e1f1121, 0x13170a1e, 0x17130c0c, 0x1f2e1e0a, 0x00010011, 0x011e02be, 0x00970236, 0xb30d000b, 0x82060309, 0x82cd2057, 0x18538355,
		0x2108ef68, 0x455afa06, 0x1e022106, 0x290a2b5a, 0x9e000200, 0x56010102, 0x3b82b802, 0x3900172f, 0xff0b00b9, 0x081140e0, 0x074c000f, 0x20058320,
		0x21058405, 0x1582b801, 0x0f830c20, 0x060c0027, 0x150f0912, 0x4f511803, 0x09f06f11, 0x0c4d4b18, 0x25375624, 0x03833725, 0x141b2d24, 0x03831b14,
		0x2b5d0231, 0x2a2b3131, 0x172a3131, 0x18171a1a, 0x82001a1a, 0x01230800, 0x59ffab00, 0x07004901, 0x20001600, 0x03080d40, 0x110f0915, 0x80170040,
		0x00170808, 0x1a2f3311, 0x821adc10, 0xcc3327d3, 0x303132cd, 0xd6832205, 0x37363723, 0x0c654633, 0x330e012b, 0x15101730, 0x190b530e, 0x07f95d0d,
		0x2024a72a, 0x17112515, 0x0e140808, 0x82071b5d, 0x026428f3, 0x02900106, 0x820300b5, 0x2b6d826f, 0x06050407, 0x02010003, 0x05800307, 0x0b854e18,
		0x8332dc21, 0x0713246d, 0x82173727, 0x6efd2403, 0x82c5672b, 0x83022503, 0x328f207d, 0xb6820382, 0x2008af45, 0x08af453e, 0x16824320, 0x85458920,
		0x40fd2305, 0xb2451809, 0x8200200c, 0x05b3452f, 0xb345b520, 0x242f8308, 0x0100b913, 0x202d82ff, 0x0eb3452e, 0x89050b46, 0x848f205b, 0x40102c5b,
		0x1704010b, 0x500d0615, 0x49160601, 0x578f086f, 0x29842b83, 0x0e2b2d27, 0x0e015025, 0x06c7482c, 0x1a205385, 0x8320af88, 0x8b205382, 0x22054948,
		0x82291700, 0x06022654, 0x06014f21, 0x0b7b4815, 0x8f205b85, 0xdb6fb388, 0x2d002208, 0x265c823f, 0x4f370e02, 0x862b0e01, 0x12a37c31, 0x230a1341,
		0x140940fc, 0x6e0c6e46, 0xb52009f3, 0x6f465f82, 0x08134105, 0x0940fe23, 0x0a724624, 0x01000024, 0x04821900, 0x02da2008, 0x0003006b, 0x00124023,
		0x8d020102, 0x03140003, 0x02010300, 0x01005603, 0x333f0055, 0x1801333f, 0x28089e4b, 0x33012333, 0x7b01465f, 0x39318446, 0x01120174, 0x00790280,
		0x001f000b, 0xb582002b, 0x0015101d, 0xffb8194d, 0x0782b3e0, 0xffb81325, 0x820f40e8, 0x830f2008, 0x180b2615, 0x4c000d0b, 0x20138207, 0x200883b4,
		0x21088205, 0x09832840, 0x83100121, 0x26360805, 0x0c202620, 0x0c009616, 0xcf000696, 0x40230123, 0x23481c19, 0x29012930, 0x981b0329, 0x0101b809,
		0x039811b3, 0xed3f0063, 0x3911ed3f, 0x2bcd712f, 0xdc2f015d, 0x477910ed, 0x08c86905, 0x34132b2b, 0x16323336, 0x23061415, 0x06f77822, 0x4d020e21,
		0x3e220547, 0x15842702, 0x21843520, 0x3f477424, 0x0383473f, 0x1006ca29, 0x1a14141a, 0x85070710, 0x1e063d07, 0x14111115, 0x15111114, 0x5c57c601,
		0x5c58575c, 0x2e19585c, 0x21141421, 0x2d1a192e, 0x2d2e0783, 0x17170f1c, 0x1717100f, 0x69000200, 0xff821901, 0x0e007229, 0x79001300, 0x821000b9,
		0x001023f8, 0xdb83104d, 0x000f4525, 0x82200e4d, 0x200c26fd, 0x0c4d0018, 0x26098310, 0x4d001408, 0x8217180b, 0x16102104, 0x18210482, 0x26048215,
		0x4d001410, 0x830e1209, 0x0f0e3506, 0x0196070f, 0x08041504, 0x12120109, 0x600e0f06, 0x0001b806, 0x0ab74b18, 0xde100128, 0x1132fd32, 0x59182b33,
		0x2b200c4c, 0x093e4e18, 0x033e3c08, 0x06060737, 0x53013307, 0xae3c2d2d, 0x3430270c, 0x3a1c031a, 0x72026b15, 0x545435d0, 0x3c3a1629, 0x1d4a163a,
		0x00002247, 0x017f0001, 0x02770112, 0x001d0072, 0x1d00b984, 0x82b3d8ff, 0xb81d21b0, 0x0e22c182, 0x07824d00, 0x0db3d822, 0xe0220784, 0x07840cb3,
		0x0bb3d829, 0xb8014d00, 0x82b3f0ff, 0x280782e1, 0x0b2640e0, 0x0f4c000f, 0x08dd8218, 0x15961820, 0x0d171712, 0x961b0096, 0x12060612, 0x1b1b9812,
		0x1598180a, 0x0a070760, 0x01b80398, 0xcd520001, 0x39123105, 0x2f01ed2f, 0xed102f32, 0x2f33eddc, 0x31edd610, 0x0a164b18, 0x06140123, 0x09d55f23,
		0x022e3429, 0x37363623, 0x82231533, 0x163a08ce, 0x47770116, 0x0f3a1d4b, 0x1c2d0e0d, 0x250f2430, 0x08062e3d, 0x028cc102, 0x4c550401, 0x3d307f01,
		0x0535080d, 0x0f141f0d, 0x2d0a1119, 0x12382a5b, 0x39051324, 0x02000000, 0xe3827d00, 0x74028228, 0x25001800, 0xe5835401, 0x82b3c821, 0x27dd83ae,
		0x17161040, 0x18184c00, 0x1826e482, 0x000c0b20, 0xcc4b134c, 0x22078206, 0x820eb4e0, 0x230882d9, 0x0d0cb4e8, 0xe0201984, 0x0f27fc83, 0xb3d0ffb8,
		0x824d0011, 0xb3e82207, 0x22078410, 0x840fb3d8, 0xb3e82207, 0x2207840e, 0x840db3e0, 0xb3d82207, 0x2007840c, 0x203783e8, 0x2637830e, 0x084d000b,
		0x83d8ffb8, 0x2207827e, 0x8416b3e8, 0xb3e8220f, 0x25078414, 0x0013b3f0, 0x1f83074d, 0x07861720, 0x07841520, 0x6783d020, 0xe0201782, 0x07826783,
		0x06206784, 0xc6824f83, 0xd8240782, 0x4d0017b3, 0xc8200782, 0x17844f83, 0x0f841520, 0x2640d831, 0x4c001413, 0x001b2001, 0x1c10144d, 0x83134d00,
		0x1b093a04, 0x96230096, 0x11040411, 0x0c981900, 0x981e030c, 0x0101b816, 0x039804b3, 0x07584360, 0x2f01ed28, 0x102f32cc, 0x1e5a10ed, 0x75421806,
		0x075f5416, 0x34132b2f, 0x0e173736, 0x36360703, 0x021e3233, 0x055b5915, 0x22376108, 0x33160607, 0x35023e32, 0x7c7d2634, 0x361e066b, 0x1206202c,
		0x30220e21, 0x1f0f0d1e, 0x4444202f, 0x02212382, 0x17112b20, 0x011f060f, 0x026964a5, 0x160b0137, 0x0408151f, 0x16281e12, 0x15222814, 0x310b5f4e,
		0x16120c3c, 0x001e1d09, 0x00010000, 0x01190186, 0x00720285, 0xb94f000e, 0xf0ff0b00, 0x0b2bee83, 0x40f8ffb8, 0x4d001229, 0x82132804, 0x11182604,
		0x10034d00, 0x21048215, 0x04821418, 0x00131030, 0x9600064d, 0x0996050e, 0x08980510, 0x49430060, 0x01ed2605, 0xdeedde10, 0x085c59ed, 0x3e132b28,
		0x35233703, 0xc3821533, 0x04ba3a08, 0x152a2218, 0x2d12ffb1, 0x01041e28, 0x4d512619, 0x313a1843, 0x59504012, 0x0300002d, 0x12017700, 0x79027d01,
		0x29001b00, 0xa6023500, 0x28260b40, 0x264d0018, 0x4d001120, 0x063b421a, 0xf0220782, 0x0f860fb3, 0x4d000e24, 0xaa82b818, 0x0782a182, 0x82b3e821,
		0xb8142827, 0x0cb4d8ff, 0x824c0011, 0x40e02808, 0x4d000b1f, 0x820b200f, 0x200c210e, 0x0c212482, 0x21218228, 0x1e832006, 0x43280621, 0xe022056b,
		0x1e830a40, 0x16083325, 0x83324d00, 0x842e2063, 0xb3f02207, 0x2907842b, 0x0029b3e8, 0xffb8314d, 0x1782b3d0, 0xe0200782, 0x0f841783, 0xe0221785,
		0x1f8420b3, 0x1fb3f022, 0xe8220784, 0x07841db3, 0x19b4d025, 0x844c001b, 0x82c18230, 0x40e82807, 0x00161593, 0x8230294c, 0x18282147, 0x1c250484,
		0x10284d00, 0x2104821b, 0x04821a18, 0x82191021, 0x18182104, 0x12230483, 0x83274d00, 0x83262018, 0x1826212c, 0x26276982, 0x4d001f10, 0x821e2826,
		0x1a182504, 0x264c001c, 0x26222d83, 0x0f831820, 0x04821720, 0xbd821020, 0x82182621, 0x402521dc, 0x25215a82, 0x21328228, 0x32822825, 0x1d182527,
		0x28254d00, 0x2004821c, 0x22908338, 0x82151825, 0x1430210a, 0x28200482, 0x1a256582, 0xb3f0ffb8, 0x064c411e, 0x07841720, 0x0940c827, 0x184d0016,
		0x23158220, 0xd8ffb814, 0x0782de83, 0x1db4e825, 0x824c001e, 0xb3f02408, 0x844d0014, 0x2b3e8207, 0xe8ffb80f, 0x00200940, 0x1f180f4d, 0x0d830482,
		0x001d0e24, 0xb1830c4d, 0xac830c20, 0x5f830a20, 0x07825782, 0x0e40d827, 0x064d0016, 0x21578218, 0x24821006, 0x1a830520, 0x4d001f23, 0x21648201,
		0x08834940, 0x1a821020, 0xaf830120, 0x33193908, 0x16040b27, 0x0e0e9630, 0x16962a08, 0x0124ff16, 0x1c009624, 0x10270896, 0x5b4d0018, 0x273f0127,
		0x19982701, 0x8f335f0b, 0x337f0233, 0x8f0233df, 0x2d330133, 0x21631198, 0x35070945, 0x5d2fed3f, 0x33337271, 0x2b7171ed, 0xdced2f01, 0x2f335ded,
		0x038211ed, 0x39171222, 0x10f54518, 0xa6086843, 0x0faf4308, 0x0614012b, 0x022e2223, 0x37363435, 0x05ba4a26, 0x15021e28, 0x16070614, 0xca520716,
		0x34352505, 0x06062726, 0x08634e18, 0x36178908, 0x437d0136, 0x1e322641, 0x1415200c, 0x21384118, 0x1a0e1d2e, 0xc6172015, 0x131a1007, 0x2d331f25,
		0x1b801513, 0x261b2121, 0x0116122a, 0x13382d77, 0x1910221d, 0x2a0f0e2c, 0x123a2817, 0x1910211b, 0x28100e28, 0x0d100720, 0x19121b09, 0x1e0e0b1c,
		0x1c1d0b94, 0x0821120e, 0x02001c0d, 0x18018400, 0x79028901, 0x23001600, 0x0c408c00, 0x0018181c, 0x16201c4d, 0x164c0017, 0x40d8ffb8, 0x000d0b57,
		0x1910124c, 0x08114d00, 0x18210483, 0x28098210, 0x000f0b20, 0x0e180d4c, 0x20058210, 0x2d208328, 0x18171806, 0x20064c00, 0x064d0016, 0x04821518,
		0x1b832020, 0x82380521, 0x1a07360a, 0x96220096, 0x0f04040f, 0x0a0a9817, 0x14981d03, 0x03980463, 0x0add445f, 0x102f3326, 0x32eddced, 0x0fcc6118,
		0x06140125, 0x18362723, 0x201352aa, 0x05007226, 0x7b890127, 0x5c410274, 0x0ac6440d, 0x82454325, 0x44102212, 0x310805c7, 0x64e70107, 0x2a02366b,
		0x1205082b, 0x1315281f, 0x4d152229, 0x3106045f, 0x15120c3c, 0x00003a0a, 0x7400ffff, 0x8001faff, 0x07026101, 0x00006f01, 0x1384e8fe, 0x01007e2a,
		0x5a017f01, 0x94000702, 0x7c201388, 0x78201382, 0x00212783, 0x2013888d, 0x203b827e, 0x20138476, 0x2013888e, 0x20278269, 0x213b8380, 0x13887001,
		0x27827f20, 0x13847720, 0x13887120, 0x13827d20, 0x5c018222, 0x72207782, 0x86201388, 0x85203b82, 0x73202784, 0x77201388, 0x7d202782, 0x74209f84,
		0x84241388, 0x89010000, 0x75201384, 0x00391385, 0xff350002, 0x02ad01f3, 0x002100b5, 0x40c0002f, 0x11182320, 0x28234d00, 0x2604820f, 0x4d000910,
		0x820c201c, 0x0b182104, 0x20260482, 0x4c000a09, 0x3148b817, 0x450d2005, 0x0784060a, 0x22051361, 0x4609b3d8, 0xb42905fc, 0x4c000e0d, 0xe8ffb808,
		0x823b82b3, 0x40e02807, 0x000b0a36, 0x8210034c, 0x8303200e, 0x1003264a, 0x034d000a, 0x082e8218, 0x160b2538, 0x22310b16, 0x2121000e, 0x2230001f,
		0x0e1f2100, 0x06192020, 0x19121515, 0x00062a5c, 0xcd3fcd2f, 0x12112f32, 0x33332f39, 0x013232cd, 0x3232c410, 0x32cd102f, 0x0683ce10, 0x230ff441,
		0x372b2b2b, 0x43053350, 0x15280514, 0x32331614, 0x06173736, 0x08053343, 0x2707355d, 0x35363637, 0x23022e34, 0x15020e22, 0x36281890, 0x1b2f261d,
		0x2a546609, 0x10261d2d, 0x2b401721, 0x0f243c2c, 0x39ad203b, 0x150c0440, 0x12180e11, 0x0201e40b, 0x132e513d, 0x1a362d1c, 0x27469d5f, 0x0b16393f,
		0x1a17143e, 0x07203b2d, 0x3482302a, 0x1e0f4c79, 0x1e0a0f18, 0x82002b35, 0x02340800, 0xf4ff1b00, 0x8601d901, 0x31002000, 0x19404200, 0x0e560e46,
		0x010e0502, 0x210d0d0c, 0x032b3320, 0x2e003215, 0x1a26092e, 0xc0ffb80c, 0x480e09b6, 0x10090c0c, 0x3224e382, 0xcd2f2b2f, 0xcd23e382, 0x82d61001,
		0xcdde2cdb, 0x31332f33, 0x5d5d0030, 0x82152237, 0x161721c3, 0x3320c684, 0x2109c571, 0xe0823233, 0x3427152a, 0x23262627, 0x06070622, 0x4f082582,
		0x35322133, 0x02030470, 0x2c2a441c, 0x1d201b49, 0x512f365e, 0x3c23233c, 0x512e2f51, 0x0552233d, 0x2928451a, 0x04061b45, 0xb7031401, 0x05046e02,
		0x251f1d03, 0x202b231e, 0x2a294936, 0x2020364a, 0x052a4a36, 0x1a07067d, 0x061b201f, 0x04046b08, 0x0029ce82, 0xff0c0003, 0x02e001f9, 0x2f098272,
		0x0139002e, 0x2a00b91d, 0x11b3e8ff, 0xb8294d00, 0x15200782, 0xf0220784, 0x078414b3, 0x13b3e822, 0xe0220784, 0x078412b3, 0x10b3e822, 0xe0220784,
		0x07840fb3, 0x0eb3e828, 0xb8254d00, 0x2783e0ff, 0xe8250782, 0x001210b4, 0x2608824c, 0x0f0eb4f0, 0x83204c00, 0x00182219, 0x2207824d, 0x8417b3e8,
		0xb4e02307, 0x18841613, 0x5283d820, 0x40251883, 0x4d001151, 0x088d8202, 0x023a9c4c, 0x023a3a14, 0x35329634, 0x2f01012f, 0x0e0e1a1a, 0x1325272e,
		0x27222296, 0x960a0303, 0x39613527, 0x32362f2f, 0x0e3f2560, 0x0e020e4f, 0x400f3098, 0x0f0f020f, 0x0704041d, 0x19682c98, 0x1d981619, 0x59030266,
		0x005b0100, 0x0182333f, 0x08089c5d, 0xed712f21, 0x333f3971, 0x3fcd2f33, 0x33ed2f01, 0x2f33112f, 0xcd1032ed, 0x2f322f32, 0x102f332f, 0x69ed32dc,
		0x31210530, 0x0f994530, 0x23332b2e, 0x16033301, 0x36323316, 0x23263435, 0x1e3a5718, 0x0c4b0120, 0x06352e05, 0x46520706, 0x9f467b01, 0x1714210b,
		0x37571820, 0x0f200813, 0x291a0c2a, 0xfe252f1e, 0x182f23f1, 0x21143b29, 0xfd6b0212, 0x0d0804cc, 0x320c1610, 0x0a0e120b, 0x122f5718, 0x182a0221,
		0x2907f958, 0x15000300, 0xe301f9ff, 0x09827802, 0x4c002235, 0x00b93d01, 0xb4e0ff47, 0x4c001514, 0xe8ffb847, 0x841311b4, 0xb4e02d08, 0x4c00100e,
		0xc8ffb840, 0x4d0010b3, 0xd0260782, 0x000f0eb4, 0x95413f4c, 0x24078206, 0x0017b3e8, 0x200f844d, 0x22078416, 0x8213b4e8, 0x20108443, 0x25108412,
		0x0011b3d8, 0x30831f4d, 0x07841520, 0x14b3e822, 0xe0220784, 0x638212b4, 0xffb81c24, 0x1882b3f0, 0x74820782, 0x4c001422, 0xd8220882, 0x74820fb4,
		0xe0240882, 0x4d000eb3, 0xd03d0782, 0x000d4f40, 0x1518184d, 0x434c0016, 0x45419632, 0x2d2d4c39, 0x4596294c, 0x02010200, 0x05c64e9c, 0x45032708,
		0x0496104e, 0x0917161d, 0x96220101, 0x2e2d4309, 0x23233c2e, 0x38684a26, 0x663c3538, 0x98131616, 0x9822631a, 0xde416106, 0xed3f240c, 0x183f2f32,
		0x2d0b2459, 0x33ed2f01, 0x32c0102f, 0x10edc62f, 0xc11832ce, 0xfd270849, 0x102f32c4, 0x46d410c6, 0xaf471150, 0x23332405, 0x18053301, 0x201cc45a,
		0x1d014213, 0x4b160721, 0x273e0553, 0x7b014668, 0xc6f9fe46, 0x161a2901, 0x10171317, 0x210c200f, 0x301a3312, 0x28251b2f, 0x0d42d00d, 0x421e2017,
		0x0222060c, 0x5a18c16b, 0x163108f6, 0x0c10110e, 0x1313270d, 0x241a2032, 0xfe0c161c, 0x131c428d, 0x18203208, 0x1d0e2e13, 0x000e0e17, 0xff050000,
		0x01f9ffff, 0x007202d7, 0x0023001f, 0x0039002e, 0x40fd0044, 0x1630310c, 0x281e4d00, 0x4c00150e, 0xe0ffb818, 0x270883b4, 0xc8ffb812, 0x4d0017b3,
		0xd0210782, 0x251e82b3, 0xd0ffb80e, 0x19831140, 0x83200821, 0x28042b05, 0x4c001716, 0xf0ffb83b, 0x26827040, 0x18203326, 0x18334d00, 0x2d820984,
		0x09833120, 0x82103121, 0x20302709, 0x4c001817, 0x1e821812, 0x23830420, 0x96294c08, 0x20242a27, 0x9c222122, 0x23142023, 0x24212023, 0x03162323,
		0x04133d32, 0x10963f06, 0x963a1610, 0x96340606, 0x16962f00, 0x242e612a, 0x60272b24, 0x20592322, 0x3d3d1321, 0x3203370b, 0x42681b32, 0x3f00660b,
		0x11393fcd, 0x8211cd33, 0x332f2204, 0x4301823f, 0xdc2106b6, 0x098149ed, 0x2f331124, 0xb343332f, 0x18012405, 0x1832dc10, 0x200b4963, 0x08c3432b,
		0x4f493720, 0x023e2306, 0x3b463233, 0x6a451805, 0x23072409, 0x43053301, 0x012409ae, 0x06272634, 0x08055946, 0x1614272a, 0x34353617, 0x06222326,
		0x0f1912ff, 0x241c1113, 0x1c241213, 0x14170f11, 0x271e131a, 0x1e271514, 0x0146ba12, 0x50fe467b, 0x0807bb43, 0x297b0130, 0x11201f1a, 0x1e591e13,
		0x15161d16, 0x0c45180e, 0x1c090b24, 0x121b1217, 0x1b120908, 0x0d1c0e11, 0x13191d09, 0x080a131d, 0x02301d12, 0x5e183a6b, 0x43080815, 0x080f1244,
		0x0c0e1910, 0x0f0e820d, 0x0a121106, 0x05000d0d, 0xf9ff0b00, 0x7902d701, 0x23001f00, 0x5a004f00, 0xa2016500, 0xff5400b9, 0x0018b3e8, 0xffb8544d,
		0x0016b3e0, 0xffb8534d, 0x171340d8, 0x50524d00, 0x52211582, 0x20098328, 0x20178240, 0x07e3414a, 0xd0230882, 0x630c0bb4, 0x23820674, 0x19874620,
		0x42864520, 0xe8260782, 0x00150eb4, 0x1082404c, 0x110b4025, 0x424c0018, 0x13200e27, 0x12202986, 0x7c836c82, 0x220a2f42, 0x838840d8, 0x2808213a,
		0x04210583, 0x265f8218, 0x00163004, 0x8228034d, 0x20522104, 0x08208d83, 0x12200982, 0x04209783, 0x33270e83, 0x2a424296, 0x424f4896, 0x46080b1d,
		0x3a3a4f21, 0x4f2e2e4f, 0x03162323, 0x04135e53, 0x10966006, 0x965b1610, 0x96550606, 0x1f965000, 0x45160116, 0x2e012e6f, 0x2f402f30, 0x2f032f60,
		0x24243d2f, 0x644d9827, 0x98363939, 0x2322633d, 0x5b212059, 0x825e5e13, 0x402608a4, 0x4d001d16, 0x5e015e34, 0x0398580b, 0x01534b53, 0x63681b53,
		0x00660b98, 0x393fed3f, 0xed331171, 0x2b713911, 0x15463311, 0x71cd260f, 0x712f0139, 0x105942ed, 0x33112f22, 0x60420283, 0xeddd2308, 0x62422f33,
		0x10214607, 0x20054344, 0x206c422b, 0x201d4244, 0x3b451806, 0x42272008, 0x1123168b, 0x42140e1a, 0x0e22078b, 0x8b421317, 0x45af3008, 0xfe477a01,
		0x14210b56, 0x26272117, 0x1819170c, 0x2a0ea25d, 0x0c17140f, 0x2f1e291b, 0x42890125, 0x0c2111a5, 0x0aa54208, 0x420c1d21, 0xbd200ca5, 0x14be5d18,
		0x0a0b1d2b, 0x1d0e1721, 0xfe0e0e17, 0x11bc42c8, 0x42000021, 0x874408bf, 0x01552609, 0x3e00b9fb, 0x052146ff, 0x53b83e21, 0x0782057e, 0x0eb4d827,
		0x3c4c000f, 0x211982b8, 0x08841410, 0x0fb3e022, 0x27052a64, 0x000e1940, 0x15101e4d, 0x18210482, 0x221b8213, 0x8312201e, 0x0011230a, 0x2e82184d,
		0x8414b321, 0xb4f02507, 0x4c001311, 0x830b9442, 0x480e2018, 0x0782068d, 0x82b3f021, 0x22078235, 0x823f40e0, 0x18083739, 0x4c001514, 0x00131008,
		0x1118084d, 0x054c0012, 0x4d001610, 0x04822804, 0x09832720, 0x09832620, 0x1f18253b, 0x254c0021, 0x4d001e20, 0x18172025, 0x181e4c00, 0x194d0016,
		0xb3f8ffb8, 0x83748523, 0xb8082507, 0x4a40f0ff, 0x04211882, 0x08158218, 0x01273445, 0x20232022, 0x1422569c, 0x21225656, 0x4d434321, 0x964a5353,
		0x3a10553d, 0x52963a01, 0x4d002f20, 0x27034d52, 0x10041332, 0x2906962f, 0x96240096, 0x16232316, 0x16109634, 0x4dbf4d9f, 0xb83a4d02, 0x82b3c0ff,
		0x08078325, 0x1f184020, 0x3a304d00, 0x3a503a40, 0x3a903a70, 0x3a063ab0, 0x9855473a, 0xb8446052, 0x20b3d0ff, 0x07824d00, 0x82b3c021, 0x2e078223,
		0x1c3240e0, 0x44404d00, 0x47444401, 0x43644098, 0x302d0611, 0x27320132, 0x20272703, 0x274d001d, 0x29c38318, 0x27012740, 0x1b982c0b, 0x13433768,
		0x11ed2b06, 0x2b2b7139, 0xc9103311, 0x14433271, 0x25108207, 0x12ed3f2b, 0x08822f39, 0x0171cd3b, 0x11edd42f, 0xfd102f33, 0xedd4edd4, 0x2f391712,
		0x72ed2b33, 0x33eddc32, 0x2115822f, 0x1a432f33, 0x71002105, 0x430bac4b, 0x18431619, 0x4503201f, 0x0322147a, 0x1f561616, 0x053a6505, 0x3435362b,
		0x033e2326, 0x23153337, 0x1c0843ff, 0xe3423020, 0x38dd390e, 0x183b3a36, 0x0a0e0c2e, 0x221a1523, 0x0303402f, 0x93010203, 0x240c4560, 0x211bfa42,
		0xda42dafd, 0x57013510, 0x28272b02, 0x30080d30, 0x13100e05, 0x1f171317, 0x32151d1c, 0x3414ef42, 0x40d20048, 0x11201e0c, 0x1e4c0015, 0x4d001018,
		0xe0ffb818, 0x820d83b4, 0xb3e82108, 0x14231082, 0x83d8ffb8, 0x870e2007, 0x22088218, 0x825d40e8, 0x18082119, 0x08212783, 0x450a8220, 0x70290c29,
		0x3a400140, 0x963f4896, 0x15474243, 0x983f4326, 0x613a6041, 0x2d060142, 0x01324232, 0x32013234, 0x03982c0b, 0xf6412727, 0x45392009, 0x71200509,
		0x22060945, 0x4132ed3f, 0xdc2008e6, 0x2506e641, 0xcceddeed, 0xdf41325d, 0x0b0f4b06, 0x2035c641, 0x09b85327, 0x2c2db741, 0x120e06fd, 0xaf681219,
		0x0d141e18, 0x31ad4106, 0x22b42b08, 0x1a2b2d34, 0x2c1b2932, 0x0025362f, 0x0b000300, 0xd701f7ff, 0x0a007202, 0x2a002600, 0x00b99800, 0xb4d8ff0f,
		0x4c00140e, 0x0886b80d, 0xb8154a08, 0x2d40e8ff, 0x274d001c, 0x9c292829, 0x2a14272a, 0x0e2a2a27, 0x231e0b26, 0x0e1e1414, 0x961b2525, 0x0028280e,
		0x06039605, 0x592a2900, 0x1e5b2827, 0xc0ffb80b, 0x201c1640, 0x180b0b48, 0x65239826, 0x68119818, 0x000a6106, 0x64661800, 0x3fed270a, 0x2f3912ed,
		0x9f59cd2b, 0x32dc3105, 0x2f3311ed, 0x2f33ed2f, 0x2f32cc10, 0x32cd1032, 0x87250e82, 0xc47d872b, 0x05645731, 0x92481320, 0x1801430a, 0x01230524,
		0x7b481033, 0x42482008, 0xfe2715e1, 0x7a0145e4, 0x48310247, 0xa220086a, 0x2313bf42, 0x006b02c8, 0x033a0082, 0xf7ff1500, 0x7902e401, 0x1f001b00,
		0x10013c00, 0xff3900b9, 0x0015b3e0, 0x6e45394d, 0x22078206, 0x8613b3f0, 0x0012330f, 0xffb8364d, 0x0e1440e0, 0x324c0015, 0x4d001620, 0x2b821832,
		0x14203229, 0xb8044d00, 0x83b4d8ff, 0xb8022517, 0x4440d0ff, 0x4f080983, 0x3737962a, 0x1e1c2320, 0x1f9c1e1d, 0x1f1f141c, 0x3c1d1d1c, 0x23313123,
		0x1b031f1f, 0x09181300, 0x1a031309, 0x0396101a, 0x982d3030, 0x983c6334, 0x1f1e6122, 0x5b1d1c59, 0x134f133f, 0x00981302, 0x40c0ffb8, 0x48211c0b,
		0x1b0d0000, 0x0a651898, 0xb3235882, 0x824d0021, 0xb4d82507, 0x4c00201f, 0x1e201084, 0xc0241084, 0x1d1c0a40, 0x0a2a1182, 0x6806980d, 0x32ed3f00,
		0x00822b2f, 0x21058341, 0xea4471ed, 0x4c158305, 0x83410529, 0x332f2409, 0x4433112f, 0x012607d6, 0x32cd1018, 0xdb44ed2f, 0x4125200b, 0x05221c8c,
		0x66182315, 0x692019ff, 0x28169f41, 0x7b0146fd, 0xc6f7fe46, 0x082a4c28, 0x4c112021, 0x2922052a, 0xab41a30d, 0x32c32216, 0x14671817, 0x05c34114,
		0xf7ff133a, 0x7902dc01, 0x46002a00, 0xf3004a00, 0xff2f00b9, 0x150eb4d0, 0xb82d4c00, 0x25220886, 0xf249ffb8, 0x87222005, 0x1c3e0811, 0x40e0ffb8,
		0x00181139, 0x4849474c, 0x474a9c49, 0x4a474a14, 0x2b462e4a, 0x34433e96, 0x452e3e34, 0x2e963b45, 0x212a4848, 0x1e1e960f, 0x2a239606, 0x0a2a1616,
		0x4a492a0a, 0x5b484759, 0x9a412b3e, 0x2b2b2707, 0x43984638, 0x0f823565, 0x001db323, 0x2307824d, 0x1c2440d8, 0x21080882, 0x31983835, 0x0a6f2168,
		0x0b300a01, 0x0b600b40, 0x190b0b03, 0x98030000, 0x15156428, 0x63199812, 0xa54f3f00, 0x71cd220a, 0x05b24139, 0x2b0c3443, 0x33112f33, 0xeddd102f,
		0x32ed2f33, 0x840c3d43, 0x063d430e, 0x4d057c46, 0x06201ea7, 0x2008a84d, 0x1ccf4105, 0x4c492220, 0x492b2019, 0x5620064b, 0x2616d541, 0x7b0146f5,
		0x49ae0146, 0x1e29143a, 0x0e2d140b, 0x0e0e171d, 0x16de41da, 0x0004003c, 0x01f7ff0f, 0x007202e5, 0x0028001b, 0x0031002d, 0x281040c8, 0x4d001618,
		0x04822027, 0x04832620, 0x080d6043, 0x150e3e21, 0x1d1e4c00, 0x29239620, 0x312e3023, 0x302f9c2e, 0x28302f14, 0x2c2f2f23, 0x03313125, 0x4396001b,
		0x312f0b60, 0x5b2f2e59, 0x25602829, 0x23202c1d, 0x43136122, 0xd82b125a, 0x4d001db3, 0xd0ffb80a, 0x821c0940, 0x0b484308, 0x23079541, 0x32cd32dd,
		0x20053648, 0x0a474333, 0x1132ed36, 0x332f2f33, 0x32ce2f33, 0x7d872b87, 0x331101c4, 0x32fd1018, 0x20064a6b, 0x1941432b, 0x18150321, 0x240f576b,
		0x33012303, 0x16374301, 0x2323a031, 0x2f1b823b, 0x21161820, 0x46274710, 0x43467b01, 0x0121142c, 0x856818aa, 0x1b2b2507, 0x26fe1a38, 0x3905e744,
		0xffffff04, 0x02c001f7, 0x00150072, 0x002b0020, 0xb6b8002f, 0x150e200f, 0xf1824c00, 0x0fb4e022, 0xd8200885, 0x080c4618, 0x74081083, 0xd8ffb806,
		0x000e5540, 0x1d10134d, 0x2e2c4d00, 0x2f9c2e2d, 0x2f2f142c, 0x162d2d2c, 0x1a011a0f, 0x161d1996, 0x03082f2f, 0x29109623, 0x00000896, 0x2e302c08,
		0x1c2d592f, 0x162f2061, 0x164f163f, 0x1d161603, 0x9821601a, 0x26050503, 0x0001004d, 0x158f157f, 0x26661502, 0x00680d98, 0x713fed3f, 0x391271cd,
		0x3fed332f, 0x5d2f3333, 0x3f2f3fcd, 0x01331133, 0x0579492f, 0x33113228, 0x32dd2f2f, 0x078271ed, 0x5d057149, 0x2523098b, 0x5f070606, 0x0e290545,
		0x26222302, 0x023e3435, 0x0a7f5233, 0x07220123, 0x06b55214, 0x01230538, 0x2fa80133, 0x12170d3b, 0x180c2d30, 0x31371723, 0x2e432c15, 0x42466dfe,
		0x34200808, 0x16191617, 0xfe151514, 0x7b0146da, 0x1802d146, 0x23340d1b, 0x0f1a2111, 0x3a1f303d, 0x2e011a2c, 0x28084446, 0x1e220e76, 0x17100e19,
		0x064f4177, 0xff1c0034, 0x02dd01f7, 0x00150072, 0x003c0031, 0xb9040140, 0x00461a00, 0xb8182906, 0x0b40d0ff, 0x4c00150e, 0x830a6241, 0xb807250e,
		0x4e40d8ff, 0x3d200983, 0x08316b18, 0x40544f08, 0x08404001, 0x10963403, 0x481c1940, 0x08963a10, 0x081b0000, 0x01085b01, 0x3e3e4208, 0x04303029,
		0x19260126, 0x2e291631, 0x3f291f1f, 0x3e3d5940, 0x1c40295b, 0x9829481f, 0x16b41694, 0xffb81602, 0x1c0b40c0, 0x16164820, 0x2e983123, 0x0f832060,
		0x0022293e, 0x0120b44d, 0x02012073, 0x30012061, 0x20200120, 0x641c9823, 0x05039832, 0x98003705, 0x20068841, 0x07884137, 0x8741ed20, 0x32ed2705,
		0x5f71712f, 0x0c4b7171, 0x712b2305, 0xbb472bed, 0x05af4705, 0x71cddc22, 0x2e058f44, 0x32715dc6, 0xdcfd102f, 0x1132ed2b, 0x445d2f33, 0x9b410c86,
		0x18714414, 0xaa411320, 0x44d42021, 0xdb20156d, 0x2007b741, 0x15b741f7, 0x67441820, 0x37fe2113, 0x080dc341, 0xffff0344, 0xd3010000, 0x0a007202,
		0x1d001900, 0x37406200, 0x1c1b1c1a, 0x141a1d9c, 0x1d1d1a1d, 0x0b961914, 0x9610110b, 0x001b1b14, 0x07039605, 0x1e1a1b00, 0x14591d1c, 0x65139810,
		0x61065b0b, 0x0840000a, 0xf348480d, 0xcd2b2e09, 0xed3f3f3f, 0x11333f32, 0x2f013333, 0x06f048dd, 0x2f39cd23, 0x09ea48ed, 0x4a0be548, 0x21200920,
		0x2e0cd648, 0x120e0619, 0xaf68121a, 0x0d151e18, 0x83d0fe06, 0x09cc48e0, 0x49fffd21, 0x2e2208df, 0xc3482537, 0x08c78208, 0x7902e322, 0x20000300,
		0x7d002f00, 0xff1f00b9, 0x0019b3e8, 0xffb81a4d, 0x0e3e40d8, 0x274c0015, 0x2a2f9621, 0x3f0b7654, 0x0e2a9626, 0x04041b96, 0x0101061b, 0x15069620,
		0x262a0615, 0x21652898, 0x1114145b, 0x20631898, 0x82147254, 0x2f0125de, 0xed102f33, 0xcd210382, 0x20078232, 0x2709822f, 0x7d872b87, 0x101801c4,
		0x5406b65e, 0x16480653, 0x0ad15e18, 0x20053454, 0x140848f8, 0x0541de20, 0x6b02210b, 0x2414ff47, 0xfe0c171d, 0x0b0f4158, 0x03000035, 0x00001300,
		0x7902d601, 0x39002a00, 0xa4003d00, 0x532500b9, 0x200806fb, 0xe0ffb81c, 0x15115840, 0x3c3a4c00, 0x3d9c3c3b, 0x3a3d143a, 0x39343d3d, 0x312b2b96,
		0x3b349630, 0x0fea473b, 0x593d3c36, 0x345b3b3a, 0x65329830, 0x3f215b2b, 0x6f0a4f0a, 0x980a030a, 0x2222ce47, 0x423971ed, 0x3f23050a, 0x472f0133,
		0x124210c5, 0x2b01220d, 0x28bc472b, 0x33420120, 0x22ad470d, 0x4c422720, 0x47e6200c, 0xfe2123a3, 0x0e624283, 0x00045908, 0x0100000f, 0x007202e0,
		0x001b000e, 0x00240020, 0x213c406e, 0x9c232223, 0x24142124, 0x22222124, 0x1c1c1b18, 0x16961310, 0x181f1116, 0x0e092424, 0x07000096, 0x23099605,
		0x22215924, 0x601b1c5b, 0x981f1018, 0x61151613, 0x07980509, 0x005b0065, 0x32ed3f3f, 0xed32dd3f, 0x410a4c47, 0x2f210614, 0x22088333, 0x82113332,
		0x088b4d01, 0xf6892120, 0x20163247, 0x20e68b43, 0x0b2847b2, 0xf2832c20, 0x7220d08c, 0x22131f47, 0x820d0003, 0x82dc20e3, 0x001b29e3, 0x002e002a,
		0x0400b9ea, 0x20063a4a, 0x07d74b02, 0xffb81135, 0x0022b3f0, 0xffb80b4d, 0x001fb3e0, 0xffb80a4d, 0x825340c0, 0x2d2b3b08, 0x2e9c2d2c, 0x2b2e142b,
		0x1c252e2e, 0x22252a96, 0x2c259621, 0x1a1a132c, 0x88489610, 0x182c0805, 0x4c002b2a, 0x09091318, 0x592e2d13, 0x255b2c2b, 0x65239821, 0x136f5b1c,
		0x4f133f01, 0x7f136f13, 0x05139f13, 0x00609813, 0x01009001, 0x20069b48, 0x06f64b20, 0x67836020, 0x862fb321, 0x1d0e356f, 0x0a304d00, 0x0a020a50,
		0x06980d0a, 0xed3f0064, 0x2b712f32, 0x2307b245, 0x7271ed72, 0x220d7942, 0x50ed102b, 0x2f2407bc, 0xde10cdfd, 0x230a8c44, 0x2b2b2b00, 0x50057d42,
		0xaa431670, 0x2321240a, 0x45663301, 0xda20158b, 0x260c6242, 0x7b0146d7, 0x451b0246, 0xfd21137f, 0x0c8741c0, 0x18006b21, 0x3a08c372, 0x007b02da,
		0x00190003, 0x00340028, 0x160c40c3, 0x4d001218, 0x150e2013, 0x410e4c00, 0x0b20077c, 0x40210882, 0x25128368, 0x00202017, 0x0483164d, 0x82100521,
		0x05572b09, 0x1a962801, 0x1f20231a, 0xe0442396, 0x2336080b, 0x040c9632, 0xa00c8004, 0x030cb00c, 0x962c070c, 0x14010114, 0x65211f23, 0x98295b1a,
		0x90098007, 0x0309b009, 0x6c2f0909, 0x02047c04, 0x0401045e, 0x982f5a19, 0x67596411, 0x71cd390d, 0x2f391271, 0x3fed3371, 0x0132cd3f, 0x102f332f,
		0x71cc32fd, 0xed102f32, 0xf8440b82, 0xcdfd2907, 0xed2f3911, 0x71003031, 0x26055041, 0x23332b2b, 0x48053301, 0x504112a6, 0x2203220a, 0x08a74806,
		0x01465f38, 0xf2fe467b, 0x130d3a2f, 0x0c2e2f15, 0x36182318, 0x432b1531, 0x5941742e, 0x0cfc2f0b, 0x15190b16, 0x02151514, 0x1802226b, 0xa7480c1a,
		0x85fd210b, 0x230b5941, 0x0608ef01, 0x2105ac48, 0xf7490000, 0x02d52f05, 0x00150072, 0x002a0020, 0xb9ba002e, 0x9f181200, 0xd820085d, 0x2605fc58,
		0x150e280a, 0x84074c00, 0xb8132805, 0x4840e8ff, 0x424d001d, 0x560808d5, 0x2c2c2b2e, 0x19961a16, 0x2e2e161d, 0x10962303, 0x00089628, 0x01088f00,
		0x01108008, 0x2f2b2c10, 0x1c592e2d, 0x40162061, 0x16480d0a, 0x60191d16, 0x05039821, 0x48211e40, 0x00250505, 0x40c0ffb8, 0x001d1c0c, 0x1598004c,
		0x0d982568, 0xed3f0066, 0x122bed3f, 0x492b2f39, 0x2b2205f9, 0x31473fcd, 0x41712006, 0x10220558, 0xfb4932ed, 0x11fa4905, 0x36362523, 0x86811837,
		0x1415240a, 0x4923020e, 0x32340bf9, 0x22232637, 0x16141506, 0x33012305, 0x3a2e1e01, 0x2f12160d, 0x200bf849, 0x08f849ed, 0x18145038, 0x15142d01,
		0x46eafe15, 0x29467b01, 0x0b1a1702, 0x21112334, 0xf8491019, 0x58022005, 0x822709a8, 0x0e19410d, 0x47831710, 0x0435056b, 0xf7ff1500, 0x7902de01,
		0x32001500, 0x40003c00, 0x00b9d000, 0x06f7492c, 0x41b81221, 0x20201058, 0x82095841, 0xb3e82a1d, 0x114d001e, 0x40e8ffb8, 0x4a088259, 0x40310803,
		0x193e3e3d, 0x162d9620, 0x19322d16, 0x40192727, 0x05064a40, 0x1f080f2d, 0x8f087f08, 0x03080408, 0x49109635, 0x263105fb, 0x2a982326, 0x18983263,
		0x03983361, 0x051f050f, 0x066b4102, 0x15003724, 0x60413768, 0x12cd2706, 0x712b2f39, 0x766fed33, 0x05c54905, 0x2c07b842, 0x2f2f3311, 0xcd102f33,
		0x102f32cd, 0x0c6341ed, 0x41063f5a, 0x03201365, 0x411be74f, 0x07200876, 0x20157641, 0x14e04748, 0x41150121, 0xf8200682, 0x21148141, 0xf14fb101,
		0xdbfe2116, 0x080b9041, 0x0f000521, 0xe201f7ff, 0x15007202, 0x2c002200, 0x35003100, 0x00b9b000, 0xb3e8ff30, 0x2e4d0017, 0x83e0ffb8, 0xb8122807,
		0x12b3f8ff, 0x820f4d00, 0x5440260f, 0x4c00150e, 0x0a98410a, 0x34324008, 0x359c3433, 0x35351432, 0x30333332, 0x2d2d221f, 0x961a181d, 0x351d9617,
		0x96250335, 0x08962a10, 0x10080000, 0x32593534, 0x222d5b33, 0x30171f60, 0x611c1d1a, 0x05039823, 0x98002705, 0x41276815, 0x464b0675, 0x0c244e06,
		0x6832cc21, 0x332a05ad, 0xfded2f2f, 0x113311cd, 0x6d512f33, 0x08645408, 0x4e157141, 0x13200a1b, 0x25086241, 0x07060603, 0x67410333, 0x46572015,
		0xf82006f7, 0x25065841, 0x102116ca, 0x5d412a47, 0x7b022114, 0x21070447, 0x4e4111fe, 0xc4012105, 0x25082d4e, 0xff0d0004, 0x334401f7, 0x00312605,
		0x003f003b, 0x0ddb4cf5, 0x150eb424, 0x53414c00, 0x40d8220a, 0x0f534116, 0x0d201b29, 0xb8174d00, 0x82b3d8ff, 0x860e2007, 0x820b2007, 0x5e402107,
		0x06211082, 0x08048230, 0x3d3e3c27, 0x3c3f9c3e, 0x3c3f3f14, 0x30293d3d, 0x4f962630, 0x31190119, 0x292e2916, 0x29411f1f, 0x3f3f2901, 0x10963403,
		0x057e4139, 0x593f3e27, 0x295b3d3c, 0x07e64c98, 0x9823203a, 0x1c011c40, 0x05983264, 0x98003605, 0x98366815, 0x0d010d4f, 0x5d3f0066, 0x20057954,
		0x270882ed, 0xed3f2f32, 0xed2f3912, 0x41050143, 0x5d290a8b, 0x33112f33, 0xdc32cd10, 0x05d7575d, 0x2009634e, 0x07c3452b, 0x412b2b21, 0xcc4c1496,
		0x44012018, 0xbd201f7d, 0x21153e47, 0xae410801, 0xfafe2106, 0x2015aa41, 0x134b4724, 0x4343fe21, 0x04220905, 0xaf410b00, 0x05434706, 0x9b003225,
		0x421600b9, 0x132305f1, 0x42d8ffb8, 0x0e2705f1, 0x00150e20, 0x83280b4c, 0x96282905, 0x5f1f1a1a, 0x20230123, 0x08083147, 0x01000329, 0x01205001,
		0x962b0720, 0x0c963014, 0x140c0404, 0x23140303, 0x6021981f, 0x9829611a, 0x2d090907, 0x68199804, 0x6211982d, 0x3f200d69, 0x4c06f542, 0x6441071a,
		0x5d2f2107, 0x220b5454, 0x5439325d, 0x33240756, 0x03330123, 0x2012c845, 0x09e44903, 0x37321723, 0x05c84534, 0x0145502a, 0x2eae477a, 0x14150d3b,
		0x200bc845, 0x0b2357dd, 0x1715f02e, 0x1515142e, 0xbefd6b02, 0x0c1b1702, 0x210bc645, 0x17478101, 0x362f2308, 0x3241f525, 0x00240805, 0xff130006,
		0x02e101f7, 0x001f0079, 0x003f0035, 0x0057004c, 0xb954015b, 0xd8ff2f00, 0x150e1740, 0x182a4c00, 0x27210583, 0x21058320, 0x4160301e, 0x6613200c,
		0x0e210630, 0x202c82b8, 0x09095e36, 0x18204627, 0x28464d00, 0x24048217, 0x4d001620, 0x270e8343, 0x17161843, 0x18424c00, 0x42211982, 0x2d0a8320,
		0x15121832, 0xb8224c00, 0x11b3e0ff, 0x07824d00, 0x26071459, 0x1513b4e0, 0x82144c00, 0x12b32353, 0x07824d00, 0x8f6bd020, 0x40e02d06, 0x4d001064,
		0x18161804, 0x18044c00, 0x62080a82, 0x5a595a58, 0x14585b9c, 0x5b5b585b, 0x30963823, 0x2028963d, 0x59302820, 0x50130059, 0x06040345, 0x10109652,
		0x00169640, 0x0606964d, 0x5a009647, 0x5958595b, 0x2398365b, 0x203a2525, 0x3a683598, 0x13662d98, 0x03459850, 0x4a554545, 0x011b7098, 0x9855641b,
		0x3f00630b, 0xed5d3fed, 0x33113912, 0x8232e910, 0x06d4410b, 0x333f332a, 0x33ed2f01, 0xdc10ed2f, 0x12210583, 0x20208217, 0x08816d2f, 0x67623320,
		0x12146a05, 0x2008105b, 0x1a886013, 0x04420120, 0x43372012, 0x03230844, 0x60022e34, 0x13261298, 0x13330123, 0x9c601a11, 0x111b2107, 0x2408105e,
		0x01121e26, 0x10f2470b, 0x5c434e20, 0xac270806, 0x0d18130b, 0x14111f1e, 0x151f581d, 0x0e16151c, 0x01460f17, 0xbb01467b, 0x090b250c, 0x1a12171c,
		0x12090812, 0x600f111a, 0xfe210baf, 0x0f164883, 0x41428c20, 0x38012905, 0x07090c09, 0x0e1b0e04, 0x3e0abe60, 0x6b02c6fd, 0x00020000, 0x01f5ff26,
		0x00b502bf, 0x00320020, 0x31114092, 0x4d001118, 0x820d182d, 0x0b103204, 0x294c000c, 0xb3f8ffb8, 0x234d0010, 0xb3e0ffb8, 0x2d07840f, 0x0d1540f0,
		0x204c000e, 0x4d000d10, 0x24832020, 0x34831320, 0xffb81029, 0x0e0e40f0, 0x830f4d00, 0x0e2d083d, 0x4d000c08, 0xd8ffb809, 0x000e1a40, 0x82301e4d,
		0x8226340c, 0x16040416, 0x1b882133, 0x882b071b, 0x07006811, 0x3fcd2f00, 0x2f3911ed, 0x056977ed, 0x1810ed21, 0x24119fd4, 0x07062213, 0x0b0e6f27,
		0x35022e2d, 0x33023e34, 0x26171632, 0x72220726, 0x9908098e, 0xbe262635, 0x0c142e1a, 0x481f3d1a, 0x1616375e, 0x2c435935, 0x1a162d43, 0x26364f35,
		0x4e06113a, 0x21342318, 0x27190d10, 0x20362a1a, 0x023a1a0e, 0x45090b6e, 0x603a0b0b, 0x803c427c, 0x3c244369, 0x562c2a4e, 0x0d172a43, 0x1ff86f67,
		0x1b1f3f32, 0x34172733, 0x192a5f50, 0x00020015, 0x01000009, 0x006b02eb, 0x0016000b, 0x06274047, 0x78120c12, 0x0b14060b, 0x1105060b, 0x0078110c,
		0x00001405, 0x0b000c05, 0x0b170018, 0x05060c44, 0x79111241, 0x3f004400, 0x333f32ed, 0xdc823f33, 0x11ce1023, 0xea4f1839, 0x7d3f080a, 0x333031c4,
		0x3337033e, 0x0317031e, 0x2107030e, 0x1709032e, 0x1e322d2c, 0x31351b66, 0x0af2112a, 0x12282621, 0x28121501, 0x9d592026, 0x444e9295, 0x429ea5a2,
		0x601b2302, 0x5050957d, 0x82607d95, 0x3a00258e, 0xba019fff, 0x073b9382, 0x0b401b00, 0x05090102, 0x07040806, 0x00060259, 0xcd3f332f, 0xcdd61001,
		0x18cdde10, 0x3209f756, 0xdc52ba01, 0xfd6b0252, 0xfd860234, 0x00cc027a, 0x82310001, 0x82bf203f, 0x172d083f, 0x2a405400, 0x03001300, 0x0a0f7813,
		0x0a0f0f14, 0x19041212, 0x78030300, 0x07140a07, 0x0f0f0a07, 0x0a0a1807, 0x0f030000, 0x07411013, 0x305e8203, 0xcd3f32cd, 0x19391132, 0x1801332f,
		0x32c6102f, 0x26d8822f, 0x01c4107d, 0x84ce1018, 0x8208200b, 0x2d78820c, 0x21070606, 0x36352115, 0x032e3736, 0x0a823527, 0x031e2f08, 0x62384c01,
		0xfe2e0121, 0x41631e72, 0x1a2c4130, 0xfe8a0107, 0x322b0ed8, 0x530f0134, 0x3b454296, 0x4962963f, 0x0e274262, 0x44174638, 0xa3824e4c, 0xe8821220,
		0x7902e22a, 0x60002d00, 0xff0700b9, 0x2408ee55, 0x000d2e40, 0xd54f184d, 0x130f3d09, 0x0a761813, 0x2f0a1010, 0x22252529, 0x28280076, 0x25132e00,
		0x79290f25, 0x1d442712, 0x0808c618, 0x11323223, 0x06684233, 0x332f3222, 0x1021ad83, 0x5a0882ed, 0x1321053d, 0x077c6434, 0x07020e28, 0x35231533,
		0xaa6a033e, 0x16142208, 0x08108217, 0x032e332c, 0x4f3c2320, 0x3c4f2d2d, 0x201a1223, 0x18c5650d, 0x100c1824, 0x21213120, 0x2a102031, 0x1167c736,
		0x010f1a1f, 0x4b714b4c, 0x04822626, 0x434c283d, 0x33461639, 0x504b4118, 0x3e502d27, 0x513d2524, 0x3c904e2d, 0x3e194633, 0x82004843, 0x00012e00,
		0x01e4002e, 0x002a01c7, 0xb30d0003, 0xef991803, 0x21132f0a, 0x012e2115, 0x0167fe99, 0xff00462a, 0x537600ff, 0x06022406, 0x83006e01, 0x00b12a0f,
		0x014401ca, 0x00070263, 0x20478211, 0x3e4b84d6, 0x01f3ff1d, 0x00bb02e2, 0x402e000e, 0x04070814, 0x06050104, 0x00010d10, 0x055c0804, 0x820e0e06,
		0x2f420809, 0x2f2f32cd, 0x01333f33, 0x10cddd2f, 0x3911cdde, 0x33332f19, 0x37133031, 0x13171616, 0x2e230333, 0x1d072703, 0x142b1d83, 0x4ac1499d,
		0x1b17160b, 0x39014110, 0x3e7b502b, 0x38fd6002, 0x49454324, 0xa982152a, 0x001e3708, 0x01d60188, 0x000b0085, 0x0037002b, 0x1f1b4039, 0x0303350f,
		0x09272f17, 0x22223217, 0x1f35030f, 0x1c061204, 0x0c0c2c12, 0x2f001200, 0xcd2f33cd, 0x12cddc10, 0x08823917, 0xcd2f0123, 0x2a76822f, 0x3939cd2f,
		0x32373031, 0x4c263736, 0x172306ff, 0x18272622, 0x430d7c6f, 0x272009f1, 0x0805d069, 0x07062222, 0x14981616, 0x250f1023, 0x21211713, 0x0e3524e0,
		0x1024330f, 0x19192429, 0x24102924, 0x340f0f33, 0x182a0d83, 0x13292418, 0x16212116, 0x29822414, 0x25c22208, 0x22251f20, 0x3a222322, 0x28171728,
		0x25311d0c, 0x0c1d3025, 0x29171729, 0x25301d0c, 0x0c1d3125, 0x081c823a, 0x20242224, 0x00002520, 0x4b000100, 0xa8015bff, 0x1700b502, 0x0c401d00,
		0x17130c07, 0x14181917, 0x5a040810, 0xb9823f00, 0x1211013e, 0xddce2f39, 0x133031ce, 0x32333634, 0x23151732, 0x11150622, 0x22230614, 0x33352722,
		0xd02ca782, 0x13035853, 0x2c332717, 0x12055851, 0x2b2b0782, 0x615afa01, 0x333e4701, 0x845919fe, 0xffff3107, 0x5f002500, 0xb101cf01, 0x61003602,
		0x06006000, 0xa2200582, 0x3e087b84, 0x010e002e, 0x00fd01c7, 0x40420013, 0x0b0c0f21, 0x10070408, 0x05020112, 0x07061104, 0x100d0a07, 0x00031111,
		0x0b050608, 0x10010c02, 0x2f00120f, 0x32ddcd33, 0xcddd32de, 0x332f0133, 0x84cd2f33, 0x17113404, 0x17121139, 0x37303139, 0x35233733, 0x07173733,
		0x84231533, 0x37273a03, 0x3d882e23, 0x3a3be9c5, 0x3d89652a, 0x3b3aeac6, 0x77ca642a, 0x55207547, 0x82058447, 0x2e9b8282, 0x0101002e, 0x020302c7,
		0x009f0127, 0x821dff00, 0xfd1f229d, 0x3b17943d, 0x003dfd21, 0xff270002, 0x02cd01f1, 0x0011007b, 0x408c0021, 0x0f20191a, 0x28174d00, 0x15200482,
		0x0f210483, 0x20098218, 0x2813830c, 0xe0ffb807, 0x4d000db3, 0x21078203, 0x08821d40, 0x1717053c, 0x1f0a121f, 0x1f0d001c, 0x1c22231f, 0x00000a12,
		0x16201f05, 0xb81f4d00, 0xc86ad0ff, 0x40c02306, 0x1082100d, 0x30170d28, 0x4c001110, 0xf2820517, 0x332f2b28, 0x122b2b2b, 0xed821939, 0x1101332b,
		0x332f3912, 0x19cd18dd, 0x23048210, 0x33113311, 0x0809d947, 0x033e1325, 0x17031e37, 0x2e070606, 0x032e2503, 0x07030e27, 0x36171616, 0x361e2736,
		0x1a1a3233, 0x1e363332, 0x8334643b, 0x32013f07, 0x1e1e1e12, 0x1d1f1111, 0x3822111f, 0x01382223, 0x4f573136, 0x49252549, 0x6231574f, 0x0782499a,
		0x1f32563c, 0x182d3136, 0x35312e18, 0x2e603d1f, 0x00005e2e, 0x1c000300, 0xcc010000, 0x0982b502, 0x000f4908, 0x404d0026, 0x0c20122a, 0x83074d00,
		0x007f010d, 0x161e2028, 0x10257f22, 0x23012723, 0x1a17174c, 0x214d1488, 0x0a108524, 0x0202048a, 0x0049101e, 0x1033333f, 0xed10edde, 0x32ed3f32,
		0x01333f2f, 0xce32d610, 0xce33ccfd, 0xd4291482, 0x2b3031ed, 0x33112321, 0x4d941827, 0x3505220a, 0x21b78234, 0x2f430717, 0x33152405, 0x82112315,
		0x35380801, 0x5353c001, 0x1f1f162a, 0x1f1f1716, 0x5a56a4fe, 0x0a0c182f, 0x2c381317, 0x35537b7b, 0x1e54d001, 0x1d1d1919, 0x541e1919, 0x06615a2a,
		0x3f030448, 0xfe452936, 0x458b0175, 0x4422bf92, 0xba892440, 0xba822120, 0xba8c2420, 0xbc83b482, 0xde23b982, 0x8b333fed, 0x82cd20b7, 0x86cd20b7,
		0x2eb6e1b7, 0x1c000200, 0xeb01f7ff, 0x0b00b502, 0x82002200, 0x0b2508b5, 0x067f030b, 0x121a1c24, 0x0c217f1d, 0x4c1f2320, 0x88161313, 0x201d4d10,
		0x490c1a85, 0x0b4d0504, 0x00510088, 0x88b4823f, 0x100123b6, 0xb58532d6, 0x33eddc31, 0x0530312f, 0x11352626, 0x1e141137, 0x41011702, 0xe0291667,
		0x05533844, 0xfe0f140c, 0x0d644166, 0x3e02092f, 0x0e2e0242, 0x1a15d2fd, 0x01030810, 0x11684193, 0x2faeaf40, 0x7400ffff, 0x80017d01, 0x0602e402,
		0x6b006f01, 0x872b0f82, 0x88018401, 0x0602dd02, 0x83099400, 0x827c200f, 0x8378200f, 0x8d00211f, 0x80201f84, 0x0f852f82, 0x83028e21, 0x8269201f,
		0x8380201f, 0x7001212f, 0x77201f84, 0x6f201f82, 0x71210f84, 0x201f83f8, 0x220f8275, 0x82df027a, 0x8472205f, 0x827e200f, 0x847d202f, 0x8473201f,
		0x8277200f, 0x847d201f, 0x8474207f, 0x017c243f, 0x84810183, 0x8475200f, 0xff74261f, 0x00800160, 0x06f773c7, 0x00004e33, 0x8700ffff, 0x880167ff,
		0x0702c000, 0x09009400, 0x201385fe, 0x2013827c, 0x82278378, 0x860020a7, 0x82802013, 0x2213853b, 0x8602008e, 0x82692013, 0x83802027, 0x87af823b,
		0x82772027, 0x846f2027, 0xff712213, 0x202786f8, 0x22138275, 0x82c2007a, 0x88722077, 0x827e2013, 0x847d203b, 0x88732027, 0x203b8313, 0x219f847d,
		0x4f870074, 0x66ff7c24, 0x13848101, 0x27857520, 0x00010039, 0x01ee01d2, 0x00b50221, 0xb5110003, 0x03034000, 0x2f000280, 0x8201cd1a, 0x30312e03,
		0x35230701, 0x37182101, 0xc7c7b502, 0x362b8200, 0x0156ffab, 0x00d3ff40, 0xb613000e, 0x0700010a, 0x000f000a, 0x82dede10, 0xcecd252d, 0x33173031,
		0x4606e44f, 0xee350584, 0x3d010150, 0x0f16142e, 0x052d1321, 0x3039040b, 0x1d1d3006, 0x2a008200, 0x02b90001, 0x023b0120, 0x820f00b9, 0x0f0a2773,
		0x000a0904, 0x45832f00, 0x4582dd20, 0x23012908, 0x34353426, 0x1737023e, 0x0115030e, 0x12014f09, 0x1d12241d, 0x070e120b, 0x0b052002, 0x202f2003,
		0x08280413, 0x18201610, 0x00204a82, 0x0221bf82, 0x32bfa208, 0xff00adad, 0xff7100ff, 0x02820183, 0x000602e7, 0x8c2a000b, 0x840c200f, 0x018c260f,
		0x0168010d, 0x221f825b, 0x82360010, 0xff45261f, 0x02af0185, 0x200f82e5, 0x261f8412, 0x01b5ff28, 0x82b502d4, 0x0023220f, 0x201f823c, 0x201f828f,
		0x201f847e, 0x201f843e, 0x200f8246, 0x200f84ae, 0x200f843f, 0x200f8276, 0x200f8465, 0x200f8440, 0x200f824f, 0x200f84ab, 0x200f845e, 0x200f8249,
		0x200f84a5, 0x260f8460, 0x016f0090, 0x82fa0155, 0x006c225f, 0x265f8237, 0x01c40072, 0x82e20182, 0x0072220f, 0x260f8217, 0x01120145, 0x825801af,
		0x0073220f, 0x200f8226, 0x200f8200, 0x200f84f4, 0x200f8474, 0x203f829f, 0x203f8464, 0x3a3f8478, 0x01faffb6, 0x0270023c, 0x007c0007, 0x009f0000,
		0x00ffff00, 0x0185003f, 0x82e4019d, 0x84862043, 0x825520e3, 0x84b5200f, 0x8496200f, 0xff5c260f, 0x029a01f8, 0x20338273, 0x2033829a, 0x380382a2,
		0xff140002, 0x02cc01f5, 0x001a00b5, 0x40990029, 0x1018241c, 0x20244d00, 0x3904820f, 0x4d000e18, 0x100f281f, 0x181f4c00, 0x4c000e0d, 0xe0ffb80e,
		0x000a08b4, 0x08820a4c, 0x000ab323, 0x0807844d, 0x4d000842, 0xd0ffb809, 0x00093240, 0x0c82214d, 0x0002292b, 0x16187f03, 0x15011500, 0x0015032a,
		0x19071818, 0x1e1b4d1a, 0x51111488, 0x04882629, 0x07100700, 0x07400720, 0x50070804, 0x5d5e3f00, 0x3f32ed33, 0x122e0384, 0xcd332f39, 0xd6100132,
		0xfd33cd5d, 0x6218cd32, 0x2b260c8d, 0x1533132b, 0xb0491523, 0x22232a09, 0x23112726, 0x37353335, 0x06496d11, 0x022e3e08, 0x07062223, 0x0fa2a2a8,
		0x462d2236, 0x381e1a30, 0x5236304e, 0x5242421a, 0x40102412, 0x2c1b0d49, 0x0e331c1e, 0x653e6202, 0x40241309, 0x5a383659, 0x0810223f, 0x453e1702,
		0x0593fd0e, 0x3ec61805, 0x03003f0a, 0xfbff1200, 0x7102e201, 0x31002200, 0xc7003e00, 0x383a2f40, 0x3a4d0012, 0x4d001128, 0x09822836, 0x82303621,
		0x402f2109, 0x2e200982, 0x2e2c0983, 0x4d001018, 0x12113029, 0x10294c00, 0x22280a82, 0xb3e8ffb8, 0x214d0009, 0xb4250782, 0x4c000c0a, 0x23088218,
		0x4d000cb3, 0xf0220782, 0x07840bb3, 0x0ab3e022, 0xe8270784, 0x00093740, 0x8210114d, 0x114a081d, 0x4d000b18, 0x1a76381d, 0x20762c1a, 0x733e2340,
		0x06200600, 0x09060802, 0x0f010f00, 0x060c0c3f, 0x1d14793b, 0x32327923, 0x7c274114, 0x3f004300, 0x2f393fed, 0xed1039ed, 0x012f3232, 0xdd5dd610,
		0xed5d5ede, 0xedde1032, 0xdc722f33, 0x22052c14, 0x1127022e, 0x14150606, 0x62260717, 0x0a710523, 0x0306240b, 0x7e161615, 0x2e230502, 0x85272302,
		0x269b0809, 0x07062223, 0x210e1f01, 0x260d2123, 0x02430421, 0x5a482c05, 0x3d240f2f, 0x262d1a2d, 0x965b3c33, 0x160b190b, 0x15121f29, 0x22182d23,
		0x1e261218, 0x092c2e14, 0x02050b14, 0x02040603, 0x1d200518, 0x06081110, 0x39320d19, 0x2610071c, 0x4a2c2e3e, 0x3c4c0e0e, 0x26015d5d, 0x0a0202dd,
		0x20232d1a, 0x440a192a, 0x1e261708, 0x02012d36, 0x02000000, 0xfbff3600, 0x6b02c301, 0x1f001000, 0x16407900, 0x00102018, 0x0f18184d, 0x20144d00,
		0x4c00100f, 0x000e1813, 0xffb8084d, 0x840ab3e8, 0xb3e02507, 0x054d0008, 0xb4240f82, 0x4c001211, 0xe0200882, 0x07821883, 0x1c40e822, 0x163a1982,
		0x10100776, 0x1d012107, 0x1c200d73, 0x11010179, 0x410e7900, 0x430a7c11, 0x12553f00, 0x18012006, 0x20072b5f, 0x0be36710, 0x41151321, 0x4708061a,
		0x27262223, 0x03152111, 0x35023e32, 0x23022e34, 0x16161523, 0x5d3b4288, 0x777f2140, 0x01215323, 0x3a22bb56, 0x2d18192b, 0x1a3e273f, 0xa625021d,
		0x354a2d14, 0x09066163, 0xfe466102, 0x301d0d1b, 0x1c312524, 0x0103f80c, 0x4730db84, 0xcc01f5ff, 0x1400b102, 0x89002300, 0x181e2a40, 0x1e21db82,
		0x20db8228, 0x21d5831e, 0xe0833019, 0x0e28192a, 0x10194d00, 0x0b4d000d, 0x0b281e83, 0x4d000f10, 0xf0ffb806, 0x0782d683, 0x09b3e022, 0xe8220f84,
		0xde822340, 0x821b2008, 0x09141409, 0x7f150125, 0x08011100, 0x85002411, 0x18154d12, 0x510e1188, 0x01882023, 0x43005004, 0xed20055b, 0x096b6718,
		0x6805924e, 0x2b210bcd, 0x0f584313, 0x01152122, 0x320c5543, 0x23390f9a, 0x1b334a2f, 0x32523a20, 0x011a5637, 0x1800ff53, 0x220b8fc9, 0x43ac6b02,
		0xa4230c53, 0x43ddfd46, 0x02220b51, 0xf7840b00, 0x1500b522, 0x8324f782, 0x201e1540, 0x1e20e282, 0x1920e283, 0x19220983, 0x4b440d18, 0xb3e02a0c,
		0x094d0010, 0xb3e8ffb8, 0x8407840f, 0x210f83fa, 0xfb822240, 0x0c821b32, 0x7f160325, 0x01140000, 0x16241408, 0x11148818, 0x042eec83, 0x00005007,
		0x004d0315, 0x1939cd3f, 0xf787182f, 0xd6100126, 0xedce5d5e, 0x0ec77418, 0x36361323, 0x26f48f37, 0x32331613, 0x44343536, 0x0b250547, 0x10274a20,
		0x33f48936, 0x25521a53, 0x0e4e4523, 0x1d212f1e, 0x78020e34, 0xf60a2013, 0x2623f38c, 0x440a15fe, 0x02310b43, 0xfbff0900, 0x7102c301, 0x21001000,
		0x00b99600, 0x05537b18, 0xffb81723, 0x82de83d8, 0x83d02007, 0x450782de, 0x15200553, 0x07821886, 0x1883e020, 0x0a220f84, 0x07824d00, 0x82b3e821,
		0x290782f6, 0x082940d8, 0x180e4d00, 0x9750000e, 0x76003b05, 0x09112316, 0x1c001e73, 0x221c0801, 0x211d1e1e, 0x11117c08, 0x7c0c4121, 0x1c444319,
		0xcd102606, 0x012f1939, 0x14044118, 0x252b2b22, 0x2222ed84, 0xf7431107, 0x36272405, 0x5e323332, 0x560806f6, 0x36362711, 0x19710137, 0x0d20392a,
		0x27130d21, 0x28321a10, 0x240bd719, 0x6d79ec0e, 0x3e215322, 0xc22a4720, 0x0d1f3428, 0x03fcfe02, 0x321e0d01, 0x64ca02ed, 0x01090663, 0x201343e6,
		0x0000000b, 0xff2a0001, 0x02c601f3, 0x001f0079, 0x1e114081, 0x4d001228, 0x8211201e, 0x0f182d04, 0x1a4c0010, 0xb3e8ffb8, 0x144d000d, 0x40280782,
		0x000e0d41, 0x10280f4c, 0x2683db82, 0x82180e21, 0x08083226, 0x084d000c, 0x4d000b28, 0x12111004, 0x18044c00, 0x830a820c, 0x7606330f, 0x0d0d2117,
		0x0000201f, 0x461c7c03, 0x7c090c0c, 0x376a4512, 0x057a5108, 0xad6bde20, 0x2b2b230c, 0xce42372b, 0x18262006, 0x20088aaa, 0xf842181e, 0x27340807,
		0x1d3e233f, 0x58596253, 0x1523401d, 0x2c2c290f, 0x425b3512, 0x5d452826, 0x234d2d35, 0x7a0f135e, 0x0d827880, 0x100a4114, 0x4f26050a, 0x7a53547a,
		0x1413274f, 0x2e20df83, 0xeb37df82, 0x2e00be02, 0x0b409600, 0x000e1816, 0x0d20164d, 0xb8124d00, 0x83b4e0ff, 0x210882b1, 0xd382b3d0, 0xc0250782,
		0x4d000fb3, 0x07a3440b, 0x0b240884, 0x054c000c, 0xb3231182, 0x824d0012, 0xb3f02107, 0x0782f382, 0x86b4e821, 0x40f02618, 0x000a091d, 0x29e5824c,
		0x08301126, 0x2a2f1976, 0xf1831e23, 0x10451e27, 0x147c0d10, 0x18f18846, 0x23089150, 0x332f33ce, 0x210cd643, 0x077f2601, 0x021e2106, 0x210b227d,
		0x0e823e34, 0x36361725, 0x4d163233, 0x650805ec, 0x8401020e, 0x24172f1c, 0x18172a3b, 0x1a233a2a, 0x20151e3a, 0x56322947, 0x4127233f, 0x1d242d55,
		0x0a2a2e0d, 0x050d081b, 0x130f0512, 0x12020a0e, 0x42250e10, 0x5e40375c, 0x130f1e3e, 0x27131444, 0x4c537a4f, 0x0b2c5378, 0x05061f31, 0x1304033d,
		0x0000261f, 0x31000100, 0xe601f5ff, 0x31003202, 0x18b54a00, 0x00410e30, 0x0db32905, 0xb8064d00, 0x1c40e0ff, 0x23300882, 0x11290000, 0x1b820833,
		0x00262d32, 0x50208805, 0x882ada82, 0x49015116, 0xed3f3f00, 0x03822f32, 0x01cddc27, 0x10edd610, 0x27db88de, 0x23032e01, 0x14150622, 0x0e20d286,
		0xab550d82, 0x08d38d09, 0x16058254, 0x490f1f1b, 0x3c27124f, 0x1037212b, 0x231b070c, 0x573a1228, 0x3c201e3b, 0x1c0e3554, 0x2d320a0e, 0x0e091b0b,
		0x12061007, 0x01050b14, 0x06070180, 0x26555705, 0x0b182c3e, 0x08054508, 0x40240407, 0x5a353559, 0x02032541, 0x05062734, 0x1403033c, 0x7318291f,
		0x12301213, 0xe401fbff, 0x1b007102, 0x6d002a00, 0x48264d40, 0x2621ea82, 0x36de8220, 0x00121825, 0x1110254d, 0x10224d00, 0x4c001211, 0x000e1821,
		0x8210214d, 0x43072019, 0x2d0808c2, 0x2c057624, 0x0e007329, 0x0e200e10, 0x00110e03, 0x17080117, 0x0a7c1f2b, 0x290e1443, 0x00410079, 0xcc32fd3f,
		0x1001ed3f, 0xd55d5ed6, 0xdc185dd6, 0x01200e2f, 0x09be4518, 0x210dd647, 0xc7471613, 0x23263106, 0x01070622, 0x3b502f08, 0x503b2222, 0x16391a2f,
		0x3b05c347, 0x0c554b33, 0x1f061008, 0x42112130, 0x04100841, 0x4c227102, 0x78565578, 0x0609224b, 0x2e0ab547, 0x051b3935, 0x0102d4fd, 0x415d3b1b,
		0x4602767e, 0x312005c3, 0xbf20ef82, 0x23069f47, 0x1e00b97f, 0x2705cf44, 0xe0ffb81d, 0x4d000fb3, 0xe8210782, 0x27e782b3, 0xe8ffb819, 0x4d0010b3,
		0xd8200782, 0x07821783, 0x3040f822, 0x0b271882, 0x4d001210, 0x8211180b, 0x08202404, 0x83074d00, 0x140f3b04, 0x1b210373, 0x00000976, 0x79152009,
		0x11010f0f, 0x0043067c, 0x00410179, 0xbb57ed3f, 0x3513231c, 0xa2181121, 0x33270984, 0x36320335, 0x57233537, 0x3c0806b0, 0x22570168, 0x7f772353,
		0x3b5d4021, 0x1d124942, 0x3f273e1a, 0x2b19182d, 0x4625023a, 0x06099ffd, 0x4a356361, 0xfea6142d, 0xf802021b, 0x25311c0c, 0x0d1d3024, 0x28000200,
		0xad01f5ff, 0x05a34702, 0x00b95f33, 0xb4e8ff1f, 0x4c000e0d, 0xf0ffb81f, 0x4d000cb3, 0x2b07821a, 0x000e2a40, 0x0f180f4d, 0x0e4c0010, 0x143bbf83,
		0x25047f23, 0x010c821d, 0x15240c01, 0x11148818, 0x88202350, 0x01510704, 0x834d0285, 0x4a3320c2, 0x805805e3, 0x23012111, 0xc442c086, 0xbe741809,
		0xfe5a240e, 0x181b5101, 0x200c89cf, 0xa4cf180e, 0x6b02260a, 0x085cfd46, 0xb8741810, 0x00023516, 0x015bff27, 0x00db01cc, 0x003c0028, 0x3a00b9e1,
		0x1e40e8ff, 0x362cb583, 0x4d001018, 0x000f1036, 0x1228304d, 0x20210482, 0x83048211, 0xb82c210e, 0x8206bd44, 0xb3e82108, 0x27201f82, 0x40261082,
		0x4d000919, 0x04822021, 0x0b101d34, 0x181c4d00, 0x194d0009, 0x00121118, 0xffb8094c, 0x5083b4e8, 0xe0230882, 0x850e0db4, 0x0cb32311, 0x10844d00,
		0x000b0a24, 0x4082074c, 0x4310b321, 0x2d0805f5, 0x000f0eb4, 0xffb8034c, 0x0b2340f0, 0x052e4d00, 0x08821729, 0x00823308, 0x1f82293e, 0x3d1f0e0e,
		0x1205052e, 0x50248838, 0x89120f0f, 0xe2444b0b, 0x39122106, 0x4a085157, 0x122005da, 0x11368118, 0x87182b20, 0x8b5e09dd, 0x023e270d, 0x27263435,
		0xce59032e, 0x021e2605, 0x021e1405, 0x09755717, 0xcc017008, 0x28382310, 0x4e5a291f, 0x0f114f2c, 0x0c2c4409, 0x2d131b20, 0x32402329, 0x5032171d,
		0x334f373a, 0x14b1fe19, 0x26172b21, 0x0d0c1e32, 0x2023301d, 0x010f1e2f, 0x393f2007, 0x32131031, 0x10333526, 0x13054406, 0x0b0d0702, 0x171a2718,
		0x3249382d, 0x243b4925, 0x294e3922, 0x202a3724, 0x2e260c0d, 0x331c1a34, 0x26151727, 0x00000032, 0x82280001, 0x99200804, 0x0b006b02, 0x19403200,
		0x73020606, 0x08080d0b, 0x0c010404, 0x06067903, 0x0b79020a, 0x0a790744, 0x210ef542, 0xf6822f32, 0x312f3229, 0x21353330, 0x83352335, 0x21310805,
		0x1f012811, 0xf8fee8e8, 0xdb465a01, 0xfd46be46, 0x00020095, 0x01f3ff19, 0x007902d8, 0x0026001d, 0x231640a2, 0x00121118, 0x0d28234c, 0x10234d00,
		0x2904820c, 0x4d000b08, 0xe8ffb820, 0x12825c40, 0x0e18182b, 0x10184d00, 0x154d0008, 0x210e8218, 0x04821014, 0x82201021, 0x180a2704, 0x0a4d0012,
		0x04821120, 0x100f1825, 0x84014c00, 0x28012646, 0x014d0010, 0x211f8240, 0x46822001, 0x76002639, 0x761e2812, 0x1a08081a, 0x26790027, 0x7c210226,
		0x07074617, 0x470d7c02, 0x12200789, 0x201c6f5b, 0x2900822b, 0x22232601, 0x2707020e, 0x684b033e, 0x6e0e2005, 0x630805b7, 0x06173736, 0x3e323316,
		0x84013702, 0x2313ac0c, 0x1507181f, 0x30281c05, 0x41614219, 0x553f241f, 0x02706631, 0x49015001, 0x2435223d, 0x4a010214, 0x0c0c08e9, 0x0e054104,
		0x5630090d, 0x7a524575, 0x9b9a2951, 0x45051508, 0x3b256964, 0x00002449, 0xff280001, 0x02d401f4, 0x00360076, 0x3200b9ba, 0x0eb4f0ff, 0x2827d682,
		0xb3d0ffb8, 0x824d0012, 0x40e82207, 0x20ed8238, 0x21f78322, 0x09821022, 0x82202121, 0x18212117, 0x082b0984, 0x1d4c000a, 0x00121118, 0x8220194c,
		0x40152110, 0x15211a82, 0x25098328, 0x4d000818, 0x1b44b80f, 0x44082006, 0x290806ec, 0xf0ffb804, 0x00102540, 0x0029294d, 0x1c380d00, 0x1f1f7630,
		0x37177606, 0x3679001c, 0x2a240936, 0x247c2d2a, 0x090c0c45, 0xbf47127c, 0x12113309, 0x39ed2f39, 0xedd61001, 0x32ed2f33, 0x2f32ce10, 0xc6472f32,
		0x05da420c, 0x2505d444, 0x36323316, 0xf5461737, 0x19372009, 0x47095200, 0x1a4705cb, 0x33850805, 0x292a6c01, 0x57203649, 0x16543947, 0x30240b19,
		0x5936223b, 0x2616223f, 0x37361b32, 0x2c4b361e, 0x242e351c, 0x50141b0c, 0x22433630, 0x211e4035, 0x1a0a2401, 0x353e242f, 0x05420b1d, 0x140a0e0f,
		0x2432452c, 0x071a2836, 0x292b4c11, 0x0613273d, 0x41070e0a, 0x2933150b, 0x09182920, 0x00010000, 0x0159ff03, 0x006b02c3, 0x402d0017, 0x12151516,
		0x73001419, 0x17180f08, 0x18141479, 0x41107913, 0x00057c0c, 0x095f4d2f, 0xd885cc20, 0x33303126, 0x23020e14, 0x09314e18, 0x21112c08, 0x33152115,
		0x0bb62315, 0x0d27311d, 0x09080a1c, 0x17200811, 0xf3fe5f01, 0x3e27eded, 0x0203172b, 0x2b010242, 0x467a0229, 0x490045c1, 0x2f2e0b73, 0x1cb5a600,
		0x4d000810, 0xe8ffb81b, 0x07840eb3, 0x0db3f825, 0x83184d00, 0x2307820f, 0xd0ffb817, 0x0b201783, 0x200a7449, 0x201086d8, 0x232883e0, 0xf0ffb805,
		0x20067b49, 0x067b49e8, 0x17821f84, 0x2140e022, 0x273d4182, 0x11000021, 0x08311273, 0x2b301976, 0x11111e24, 0x7c03000d, 0x10451e21, 0x16137c0d,
		0x08574d46, 0x2f391222, 0x24088149, 0x332f33ed, 0x0dbb41cc, 0x210e8349, 0xae463335, 0x1632210a, 0x3a0f8549, 0x2916301a, 0x1414293c, 0x1d2e422a,
		0x13520820, 0x81783954, 0x2c564329, 0x490e1f10, 0x29361184, 0x38315b45, 0x0825425c, 0xdefeea04, 0x9ba81507, 0x28517951, 0x85490605, 0x0002320a,
		0x015cff0d, 0x006b02e8, 0x01330025, 0x33104035, 0x08e94210, 0x000e1829, 0xffb81e4d, 0x822d40e8, 0x20162608, 0x164d0012, 0x271c8230, 0x000b2011,
		0x0a28114d, 0x0b8fd218, 0x0d18102b, 0x104c000e, 0x4d000c20, 0x06e8420c, 0xf0220782, 0x0f850fb3, 0x1d83b420, 0xe0211082, 0x242082b3, 0xe0ffb80b,
		0x824282b3, 0x4ed82007, 0xd82906b0, 0x12110a40, 0x08034c00, 0x067f440e, 0x38822220, 0x1f403037, 0x76304d00, 0x201b1709, 0x171a781b, 0x171a1a14,
		0x25202505, 0x05e55e78, 0xffb82a25, 0x823740c0, 0x762a3e21, 0x13202613, 0x0901090f, 0x20132013, 0x201a0309, 0x02003000, 0x1a3f3500, 0x1a7f1a6f,
		0x08048303, 0x341a0221, 0x26412500, 0x17170520, 0x2d411a1b, 0x2f000e79, 0x39333fed, 0x33333311, 0x1001333f, 0x82715dc6, 0x17112e03, 0x182f1939,
		0x115d2f2f, 0xed103912, 0x0c255f2b, 0x82180121, 0x30312211, 0x29421800, 0xb74b1809, 0x0e01240b, 0x18170703, 0x34092842, 0x37363435, 0x27262637,
		0x17031e33, 0x0337033e, 0x15060607, 0x05384e14, 0x27268308, 0x2a0ce801, 0x371e3b33, 0x1d0c100b, 0x30252530, 0x0e0d0c1d, 0x2a613738, 0x24201056,
		0x2e151b2a, 0x9a09212a, 0x1b0a0822, 0x0a1b1a1a, 0x1f6b0208, 0x428a7e68, 0x1130166c, 0x18242b14, 0x142b2418, 0x6d1c2a11, 0x2d71ed72, 0x426b5d55,
		0x596d7836, 0x40eafd18, 0x180e1c10, 0x0e182323, 0x00000f1d, 0xff240001, 0x02ce01f6, 0x002d00b5, 0x2b00b994, 0x0cb4e8ff, 0x2b4c0010, 0x40e0ffb8,
		0x4d000b19, 0x04833015, 0x0a09202f, 0x20144c00, 0x144d000e, 0x4d000c18, 0x211d8210, 0x07840eb3, 0x0cb3e829, 0xb80f4d00, 0x82b3d0ff, 0x22078227,
		0x840ab3e0, 0xd838080f, 0x00092240, 0x177f004d, 0x7f0a2217, 0x21242f0d, 0x202e227f, 0x2825881d, 0x4d242350, 0x88054a22, 0x490b5112, 0xed3f3f00,
		0x3f333f3f, 0x0132ed33, 0x32edd610, 0x11edde10, 0x4108bf64, 0x25200631, 0x0d8ae118, 0x2e222324, 0x514f3502, 0x23112207, 0x08724f11, 0x1b014b08,
		0x0c130d07, 0x060d120c, 0x321d0b4f, 0x1c322828, 0x110d090a, 0x08180b08, 0x210b4e4e, 0x2027140f, 0x3027bb13, 0x1a08091a, 0x16012730, 0x4427defe,
		0x321c1c31, 0x1c8a2744, 0x0a061323, 0x027efe05, 0x09ee0ea7, 0x39220e0a, 0x0082002b, 0x4400012f, 0xc801f3ff, 0x15006b02, 0x29404500, 0x26f68313,
		0x000b1013, 0x8220134d, 0x73053be0, 0x0d010000, 0x0017040d, 0x01080101, 0x090c0c16, 0x0546107c, 0x41027900, 0x645a3f00, 0x10012805, 0x105d5ec6,
		0x882f32ce, 0x231327d0, 0x23152135, 0x4a181411, 0x22080c5b, 0x530178bc, 0x1a312b89, 0x0c100b29, 0x3e2e203f, 0x25021025, 0x80fe4646, 0x060e2c3d,
		0x150f0945, 0x8230452c, 0x59002169, 0x9b200482, 0x2a088b82, 0x404a0013, 0x09101026, 0x0613130a, 0x73050103, 0x0a000c0e, 0x0a0a0801, 0x0f001415,
		0x0b041179, 0x0e0e0179, 0x0a054111, 0x84440879, 0x2f392188, 0x0a5b6118, 0xce5d5e2a, 0xce32fd33, 0x102f32cd, 0x31260382, 0x33150130, 0x03822315,
		0x33352124, 0x03842335, 0x0115213b, 0x785b5b23, 0x5c78befe, 0x4201785c, 0x41c22502, 0xdc4646dc, 0x4646c241, 0x31008200, 0x00400001, 0x02fb0100,
		0x001d0077, 0x0d3e406e, 0x0882120d, 0x0b783708, 0x0b0b140d, 0x120d130d, 0x1318780d, 0x13181814, 0x0b010b2f, 0x1f120505, 0x73191d18, 0x1a101a00,
		0x1e1a0802, 0x0d0d181d, 0x1a411b1a, 0x44131244, 0x7c09000b, 0x9f834502, 0xeb183220, 0x4f5009ca, 0x32ed2805, 0x32ce1032, 0x435d332f, 0x08220a4d,
		0xab82c47d, 0x08095a4e, 0x07070645, 0x2317031e, 0x1127032e, 0x11331123, 0x3a353001, 0x24143117, 0x130a1a0e, 0x20691d23, 0x153e4649, 0x413a195d,
		0x52522345, 0x154a2d02, 0x0d0e3916, 0x1a8e282b, 0x32615749, 0x3f4c582e, 0x02d8fe17, 0x82ecfe6b, 0x004408ce, 0x00470001, 0x02de0100, 0x002400b5,
		0x0034405e, 0x1e210500, 0x00228121, 0x00222214, 0x00050006, 0x14060b81, 0x0b00060b, 0x26052222, 0x0b16161e, 0x010d007f, 0x21250d08, 0x891a4922,
		0x4a0d4d13, 0x004a0506, 0xed2ac183, 0x1001333f, 0xed5d5ed6, 0xbe842f32, 0xc100102d, 0x872b0587, 0x1887c47d, 0x84872b10, 0x863720bf, 0x231523b2,
		0x04643411, 0x5d072005, 0x11230513, 0x18373636, 0x2f0f5572, 0x29331e0b, 0x080a200d, 0x21071708, 0x2c6e371a, 0x0f5dd518, 0x18290e21, 0x2609c76b,
		0x5f30f1fe, 0x826c3333, 0xff3635cb, 0x02c201f5, 0x001f00b0, 0x1b224042, 0x110e101b, 0x07090b7f, 0x09257018, 0x090e862b, 0x850a1709, 0x1a1a4d0d,
		0x055b5c17, 0x3806b569, 0x0132ed33, 0x2f391211, 0x33cd5d5e, 0xcd32fdcc, 0x30312f32, 0x022e2205, 0x06154235, 0x33113324, 0x1e4f2315, 0x52012b0a,
		0x0e223a2c, 0xd8868686, 0x70188484, 0x95271012, 0xfe46e43e, 0x18953ed6, 0x3a0b0e70, 0x001d0001, 0x02d40100, 0x002700b5, 0x1e6140a3, 0x4d001328,
		0x86011d95, 0x8313011d, 0x1353080a, 0x4d001230, 0x6c01137c, 0x21210112, 0x03080e03, 0x0e098108, 0x0e090914, 0x00030023, 0x14232781, 0x11232727,
		0x09030311, 0x19192927, 0x0f222809, 0x121f2110, 0x110e2020, 0x10201010, 0x10031030, 0x0e032310, 0x8915090e, 0x09084d1c, 0x4a00274a, 0x18323f00,
		0x2c08d2ca, 0xcd5d2f33, 0x392f3311, 0x3911cd39, 0x052c4d39, 0x3911ce22, 0x2a088e6d, 0x2b101887, 0x01c47d87, 0x82183311, 0x5d5d23f5, 0x03822b2b,
		0x2626212d, 0x07030e27, 0x37033e23, 0x61270727, 0xcb6505ec, 0x168d0805, 0x07173717, 0x0117031e, 0x233c1677, 0x1d262d1a, 0x290d5209, 0x131e3933,
		0x0e59145e, 0x110d1921, 0x20050c05, 0x153e3416, 0x1f6c156f, 0x0f293138, 0x2f5bc65b, 0x245d6567, 0x7c7c7632, 0x38202e37, 0x031b1a1f, 0x05024202,
		0x38262b34, 0x8b924925, 0x00003881, 0x2d000100, 0xc701f3ff, 0x25006b02, 0x29404800, 0x000c180b, 0x0b100b4d, 0x731b4d00, 0x18180516, 0x0073230d,
		0x0d731027, 0x190e2426, 0x16410e19, 0x08057c13, 0x027c2046, 0x08064e46, 0x33112f26, 0xedd61001, 0x29053e45, 0x31ed3333, 0x252b2b30, 0x9c622306,
		0x33112109, 0x23067744, 0x33353526, 0x8207ca41, 0xc73a0834, 0x29192d36, 0x1d251411, 0x1827341b, 0x0e241e4b, 0x4b110a14, 0x15190d04, 0x4b071105,
		0x0c0e180b, 0x2a110c0e, 0xbd013848, 0x413b49fe, 0x3c2b0807, 0x2c15ccd2, 0x02021724, 0xb7832f02, 0xffcfff25, 0x82bd0159, 0x1f3f08b7, 0x2e404c00,
		0x0a190a09, 0x01011502, 0x01010106, 0x7e0a0f0a, 0x06140106, 0x09730601, 0x18730f21, 0x1f101f00, 0x1c201f02, 0x0a06157c, 0x0f410744, 0x3f004101,
		0x333f3f33, 0x1001ed2f, 0x82cc5dd6, 0x8aed18ba, 0x30312609, 0x031e3313, 0x24b38217, 0x27032e23, 0x0dde4911, 0x1f54372d, 0x15363c41, 0x350f4b4b,
		0x49224842, 0x0f3706e3, 0x2108100a, 0x396b0216, 0x316f7375, 0x95fdc101, 0x8782782e, 0x4912fe3f, 0xae820aef, 0x00010033, 0x015bff47, 0x00da01b0,
		0xb6520013, 0x100f100c, 0x05dc5700, 0x1839d718, 0x0011173c, 0x077f084d, 0x007f1215, 0x13080113, 0x084a1314, 0x03880e4b, 0xed3f0050, 0xf3433f3f,
		0x54102005, 0x132a0818, 0x32333636, 0x23111516, 0xf0553411, 0x23112505, 0x27592d47, 0x1133d718, 0xaa014b2e, 0x0c1f382d, 0x74fe0405, 0x1d000300,
		0x3506634d, 0x001a0013, 0xb6cd0021, 0x0e0d1821, 0xb81c4c00, 0x0eb3f0ff, 0x07824d00, 0x0db3e026, 0xb81a4d00, 0x8205944a, 0x40e02207, 0x21108219,
		0x1d821815, 0x82201521, 0x18112109, 0x112ac883, 0x4d000810, 0xe0ffb80d, 0x078410b3, 0x0fb3e822, 0x40210785, 0x2218820e, 0x820d100c, 0x180483c9,
		0x220b5aee, 0x823540f0, 0x2003211b, 0x03253182, 0x4d000f18, 0x3f438303, 0x0a76171f, 0x76181e23, 0x100b4000, 0x18220048, 0x1f1e0f79, 0x031e4f1e,
		0x14051e1e, 0x1b460f7c, 0x2b069666, 0x2f3911ed, 0x1001ed5d, 0x32ed2bd6, 0x4712fe68, 0x9c6605bd, 0x2223320b, 0x3217022e, 0x16213736, 0x06221316,
		0x26262107, 0x7aee181d, 0x42db330f, 0xeefe0544, 0x40414105, 0x12010542, 0x36014505, 0xee187a53, 0x20080c81, 0x6c6c72a9, 0x70f80172, 0x00706a6a,
		0x00020000, 0x01f3ff1d, 0x00cb02ee, 0x002c0020, 0x2b00b9c8, 0x06e269ff, 0x0e102930, 0x18294d00, 0x254d000d, 0x000e0d10, 0x4d41234c, 0x22078206,
		0x821340e8, 0x281e2116, 0x1e20f382, 0x1e20f383, 0x5718f383, 0xe0210ab8, 0xb85718b3, 0x00082307, 0x3783134d, 0x07822982, 0x1783e820, 0x0f821220,
		0x82354021, 0x18083010, 0x084d0012, 0x4d001110, 0x100f1003, 0x83034c00, 0x110a2845, 0x07147627, 0x41212e17, 0x2d34063b, 0x461c7c24, 0x2a070714,
		0x45050d7c, 0xedce3f00, 0x3f331133, 0x25053241, 0x3232de10, 0x6b18dced, 0x344115e3, 0x36172b05, 0x26343536, 0x14163327, 0x49181415, 0x2e2109ba,
		0xd8ed1802, 0x35503210, 0x01010a14, 0x22240152, 0x3a211917, 0x51323152, 0xc3ef183a, 0x17313b0f, 0x14091d2d, 0x05110a05, 0x27204c2b, 0x7a53486f,
		0x50262650, 0x827a537a, 0x03827a82, 0x00820020, 0x28000232, 0xdc01f5ff, 0x1f003102, 0x98002b00, 0x202a0c40, 0x2a29d783, 0x4d000e10, 0xe0ffb828,
		0x820d83b4, 0xb3f02108, 0x24201082, 0x82066642, 0xb3e82407, 0x824d000f, 0x40f02207, 0x2618821d, 0x00102822, 0x8220224d, 0x83222012, 0x180c2538,
		0x084d0008, 0x02250483, 0x40f0ffb8, 0x080d821f, 0x201b1422, 0x00111e82, 0x0a82262d, 0x480c0940, 0x88232c0a, 0x0f11171e, 0x05882950, 0xed3f0051,
		0x33ce333f, 0x261b2141, 0x020e1425, 0x6b2e2223, 0x2341064a, 0x3407240e, 0x4b222326, 0x0120063b, 0x0cc8d918, 0x36482f08, 0x01010710, 0x1e1c014f,
		0x3a44552a, 0x39434339, 0x37e8443a, 0x23234059, 0x37375940, 0x2a233f5a, 0x081d2b16, 0x100b0515, 0x1f462a05, 0xd9185c3e, 0x002308da, 0x432d0002,
		0x2030069f, 0xae003400, 0xff3200b9, 0x110e40e8, 0x182e4d00, 0x28200482, 0xfd820483, 0x1e271285, 0x4d001320, 0x8212301e, 0xffb82c04, 0x0011b3e8,
		0xffb81a4d, 0x8413b3e0, 0x40d82207, 0x20188209, 0x2930831a, 0xf0ffb819, 0x000a09b4, 0x08820b4c, 0x0d0a402b, 0x28034d00, 0x4c001312, 0x082d8203,
		0x11254030, 0x762b4d00, 0x40170714, 0x17480c09, 0x360c730f, 0x35007621, 0x461c7c26, 0x1214440e, 0x3045097c, 0x4505077c, 0xed333f00, 0x3f32ed3f,
		0xf845ed3f, 0xdefd2405, 0x5832322b, 0x2b200fa1, 0x44074942, 0x26220796, 0x4c182223, 0x2e220804, 0x594b3702, 0x342a0807, 0x2223022e, 0x132d020e,
		0x30223525, 0x37302621, 0x1f144e3e, 0x100f1314, 0x22372614, 0x13243523, 0x1910084e, 0x11191111, 0x04820808, 0x19114e08, 0x36010810, 0x244e7b56,
		0x5f522122, 0xb70139fe, 0x27164438, 0x7a574e72, 0x4e24244e, 0x5d37577a, 0x44262644, 0x5e39375d, 0x42242442, 0x0000005e, 0xff1b0002, 0x01bf015b,
		0x002600db, 0x40a80032, 0x0918250c, 0x18244d00, 0x4c001211, 0x21f38220, 0xc54d12b3, 0x82b32005, 0xb81f27fa, 0x0bb3f0ff, 0x07824d00, 0x09b4e82e,
		0x0e4c000a, 0xb3d0ffb8, 0x0d4d0009, 0xb4242882, 0x4c00100b, 0xd8220882, 0x10840ab3, 0x3640c027, 0x034d0008, 0x26488310, 0x0b0a1803, 0x83024c00,
		0x2d230859, 0x0f081a82, 0x021d1f1d, 0x107f131d, 0x00822734, 0x22882a33, 0x1a4b1251, 0x0b088818, 0x05883050, 0x663f0050, 0x3e41050d, 0x415d2009,
		0x3720113e, 0x2506a949, 0x32333636, 0xd745021e, 0x0c414108, 0x0806a64d, 0x06222344, 0x3126181b, 0x112a151a, 0x271a2c0e, 0x4f08192f, 0x0f140a04,
		0x0b0b1114, 0x1a312718, 0x1827321a, 0x22211b4e, 0x21221a1a, 0x5e47e81b, 0x110f1737, 0x341b140b, 0x49fe2f4a, 0x3729a501, 0x1b140f22, 0x1783304a,
		0x5d38173f, 0x59595447, 0x58585554, 0x00020000, 0x01000012, 0x007102d5, 0x00230019, 0x0600b97c, 0x25f984ff, 0xe0ffb806, 0xf88209b3, 0x20063b41,
		0x066d4203, 0xffb80228, 0x1211b4d8, 0x08824c00, 0x0ab3e024, 0x07824d00, 0x2440e822, 0x2e082982, 0x25057622, 0x00731d09, 0x200c100c, 0x0c08030c,
		0x0924150f, 0x001e1e79, 0x1212440b, 0x007c1a0c, 0xed3f0041, 0x3f2f3232, 0xed2f3912, 0x5fd61001, 0x785008f4, 0x05165808, 0x23230624, 0xec5f2315,
		0x172e080c, 0x15070622, 0x35363233, 0x301e0134, 0x5b152d45, 0x26522e5b, 0x02430421, 0x604c3005, 0x0822123f, 0x0232342a, 0x46331c71, 0xe769612b,
		0xbb5f2202, 0x3a342a08, 0x0147051b, 0x453cfa02, 0x35e7837c, 0x015bff47, 0x00b502cc, 0x00300021, 0x2e104097, 0x4d000e10, 0x04832024, 0x420d1821,
		0xef83050b, 0xffb81f2b, 0x080940f0, 0x100e4d00, 0x22fd840f, 0x8410b3f0, 0xb3e02107, 0xf4850f87, 0x1783e020, 0x3583fc83, 0xe03f0782, 0x00082040,
		0x0082224d, 0x131b2932, 0x0a007f08, 0x310a0801, 0x501d8825, 0x4d108917, 0x442c4b0a, 0x3f22067b, 0x16593fed, 0xccfd2205, 0x0e2a6233, 0x182b2b21,
		0x4b0ba692, 0x15230dc2, 0x18323336, 0x5c0745de, 0x012907f6, 0x4a331bcc, 0x0e38252f, 0x0ccc4b53, 0x2e2e2e2b, 0x5520394f, 0x2c1d3d4c, 0x0673570b,
		0x5935e729, 0x0b122440, 0x4bb302b7, 0x25080ad5, 0x3f221255, 0x5951385a, 0xe0fe030c, 0x2d1a160d, 0x0002003d, 0x019fff37, 0x00b502eb, 0x002a001b,
		0x1b00b976, 0xe583d8ff, 0xffb81b24, 0xdc82b3e0, 0xf020e582, 0xc022f586, 0x10823040, 0x09033d08, 0x0878090e, 0x03081403, 0x76260808, 0x0e0e2c00,
		0x73131720, 0x14101400, 0x0e2b1402, 0x20791203, 0x7c1c1420, 0x14411916, 0x00090844, 0x3f3f332f, 0x3912edce, 0x3232ed2f, 0x5dd61001, 0x32250682,
		0xedde102f, 0x077a7233, 0x822b0121, 0x14012200, 0x077b4d06, 0x23220627, 0x11231523, 0x21fc8333, 0x05422716, 0x05cd6005, 0xaf014a08, 0x2e15333c,
		0x5d112a2d, 0x2b2a260f, 0x04150615, 0x25535346, 0xda71701f, 0x35092b17, 0x16293924, 0x01312416, 0x175839ae, 0x605e5825, 0x595c2b2c, 0xf4012353,
		0x0347b502, 0x02011b62, 0x2f1b0aef, 0x1b2e2426, 0x0000000b, 0x32f38201, 0x02be01f3, 0x01310079, 0x3100b90f, 0x12b3e8ff, 0x83314d00, 0x001123f1,
		0x07832d4d, 0x4d000f24, 0x1782b82c, 0x4d000e23, 0x200f832b, 0x2d07840a, 0x0009b3d8, 0xffb8284d, 0x0008b3f0, 0x2786274d, 0xd8280782, 0x4d000ab3,
		0xc8ffb824, 0xe0200786, 0x0f822783, 0x3d40d82b, 0x1e4d0008, 0x00121118, 0x0519484c, 0x3f612020, 0x28182107, 0x18217282, 0x266f8220, 0x000e1813,
		0x82200f4d, 0x100e2728, 0x0b4d000d, 0x04820a18, 0x09082829, 0xb8064c00, 0x82b3d8ff, 0x2107821c, 0x1a82b3e8, 0x91830520, 0x4d001022, 0x21080782,
		0x0f2040e0, 0x76164d00, 0x25040425, 0x0c762f33, 0x320c1d1d, 0x1c1c092a, 0x22117c19, 0x00030345, 0xb555097c, 0xed392406, 0x4c112f32, 0xed2006a0,
		0x49124f61, 0x0589054f, 0xb4552520, 0x35262907, 0x37023e34, 0x3435033e, 0x0809885e, 0x14151675, 0x0e07020e, 0x16141503, 0x4e380b01, 0x22091914,
		0x66213a2d, 0x3f2e196e, 0x212c1a26, 0x2b2d4213, 0x0a1a1446, 0x1a302a21, 0x2b19665b, 0x321a1e37, 0x3a421828, 0x06440b1d, 0x57090e0e, 0x2c3c2b51,
		0x160b1020, 0x2d1a241b, 0x450c182d, 0x070a0e07, 0x3625515b, 0x0a0c1e28, 0x1d291f17, 0x00003030, 0xff410001, 0x01b101f5, 0x002700db, 0x2600b9f6,
		0x82b3e8ff, 0xb82624f1, 0x82b3f0ff, 0x442520f0, 0x078206a1, 0x08b3d82a, 0xb8234d00, 0x0cb3d8ff, 0xe8250784, 0x4d000ab3, 0x241f8322, 0x204d000d,
		0x823782b8, 0x21078217, 0x4b58b3e0, 0x821f8306, 0x40d8260f, 0x0009082b, 0x07dc4a4c, 0x4d000e24, 0x3182200e, 0x0c280e22, 0x18200982, 0x0b2f4382,
		0x000c0b18, 0x08200b4c, 0x074c000a, 0x41c8ffb8, 0x285f0681, 0x82062005, 0x0fb42470, 0x824c0010, 0xe0250808, 0x000e2340, 0x2182134d, 0x29210606,
		0x82001b1b, 0x08010c00, 0x0925280c, 0x88151a1a, 0x05501e10, 0x09880205, 0x05195a51, 0x25078641, 0xed5d5ed6, 0x87412f33, 0x1437211d, 0x2408025f,
		0x3e343526, 0x3fb91804, 0x1570080c, 0x94040e14, 0x234d2b72, 0x30502410, 0x3e29626a, 0x6c293e48, 0x1c242814, 0x511d0f08, 0x295b6027, 0x293d483d,
		0x10153974, 0x4510104b, 0x2433273f, 0x151d1819, 0x0907043b, 0x0b094a04, 0x3228384b, 0x20181722, 0xffff0000, 0x00002800, 0x6b02bf01, 0xa2030602,
		0x02000000, 0x5bff2b00, 0xb502b901, 0x2c001f00, 0x00b98c00, 0xb3e0ff1e, 0x1e4d000a, 0x082bf083, 0x1d4c0009, 0xb3e8ffb8, 0x824d000d, 0x40e02807,
		0x000c0b48, 0x82101a4c, 0x201a320e, 0x1a4d000c, 0x4d000b18, 0x0a082019, 0x20154c00, 0x2b1a820a, 0x00092815, 0x0820154d, 0x18144d00, 0x21082482,
		0x01170026, 0x060f1708, 0x0f207f00, 0x102d2e0f, 0x23292c12, 0x88054d1c, 0x3f004b0a, 0xdedd3fed, 0x2950cd32, 0xfd332605, 0x5edc10ce, 0x0ebe4a5d,
		0x1e14252f, 0x15333302, 0x22232206, 0x1135022e, 0x09a74906, 0x27151622, 0x080a9a49, 0x34013758, 0x1422190f, 0x05180827, 0x122a4432, 0x2c1e261e,
		0x1d0c0d1c, 0x3e4b2631, 0x1d1e1f52, 0x14201a1d, 0x21160d1c, 0x470b1b2c, 0x49321a01, 0x12b80130, 0x152b2115, 0x19262a10, 0x23184c56, 0x14142527,
		0x000e0f27, 0x00010000, 0x0159ff3f, 0x006002c7, 0xb9940032, 0x1f442100, 0xb8212105, 0x8206ad4a, 0xb3d82408, 0x844d000e, 0x0d0c2310, 0x08824c00,
		0x4040d827, 0x034d000b, 0x22ec8210, 0x820c1803, 0x82202009, 0x2e2a080e, 0x0e0e1f82, 0x0f0c341f, 0x0006097f, 0x07080107, 0x01273033, 0x2701270f,
		0x892b2f27, 0x4a1b4b24, 0x060f0b0a, 0x49090c85, 0x38511519, 0x333f3506, 0x32cd32ed, 0x01ed3f3f, 0x5d2f332f, 0x5ed6105d, 0xed32dd5d, 0x4905fc51,
		0x45510a85, 0x15372109, 0x25084351, 0x1e37023e, 0xd54e1503, 0x3454080d, 0x01062734, 0x243f3142, 0x5262620d, 0x170abbbb, 0x24131a24, 0x0104161e,
		0x09010202, 0x0d27311a, 0x05070a1f, 0x17230719, 0x17061801, 0xd82f452e, 0x900e8245, 0x2c23d845, 0x03030a1b, 0x13060104, 0x27071515, 0x05172c3d,
		0x03023d02, 0x0604282d, 0x00000306, 0x3c068774, 0x006b02cd, 0x40280014, 0x05730213, 0x16010f05, 0x0c150f09, 0x7905020c, 0x44044114, 0x67c28200,
		0xcd2505e8, 0x3911ce10, 0x23bb822f, 0x11231501, 0x22200182, 0x080bd167, 0x98cd0121, 0x27224252, 0x05024304, 0x213e301d, 0xfd466b02, 0x252502db,
		0x08111020, 0x280d1906, 0x820c1f35, 0x653f206b, 0x3008068f, 0xb95a0027, 0xe8ff2500, 0x12113240, 0x201b4c00, 0x134d000c, 0x000c0b18, 0x0d20204c,
		0x0029020d, 0x16197f03, 0x08011700, 0x21212817, 0x4d1d8824, 0x9de11803, 0xed3f2413, 0x41012f32, 0xc05a0b56, 0x41132006, 0x36230846, 0x42061737,
		0x35250562, 0x35333523, 0x0a205434, 0x41f31521, 0x24380542, 0x0e0c142c, 0x4234303a, 0x62620e25, 0x392a6755, 0x2d0c0f0c, 0x012f4121, 0x11b6e118,
		0x62592a32, 0x0548050a, 0x00333d0b, 0x00010000, 0x0159ff27, 0x3a053741, 0x1315402a, 0x10730007, 0x08010e00, 0x15160e0e, 0x11790f14, 0x097c0341,
		0x82ed2f00, 0x063753a3, 0xccfdce26, 0x053031ce, 0x0807da55, 0x2e222329, 0x23113502, 0x23152135, 0x20172301, 0x08091108, 0x32271c16, 0x01aa0b1d,
		0x290faaa6, 0x4202012b, 0x3e2b1705, 0x55250227, 0x30200757, 0x2306c74e, 0xb96d0028, 0xc8267c82, 0x4d0008b3, 0xd943b826, 0x28078205, 0x090e40e8,
		0x100f4d00, 0x2f048212, 0x4d001118, 0xf0ffb80b, 0x12112740, 0x20034c00, 0x07116118, 0x0828023f, 0x1e174d00, 0x2a247312, 0x29057308, 0x13131a23,
		0x7c0d4106, 0x3f004600, 0x10333fed, 0x06f562ce, 0x200d744e, 0x21a98417, 0x63571133, 0x4e322009, 0x37080975, 0x1107020e, 0xdf020e14, 0x11294332,
		0x23170b52, 0x17231818, 0x140d400b, 0x01520101, 0x1b251709, 0x0d432911, 0x3150391f, 0x6afe9f01, 0x10243b2c, 0x2c3b2410, 0x1f1f9601, 0x2b05694e,
		0x19222914, 0x319dfe04, 0x001f3950, 0x012f0082, 0xf6ff4400, 0x3102dc01, 0x4e002200, 0x430d00b9, 0x0d2005ab, 0x4021e382, 0x08d18226, 0x0a180622,
		0x20064d00, 0x4c000908, 0x7f121d16, 0x7f0b2422, 0x08010800, 0x19222308, 0x49091212, 0x5103880e, 0x5e26c78a, 0xde10ed5d, 0x7f44dded, 0x42252006,
		0x11210607, 0x05365933, 0x33113722, 0x0131c58d, 0x334f177e, 0x10253e2e, 0x14302752, 0x17390526, 0x24c2840f, 0x0d1b2515, 0x20e31807, 0x02072509,
		0x1f208801, 0x3505044e, 0x18222915, 0x00010004, 0x01f2ff12, 0x006b02e2, 0xb593002b, 0x55451821, 0x40e82205, 0x2a08820e, 0x000e180b, 0x08100b4d,
		0x48074d00, 0x0782067f, 0x82b3f021, 0xb8013b0f, 0x3b40f0ff, 0x014d0010, 0x29af297f, 0x290329bf, 0x04762429, 0x2d040000, 0x15821811, 0x1500113e,
		0x15701510, 0x15b015a0, 0x1a151505, 0x12120e76, 0x15292c0e, 0x79110115, 0x1f41142a, 0x22051048, 0x77ed333f, 0x5d220cf4, 0x8b462b33, 0x2f322105,
		0x954b0a82, 0x23012107, 0x250d445a, 0x15333523, 0xde53030e, 0x058b4905, 0x35274a08, 0x6de20133, 0x371b2e30, 0x52363652, 0x2f2f1b37, 0x2618c56b,
		0x21100e19, 0x33232333, 0x190e1021, 0x02c71826, 0x4a953d25, 0x2e4c6538, 0x38654c2e, 0x463d954a, 0x4d441a3c, 0x4c2a2852, 0x39222239, 0x52282a4c,
		0x3c1a444d, 0x08a75400, 0x6e02c92a, 0x76002100, 0x0f1020b5, 0x09070619, 0xffb81f25, 0x821940e8, 0x381521fd, 0x15351582, 0x4d000e10, 0x12110811,
		0x10104c00, 0x0d4d000d, 0xb3e0ffb8, 0x25078412, 0x0011b3e8, 0x2d83034d, 0x000e183b, 0x0b1a1a4d, 0x23007613, 0x2208730b, 0x411d7c16, 0x7c0e4109,
		0x3f004605, 0x08d74eed, 0x3911ed23, 0x4aee872f, 0x0e250581, 0x26222302, 0x06d05435, 0xf648e583, 0x36810805, 0x1e323336, 0x22c90102, 0x5b2f513b,
		0x3f2e5264, 0x1625331d, 0x0f0c4839, 0x21050206, 0x2d4b370d, 0x5a3e0114, 0x69244f7e, 0xfe94017b, 0x18555c80, 0x774a623a, 0x45010179, 0x512e0102,
		0x0100006f, 0x00000d00, 0x74021602, 0x59001b00, 0x050a3140, 0x78050b0a, 0x04140104, 0x0a0b0104, 0x191a780a, 0x1a191a14, 0x01010073, 0x13010108,
		0x13191c04, 0x7c160b19, 0x0a1a4510, 0x04050101, 0x00440041, 0x05205c3f, 0x32ed3f28, 0x332f0132, 0xb882c610, 0xfd5d5e2b, 0x107d2b87, 0x101887c4,
		0x055c7a2b, 0x5b353321, 0x372206e7, 0x2b67033e, 0x23360805, 0x03070622, 0x663bd215, 0x210a5c24, 0x5a142927, 0x1d1a170b, 0x122d1b11, 0x0d181a25,
		0xe6680e18, 0x2363bf63, 0x2451524e, 0x16261ddf, 0x39131809, 0xfe23191b, 0xaf82eafb, 0xff135608, 0x01e80158, 0x002900dc, 0x4a404072, 0x15390115,
		0x1e191501, 0x15188119, 0x15181814, 0x06010667, 0x81211e21, 0x03140603, 0x181e0603, 0x01030f03, 0x2b270308, 0x2a180e0e, 0x00030321, 0x1e502488,
		0x0b151506, 0x12491819, 0x004b0b88, 0x333fed3f, 0x33113912, 0x21c08233, 0x2857322f, 0x5e322506, 0x3912115d, 0x21058b59, 0x2b575d01, 0x5d5d2407,
		0x82013031, 0x060625b6, 0x23030e07, 0x2008795f, 0x23da8637, 0x36373636, 0x08068c45, 0x16b5014d, 0x35190615, 0x2c241121, 0x2d132336, 0x1f0a0f08,
		0x14332c0f, 0x5a1e5b35, 0x251f1809, 0x12201614, 0x11332f0b, 0x0c0e111f, 0x1b1b9601, 0x2850b46a, 0x0a12263a, 0x06054304, 0xf06b312b, 0x625d287b,
		0x86462e63, 0x0737324f, 0x82084106, 0x364108f3, 0xc7010000, 0x19006b02, 0x36406e00, 0x15000a0a, 0x0d0e1013, 0x03010d16, 0x00090806, 0x160d1609,
		0x14090078, 0x04090000, 0x171b0004, 0x0d111117, 0x7916001a, 0x79100619, 0x19131303, 0x79090d41, 0x0e175b0c, 0x32c61029, 0x102f322f, 0x852f32ce,
		0x0e8728e5, 0xc4c405c4, 0x8710c40e, 0x06195808, 0xec820120, 0x23153322, 0x22091b7c, 0x82333523, 0x212f08e8, 0xbf012135, 0x7724451b, 0x1a41249f,
		0x6ffe3301, 0x6123431d, 0x1e412188, 0x7a01e5fe, 0x68272b02, 0x713b4039, 0x39364631, 0x36403b79, 0x82462b61, 0x490021be, 0xab220482, 0xc382d001,
		0x37406c22, 0xc285c385, 0x8120c185, 0x0023c18d, 0x8308010d, 0x828520c5, 0x37c483c5, 0x85090d49, 0x3f004a0c, 0x393f32ed, 0x32cd332f, 0x0132ed10,
		0x5d5ec610, 0xc385c68e, 0xc190ca84, 0x21153323, 0x85bb8235, 0x822320c1, 0xa42908c1, 0x62203812, 0x14331b8e, 0x139efeff, 0x784d1e36, 0xe413311b,
		0x92014e01, 0x3b2a4214, 0x46224a25, 0x2a532337, 0x173f233b, 0x34ba8245, 0xf3ff1800, 0x6b02cf01, 0xba002500, 0x20231140, 0x204d0010, 0x27048218,
		0x0e0d1819, 0xb8134c00, 0x8205d845, 0xb3d82407, 0x844d0011, 0x00082807, 0xffb8104d, 0x8412b3c8, 0x83e82007, 0x820f8417, 0x830f2017, 0x05315e2f,
		0x3940d023, 0x2d4b8209, 0x050f010e, 0x052f051f, 0x0e050803, 0xbc5f0e09, 0x09200806, 0x11762209, 0x1b000027, 0x0106101b, 0x7c242606, 0x080e0e00,
		0x7c1f1c1c, 0x05094616, 0x00410879, 0x2706755d, 0x332f3911, 0xc61001ed, 0x21050e41, 0x4318edde, 0x5e22081a, 0x46445d5d, 0x132b2a0b, 0x2137033e,
		0x0e152135, 0x0ace5103, 0xd26b2720, 0x23430807, 0x3116a623, 0xfe0e292f, 0x0e8c01e2, 0x1935312a, 0x3e1e685d, 0x3c23405e, 0x1a0a2430, 0x51385614,
		0x0111c658, 0x3737165d, 0x31461232, 0x3b393414, 0x505e071b, 0x1b324529, 0x050f0e0a, 0x401e0b44, 0x82007639, 0x00013200, 0x01f3ff43, 0x006b02ce,
		0xb9d1002c, 0xf0ff2900, 0x2aea82b3, 0xe0ffb829, 0x00093140, 0x82201c4d, 0x281c210d, 0x1b270982, 0x4d001208, 0x8211101b, 0x08282404, 0x83174d00,
		0x10172209, 0x2009820a, 0x261d8218, 0x00082017, 0x51b8104d, 0x088206db, 0x10b3e028, 0xb80f4d00, 0x0783f8ff, 0x4e820820, 0x04200783, 0x2e080789,
		0x0d2f40f0, 0x274c000f, 0x781e231e, 0x2c14272c, 0x0f2c2c27, 0x232e260f, 0x00760623, 0x19080119, 0x7927232d, 0x7c012c24, 0x41241e1e, 0x6b090e0e,
		0x392808f9, 0x1033ed2f, 0x100132ed, 0x2009fd4c, 0x0cff4f32, 0x290c844e, 0x0e222301, 0x16141502, 0x7b753233, 0x22232505, 0x3435022e, 0x367f0b82,
		0x17720808, 0x22115201, 0x511c303e, 0x252b1542, 0x091a091e, 0x1b352c22, 0x213c5433, 0x223f301d, 0x242c2e16, 0xff69010c, 0x2a240c00, 0x2901132b,
		0x242f1d0b, 0x0a06373d, 0x0544050c, 0x16070b0d, 0x2d30462d, 0x05192c40, 0x33383a1b, 0x12463414, 0x16373732, 0x01000000, 0x5bff3f00, 0xd001c201,
		0xaf002800, 0xff2500b9, 0x093c40e0, 0x20184d00, 0x174d000a, 0x04821210, 0x82111821, 0x10102104, 0x28200482, 0x27073c41, 0x12111013, 0x18134c00,
		0x13211482, 0x25148218, 0x00082013, 0x0e83124d, 0xffb8082d, 0x000fb3e8, 0xffb8044d, 0x822e40f0, 0x23300808, 0x811a1f1a, 0x28142328, 0x0d282823,
		0x1f2a220d, 0x0082061f, 0x15080115, 0x85231f29, 0x89012820, 0x49201a1a, 0x89090c0c, 0x3f004b10, 0x3f2f32ed, 0x202a3441, 0x08314125, 0x4109bc4a,
		0x4a080930, 0x17031e23, 0x220f5401, 0x511f3342, 0x14492b48, 0x31531612, 0x213d5635, 0x2642321d, 0x262c2f16, 0xf45b010c, 0x2c2a250b, 0x19098e14,
		0x433a232c, 0x0b440a10, 0x49301810, 0x293d2c30, 0x3a190517, 0x3014353a, 0x36321245, 0x82001637, 0x00012f00, 0x0157ff31, 0x00d001a7, 0xb994002c,
		0x82691e00, 0x1e3f0806, 0xb3d0ffb8, 0x194d000d, 0x40d8ffb8, 0x000b0a4c, 0x12280c4c, 0x380c4d00, 0x084d0011, 0x4d001020, 0x0d0c2002, 0x17044c00,
		0x15171101, 0x110e8117, 0x110e0e14, 0x820a1515, 0x0e0e2e1c, 0x82822612, 0x12250859, 0x2d120801, 0x0e2a1121, 0x2a06860d, 0x2a141717, 0x8511154b,
		0x3f004914, 0x123f32ed, 0x39122f39, 0x121133ed, 0x06944439, 0x3311ed22, 0x5d064652, 0x85430567, 0x50172009, 0x272008b6, 0x25058d44, 0x07061521,
		0xb950031e, 0x17520809, 0x31262607, 0x192d2314, 0x1b2e3b20, 0x4a2e604e, 0x5901f416, 0x402b6139, 0x3a21152a, 0x1f0c2d4d, 0x0206121b, 0x660b0541,
		0x0e18261d, 0x150d0806, 0x2b281d22, 0x4a283802, 0x4a33451a, 0x22150656, 0x352b2332, 0x030a1423, 0x11150e07, 0x0e05140e, 0xbd821f0b, 0x00012508,
		0x01000039, 0x007902bd, 0x40c20028, 0x0e102616, 0x10264d00, 0x254d0008, 0x4d000918, 0x0908181d, 0xb8174c00, 0x82055152, 0xb3f02107, 0x2c065070,
		0x4d000cb3, 0xe0ffb814, 0x000b0ab4, 0x2108824c, 0x2e82b3c8, 0xd8220782, 0x3c820a40, 0x09180f23, 0x05c2760a, 0x11374027, 0x064c0012, 0x08058320,
		0x151b182a, 0x2227011f, 0x20157604, 0x15191920, 0x22761f2a, 0x0d0d2828, 0x08012200, 0x271b2922, 0x12010118, 0x4422791f, 0x7c070c0c, 0x21086e70,
		0xb1763911, 0x07d24505, 0xbd67ed20, 0xed102405, 0x18393911, 0x2512dcab, 0x36363313, 0xf6683435, 0x1516280a, 0x33070614, 0x46072315, 0x5d0805aa,
		0x37023e26, 0x20a95d23, 0x1e2a3c2b, 0x0617212d, 0x2b210d29, 0x5e5c2237, 0x894d1d1d, 0x02352632, 0x89fe1d01, 0x31241204, 0x4201671b, 0x36284020,
		0x13140e30, 0x1a0d3b06, 0x53560d15, 0x40234526, 0x1d452634, 0x3f472946, 0x00001b38, 0x28000100, 0xba01f3ff, 0x25006b02, 0x18409a00, 0xe4831817,
		0x0d281726, 0x0b4c000e, 0x0a21f084, 0x05946b40, 0x0fb3f029, 0xb8054d00, 0x53b3d8ff, 0x0f860605, 0xa954e020, 0x54e82006, 0xe02006a9, 0x02201783,
		0x23082782, 0x00082340, 0x1420204d, 0x21270376, 0x191c7600, 0x1d0b0b19, 0x791c2126, 0x007c191e, 0x0c411e00, 0x087c0f0c, 0x23072853, 0xed10ed2f,
		0x2305a048, 0xed332f32, 0x45059a76, 0x154b0ddb, 0x45262007, 0x0a4b05d0, 0x234b0805, 0x23373636, 0x23152135, 0x80ba030e, 0x513d2580, 0x2350272b,
		0x2546190f, 0x1929351c, 0x45603c1c, 0x57040907, 0x01d97901, 0x01040404, 0x5c6d037c, 0x162e4732, 0x0e461010, 0x2b1b0c11, 0x2435221f, 0x396f4413,
		0x2e0c4646, 0x82002f32, 0x00013400, 0x01f5ff3a, 0x00d001b4, 0xb99f0023, 0xe8ff2200, 0x520013b3, 0x0c2005d7, 0xe8220784, 0x07840bb3, 0x09b4e02b,
		0x224c000a, 0x40e8ffb8, 0x2de4820e, 0x00125013, 0x1128134d, 0xb8014d00, 0x3383e0ff, 0xf0200782, 0x0f842b83, 0x17840a20, 0x40e82208, 0x00090824,
		0x111c1c4c, 0x1d250082, 0x1518821e, 0x19080815, 0x1e891424, 0x181d0e1e, 0x09491a86, 0x06114d09, 0x3f2f3224, 0x186b32ed, 0x16104108, 0x06142526,
		0x022e2223, 0x0896b418, 0x41232621, 0x5108080c, 0x1e323307, 0x68b40102, 0x2c331964, 0x050f0620, 0x172e271c, 0x675b4239, 0x0209062d, 0xd6670149,
		0x5230130a, 0x438c223c, 0x08090654, 0x08034603, 0x2b260609, 0x4f33262f, 0x6d42422b, 0x00392410, 0x3e000100, 0xce01f5ff, 0x24006002, 0x2040d000,
		0xde82281a, 0x0c181a2d, 0x20114d00, 0x4c001211, 0x83102811, 0x820f200a, 0x0e282904, 0xb80c4d00, 0x0cb3f0ff, 0xe8200784, 0x0f82f383, 0x82b3e021,
		0x220782f3, 0x8409b3c8, 0xb3d82a17, 0x094d0008, 0xb3d0ffb8, 0x22078412, 0x8411b3e0, 0xb3d02807, 0x084d000d, 0x83b0ffb8, 0x2007820f, 0x083783e8,
		0xffb8072c, 0x112840f8, 0x03004d00, 0x1f1f227f, 0x0b821720, 0x260b0202, 0x20001111, 0x25200801, 0x034d2423, 0x2200851f, 0x15121249, 0xe2530e88,
		0xed332406, 0x44333f32, 0x544d069e, 0x39112205, 0x4214822f, 0xe9460c43, 0x50132005, 0xf218056d, 0x35230cbb, 0x63042e34, 0x37320519, 0x21bcbcf2,
		0x21303a30, 0x50306a62, 0x4d231024, 0x0e85732b, 0x52622008, 0x1f45d001, 0x12192925, 0x3f2b311e, 0x4b101045, 0x1b391510, 0x2414141e, 0x4521343d,
		0x82000e82, 0x00023d00, 0x015bff47, 0x00da01ce, 0x0019000b, 0x1900b968, 0x4540e8ff, 0x4c000908, 0x1211200a, 0x28260582, 0x0a4d000f, 0x04820e10,
		0x000d0826, 0x0a10094d, 0x1984fd82, 0x10280227, 0x18024d00, 0x24f4820f, 0x071b0c82, 0x059a6011, 0x88031a2f, 0x88075017, 0x4b131111, 0x2f333f00,
		0x06c958ed, 0x080fa476, 0x26340144, 0x07062223, 0x37033e11, 0x07020e14, 0x36112315, 0x16323336, 0x3f457901, 0x270d2826, 0x55284050, 0x3f705431,
		0x3b571d53, 0x0c017365, 0x050a473e, 0x240f9cfe, 0x47364d36, 0x14334965, 0x0b5b0273, 0xbe826f19, 0x00ffff23, 0x2cbf82d4, 0x02bb0221, 0x005f0006,
		0x00ffff00, 0x200f8279, 0x290f827c, 0xa55f0036, 0x00060000, 0x27825b5f, 0x00010023, 0x08178223, 0xbb02d042, 0x53001300, 0x0d112c40, 0x0608040c,
		0x137f0902, 0x010c000f, 0x14150c0c, 0x13861005, 0x0c091302, 0x0f060f86, 0x131f130f, 0x0f130802, 0x4b0b0f13, 0x3f005300, 0x2f39393f, 0x115d5e2f,
		0x32ed1033, 0x01340484, 0x2f391211, 0xfd33335d, 0x32cd3232, 0x3132cd10, 0x11331330, 0x2105c566, 0x88181123, 0x3323072a, 0x82b04dd3, 0x2a048400,
		0xcafebb02, 0xfe426942, 0x823d01c3, 0x2aa78406, 0x01f4ffb5, 0x026b023b, 0x82040006, 0x044708a0, 0xfbff1b00, 0x3103f301, 0x17000500, 0x34002800,
		0x42408100, 0x341d762e, 0x04264073, 0x05020504, 0x05600000, 0x15150605, 0x0f140b0f, 0x0b067e14, 0x0b060614, 0x060c0f0f, 0x7c2c0c06, 0x7c314222,
		0x14064118, 0x82401679, 0x01032a4b, 0x16050280, 0x790b0f41, 0x05654c0e, 0x1a32de24, 0xb88232cd, 0xbe821a20, 0x54ed3f21, 0x7964052c, 0x11013008,
		0x122f1833, 0x1a2f1939, 0x112f18cd, 0x82101933, 0x1a2f3006, 0x31eddced, 0x17370130, 0x17071737, 0x8207030e, 0x3e3528da, 0x35233703, 0x76322533,
		0x5b08095d, 0x13363611, 0x32333216, 0x23263435, 0x01072222, 0x56561d0d, 0x0d5f731d, 0x0c1f2220, 0x1c11c27a, 0x63131e1b, 0x2d8afeac, 0x0b12283f,
		0x11374224, 0x25171229, 0x0508050b, 0x042b2a53, 0x10030507, 0x214e4e21, 0x792c6c79, 0x46378584, 0x737a4936, 0x06464475, 0x4975522c, 0x3c5d6e33,
		0x6329f282, 0xd2fd0406, 0x787df301, 0x081f4101, 0x8902fd22, 0x2e081f41, 0x301540b0, 0x4d001020, 0x000f1830, 0x82282d4d, 0x202d2109, 0x21200982,
		0x8206b243, 0x5ed82007, 0xd82d06fa, 0x4d0012b3, 0xe8ffb81a, 0x00113f40, 0x0654414d, 0x01030525, 0x41000060, 0x84200750, 0x41065041, 0x853d0d4f,
		0x40010516, 0x03800204, 0x0f491600, 0x4c0e850b, 0x32ed3f00, 0x1acdde3f, 0xcd1a32dd, 0x0a4d4132, 0x4dcd1021, 0x4c4105b6, 0xcd33220a, 0x06464118,
		0x2805c343, 0x27012b2b, 0x17371737, 0x284e4107, 0x1e619d36, 0x1b1e4243, 0x1c1e1b09, 0x0aac680a, 0x0b1d1d1c, 0x87fea362, 0x35164e41, 0x24590c02,
		0xd3243636, 0x615a4c18, 0x2837462d, 0x1c545d5f, 0x4e41a145, 0x04003b17, 0xf5ff0500, 0xb502fd01, 0x13000500, 0x38002600, 0x20b69900, 0x000b0a18,
		0x2451104c, 0x21078206, 0xe453b3f0, 0x40e82505, 0x4d001243, 0x3a053141, 0x30363627, 0x3530352c, 0x142c2784, 0x302c2727, 0x2d27272d, 0x167f1326,
		0x411e7f0e, 0x353b072c, 0x30493785, 0x2f852c4e, 0x0949274c, 0x11502389, 0x14511989, 0x3f004d15, 0x82ed3f33, 0x41028401, 0x01280744, 0xeddced2f,
		0x2f332f32, 0x45144241, 0x3841050b, 0x77052005, 0x162507f2, 0x11373233, 0x19a91837, 0x4105200e, 0x01200c56, 0x3d053b41, 0x1c07bffe, 0x11160d0f,
		0x1c1c2909, 0x3a11480e, 0x23352427, 0x2c221511, 0x08211417, 0x58412f01, 0x063f410d, 0x110ded3b, 0x33432810, 0x02075661, 0x58fd0e6f, 0x41231008,
		0x5d463659, 0x0a121838, 0x0c5a412d, 0x00002908, 0x24000200, 0xd9010000, 0x0c006b02, 0x29001200, 0x05001540, 0x0d140873, 0x130f7312, 0x12411006,
		0x00440f79, 0x00440c7c, 0x333af484, 0xfdd61001, 0xfdde10cd, 0x253031ce, 0x35023e16, 0x14113311, 0x27232306, 0x09822315, 0x2425013e, 0x52031328,
		0x29165a44, 0x014552d8, 0x1f2e1f0f, 0x2ffeac01, 0x46464f4b, 0xdbfd6b02, 0x033a6b82, 0x59ff3600, 0x9702d801, 0x11000500, 0x34002100, 0x090f1b40,
		0x731c1509, 0x7582231f, 0x0c22022e, 0x19491d06, 0x034b1288, 0x02790541, 0x76827384, 0x87cdde21, 0x33cc2375, 0x7882cd2f, 0x47186c85, 0x03200a18,
		0x85083651, 0x28013890, 0x160152f2, 0x17222217, 0x8f212119, 0x0b0b220b, 0x2b0a1709, 0x85515225, 0xd9012e88, 0x211b1c20, 0x201c1b21, 0x05053afd,
		0xa89e1844, 0x03002309, 0x9f826300, 0x02a22108, 0x000b00b5, 0x00270017, 0x151c4036, 0x221b0f0f, 0x0b29257f, 0x28037f06, 0x49230c12, 0x4b18881f,
		0x0c514618, 0x853fed21, 0x10ce23a1, 0xa185fdde, 0x18261721, 0x18084b46, 0x8f0b439f, 0x43dd28a6, 0x0c055237, 0x83800f14, 0x211823a9, 0xa9828e21,
		0xa9830a20, 0x51522622, 0x0e534618, 0xb197e220, 0x830bbf41, 0x40393fb3, 0x0805001d, 0x12111619, 0x0c101714, 0x1611180f, 0x17411344, 0x440e4110,
		0x440b7c00, 0x246e4106, 0x333f2807, 0xcdd61001, 0x82dc3232, 0xde102703, 0x3031cedd, 0xcf413225, 0x15273908, 0x13331123, 0x11333527, 0x3d010323,
		0x0311221f, 0xdb564647, 0x0977423e, 0x45220382, 0xd7411e0f, 0xfb200807, 0xfe6b02fb, 0xfdfdb74c, 0x00b40195, 0xff240003, 0x02dc0159, 0x000b0097,
		0x0026001a, 0x6026b573, 0x22058a62, 0x823c40a0, 0x25410808, 0x841f201f, 0x26142526, 0x21202526, 0x240f0f24, 0x48130e40, 0x83091524, 0x73150303,
		0x1c262818, 0x1d011d50, 0x44252027, 0x1f264122, 0x06441d41, 0x4916008a, 0x4b0c8812, 0x3fed3f00, 0x3f3fedde, 0x82028233, 0xcd5d30b4, 0xedde1032,
		0x10ed2f32, 0x2f322bce, 0x4432cd10, 0x312505b4, 0x2b2b0030, 0x10144201, 0x36323322, 0x8b061342, 0x41a320d3, 0x8a2c0671, 0x0b0b220b, 0x272b1713,
		0xe3fe4847, 0x0221df86, 0x0c6b411f, 0x3335072a, 0x39fec801, 0xa201565a, 0x0020ed8b, 0xd820ef86, 0x3408ef82, 0x00210015, 0xb94d0031, 0xd8ff0600,
		0x10092940, 0x191f4c00, 0x25252c19, 0x08af7f0b, 0x080208bf, 0x332f7f2c, 0x32007f13, 0x492d161c, 0x4b228829, 0x104c150a, 0x05f66888, 0xdf423320,
		0x10ed2507, 0x5ddefdd6, 0x1127d682, 0x31cd2f33, 0x63132b30, 0x06230e27, 0x91231107, 0x881620dd, 0x202432de, 0x30201c3f, 0x0a4b1121, 0x080c1510,
		0x014b091b, 0x0cff427a, 0x2b0a1c39, 0x01514b27, 0x0d0c0bc3, 0xfe384525, 0x271e01d5, 0x0507182d, 0x8e78fe04, 0x0a0d43ef, 0xffff002e, 0x00000900,
		0x3d03eb01, 0x24002602, 0x90180982, 0x022e0acb, 0x041b1700, 0x0902500f, 0x2b2b4f1c, 0x2b830034, 0xf5ff3a26, 0xb202b001, 0x44202b82, 0x063a2b82,
		0x00005f01, 0x0b401000, 0x35310502, 0x0250131c, 0x2b4f360f, 0xffff342b, 0x1d825900, 0x53849b20, 0x538d2c20, 0x0c000129, 0x50020410, 0x88110901,
		0x82362053, 0x83c22053, 0x0c012153, 0xdd325385, 0xb9130000, 0xdbff0100, 0x1a160940, 0x01500b01, 0x2c841b02, 0x1d245782, 0xd801f3ff, 0x32205784,
		0x0229578d, 0x00242000, 0x04025009, 0x20578825, 0x20578228, 0x20ab84cc, 0x82ab8c52, 0x00092429, 0x840e0250, 0x038f1829, 0x20ff8308, 0x29538d38,
		0x1e1a0001, 0x01501404, 0x53881f06, 0xf6ff4424, 0x5384ad01, 0x538b5820, 0x16010125, 0x8200071a, 0x22a885d5, 0x82300004, 0xc42608a7, 0x0b003d03,
		0x1b001700, 0x57003500, 0x80093140, 0x02039003, 0x0f1b0303, 0x13104015, 0x09401548, 0x1515480c, 0x01821b1a, 0x2e212108, 0x24373173, 0x18362173,
		0x0c06121b, 0x41222f00, 0x461c7c29, 0x3fed3f00, 0xdd32de33, 0x01cdde32, 0x2a05ac6c, 0x2f393912, 0x2f33112f, 0x82cd2b2b, 0xcd5d2305, 0x7b443031,
		0x4333200b, 0x27240a19, 0x13231533, 0x2810ab5a, 0x020e1411, 0x1b1b15a0, 0x24038215, 0x1c1c149f, 0x27038214, 0x71e2e2df, 0x16304d37, 0x090e8f18,
		0x4d30162c, 0x161b8702, 0x171a1a17, 0x07871b16, 0xfc39b63e, 0x543a20ef, 0xfe820134, 0x263f2f87, 0x3f261010, 0xfe79012f, 0x3a54347e, 0x00ffff20,
		0x08051741, 0x2602cc26, 0x00005800, 0xa7020601, 0x1e000000, 0x02031540, 0x2a180101, 0x03500007, 0x024f3009, 0x014f2209, 0x2b4f1609, 0x34210082,
		0x054f4234, 0x20052741, 0x2037823e, 0x20378438, 0x303788b1, 0x04262c00, 0x06035014, 0x06024f2a, 0x06014f1e, 0x85378c1b, 0x88fb206f, 0xb6aa206f,
		0x88b2206f, 0x1c002237, 0x206f842e, 0x206f8237, 0x206f8226, 0x206f921a, 0x206f88e6, 0x206f90ab, 0x20dfa433, 0x223788b0, 0x8c322000, 0x921c20df,
		0x20df896f, 0x416f90a9, 0x4d08124f, 0x2d000200, 0xcc01f5ff, 0x1a00db01, 0x5f002300, 0xff1d00b9, 0x0f3a40f0, 0x094c0010, 0x4d001020, 0x0e0d2009,
		0x10024c00, 0x4c001413, 0x00122001, 0x1118014d, 0x07234d00, 0x0e251682, 0x1b24030e, 0x86070482, 0x0d002323, 0x11880a0d, 0xb95f1e50, 0xed3f3005,
		0x39112f32, 0x2f01ed2f, 0x32c610ed, 0x18de102f, 0x2809d446, 0x35262217, 0x21373434, 0x0b505a26, 0x14154908, 0x0627020e, 0x3e323316, 0x5ef13702,
		0x47010166, 0x2c4e5005, 0x0f0b103e, 0x5b3c314e, 0x3e261e3c, 0x3d01964f, 0x212d1d33, 0x750b0313, 0x07120577, 0x070f4b48, 0x25120845, 0x3e345940,
		0xc71e3d5b, 0x24164839, 0x0500182f, 0x43079744, 0x3f080643, 0x0032002b, 0x1a464089, 0x090f151a, 0x2c2d2f1e, 0x1f2c1f25, 0x14252078, 0x1d252020,
		0x1c262c30, 0x2b781c2c, 0x2b2b1426, 0x031b1b26, 0x2c2c0909, 0x20342b20, 0x442b1c33, 0x30791e1d, 0x20252f2f, 0x2b055a43, 0x4125262c, 0x0044201f,
		0x333f333f, 0x23065b43, 0x2f391211, 0x2707e24e, 0x3911ce10, 0xcd2f3311, 0x2207dd58, 0x59c4c410, 0x102906c4, 0xc405c40e, 0x101801c4, 0x431c82de,
		0x01241d77, 0x23072327, 0x07f35518, 0x07060625, 0x43262633, 0x01371274, 0x28e52a0b, 0x312a1154, 0x1d661e36, 0x112a2f35, 0x183217f2, 0x433017bf,
		0xfc33147a, 0x9442a2a2, 0x4a4a9d9a, 0x42949a9d, 0x923f0f02, 0x45935a58, 0xcc200a8f, 0x43078f45, 0x04330777, 0x33050203, 0x50131c45, 0x4f4b0f04,
		0x4f3d0f03, 0x42310f02, 0x0021095f, 0x085b4104, 0x16000f38, 0x26002200, 0x40407f00, 0x20262625, 0x13021a1a, 0x03091011, 0x27190310, 0x0f39171c,
		0x23270428, 0x09171d26, 0x14790201, 0x10031313, 0x0441090a, 0x000f4403, 0x05447244, 0x41333321, 0x102d054e, 0xcddeddde, 0x10c61001, 0x3d3911ce,
		0x0744412f, 0x290f4e41, 0xcd2f1833, 0x31cd2f33, 0x33412130, 0x44272011, 0x01210ece, 0x15304194, 0x1c151624, 0x0382151c, 0xe2e28622, 0x24122541,
		0x17171bb4, 0x2103831b, 0xbf4639b6, 0x092f4109, 0x0000a831, 0x10401700, 0x3d050203, 0x50131c3e, 0x413f0f03, 0x3421072a, 0x2a2f8334, 0x0100001b,
		0x020603e2, 0x82a10026, 0x00073409, 0x0059008a, 0x4010008b, 0x1754020b, 0x50100418, 0x46190702, 0x1f26081b, 0xde01f5ff, 0x2b827b02, 0x2b82c120,
		0x8a000624, 0x29830009, 0x4c040329, 0x5007214d, 0x844e0003, 0x00013229, 0x01f3ff2e, 0x007902da, 0xb9c1002d, 0xe0ff2800, 0x05027db3, 0x11b3d822,
		0x2d058367, 0x000c0bb4, 0xffb8274c, 0x0010b3f0, 0xb558234d, 0xb8222306, 0x2883e8ff, 0xf0200782, 0x08a25b18, 0x4d000c22, 0x0b200f84, 0x2605354e,
		0x00120fb4, 0x82b81a4c, 0x850e2051, 0x31402610, 0x0f4d000d, 0x210d8218, 0x0982100f, 0x0001033a, 0x1c1c0973, 0x2f090607, 0x2e127625, 0x7c201d1d,
		0x79010917, 0x04020602, 0x17290182, 0x0d7c2a45, 0xed3f0046, 0x0565463f, 0x32ed1022, 0x2f200282, 0x26057a46, 0x2f33cd32, 0x18cdfd10, 0x230ddb44,
		0x252b2b2b, 0x0915f718, 0x22065460, 0x18023e34, 0x2109129d, 0x5c5f020e, 0x36420805, 0x475b0137, 0x2c2c5347, 0x35345013, 0x26213e55, 0x20315740,
		0x06162230, 0x203a151b, 0x172a3a23, 0x263b2815, 0xae071b19, 0x41565641, 0x2b15079f, 0x4e4d7952, 0x0a2b5278, 0x45040f0e, 0x42241712, 0x657b395d,
		0x00003b05, 0xff280002, 0x01e20158, 0x002200db, 0xb9980035, 0xf0ff3000, 0x4d000eb3, 0xd568b82b, 0xb3f02108, 0x0f83ec82, 0x0c4c4036, 0x18204d00,
		0x4c001211, 0x00101020, 0x0f180b4d, 0x064c0010, 0x05210584, 0x20168310, 0x380b8405, 0x22232426, 0x1511137f, 0x08822d37, 0x36081b1b, 0x11262314,
		0x03883226, 0x3a018226, 0x881f360d, 0x882a4b18, 0x3f00500d, 0x11ed3fed, 0x2f393912, 0x11ed102f, 0x55cd1033, 0x10280554, 0x32de10ed, 0xcc32fdce,
		0x610c1c41, 0x342d0763, 0x3233023e, 0x33151716, 0x14152315, 0x09fc5d06, 0x21051153, 0x45182626, 0x66080a48, 0x360d4901, 0x33442723, 0x4c351b1d,
		0x1c503932, 0x6a684747, 0x0f1a452a, 0x43253e19, 0x0c5a5a3b, 0x3e3c2026, 0x16271e12, 0x2b10331c, 0x371b1208, 0x55333a55, 0x0811233e, 0x6cb23daf,
		0x490a0e60, 0x413a0e0b, 0x04743dbb, 0x28495807, 0x12112539, 0x00ffff0c, 0x01f3ff2e, 0x023d03c7, 0x002a0026, 0x01070100, 0x4236005f, 0x012905bf,
		0x092a2635, 0x0e015001, 0x08bf422b, 0x58ff2822, 0x2006db48, 0x05db484a, 0x0000122f, 0x020b4010, 0x07322e21, 0x0c025010, 0x06db4933, 0x2f4a4020,
		0x492e2008, 0x132e0a2f, 0xff0100b9, 0x170940e5, 0x5008101b, 0x324a0001, 0x00002406, 0x822b0002, 0x03de2c25, 0x0016003e, 0x4085001c, 0x78000645,
		0x00260628, 0x13060b14, 0x0d190010, 0x24080e81, 0x1b1c401e, 0x19196017, 0x007f0b10, 0x0d08010d, 0x05100b1d, 0x171b4914, 0x80181a40, 0x0f0e1c19,
		0x054a0d4d, 0x05467806, 0x9b4f3320, 0x3f290807, 0x01393912, 0x5d5ed610, 0x193232ed, 0xcdcd1a2f, 0x10181a33, 0x102f32ce, 0x2b0487c1, 0x87c10010,
		0xc4107d05, 0x10180887, 0x2209822b, 0x783031c4, 0x373b0a5c, 0x37363611, 0x03060633, 0x17371737, 0x441bee07, 0x62123c43, 0x3f3f3813, 0x78535319,
		0x23080549, 0x54541afd, 0x14ff6e1a, 0x1f49463d, 0x323c411f, 0x8902df11, 0x3077fe0e, 0x6c33335f, 0x3628e501, 0x00552836, 0x02310082, 0x59ff1d00,
		0x7902d801, 0x30002400, 0x00b9b300, 0x0597422f, 0xffb82f2b, 0x0d1440f8, 0x182d4d00, 0x2004820e, 0x23098210, 0x0e0d1029, 0x2005e143, 0x2c0883b4,
		0xd8ffb817, 0x000c08b4, 0xffb8134c, 0x200884e8, 0x23088212, 0x4d0010b3, 0xf02d0782, 0x000f3f40, 0x0f180e4d, 0x0d4c0010, 0x21258318, 0x19821008,
		0x82200821, 0x84082015, 0x0625080f, 0x1d1a2303, 0x762b251d, 0x76253215, 0x100b400b, 0x1f310b48, 0x7c2e3100, 0x7c284510, 0x0046061a, 0x3fed333f,
		0x051f7fed, 0x10ed2b28, 0x3911edde, 0x9818332f, 0xf5510a57, 0x052b2707, 0x34352622, 0x43183736, 0x152309a7, 0x18070614, 0x22097498, 0x64161403,
		0x25080526, 0x01062223, 0x212f3324, 0x38503011, 0x513b201f, 0x3b513132, 0x092f3720, 0x24182021, 0x060b1406, 0x4543d816, 0x02824546, 0x24a7432c,
		0x112e1720, 0x78502801, 0x97745352, 0x8c6e2e06, 0x1e180724, 0x031a0e20, 0x010a3603, 0x095073dd, 0x28000232, 0xcc0159ff, 0x2700db01, 0xc6003300,
		0x20320c40, 0x3227f383, 0x4d000e18, 0x73ffb830, 0x0882054f, 0x82b3e821, 0x872c2010, 0x22088210, 0x821340f0, 0x282a2711, 0x2a4d0010, 0x04820f20,
		0xfd441020, 0xb4f02205, 0x050e4511, 0x0ab3d825, 0x83194d00, 0x09082931, 0xb8154c00, 0x0b40e8ff, 0x0f210983, 0x25058318, 0xf0ffb80b, 0x3c822b40,
		0x0e840a20, 0x03082108, 0x1c262620, 0x282e2020, 0x2e351782, 0x09400d82, 0x340d480c, 0x2b340022, 0x31501288, 0x51081c88, 0x22144f41, 0x18102f33,
		0x410d5a90, 0x52410555, 0x0f544106, 0x0c2c9418, 0x44341321, 0x25080504, 0x36323316, 0x30331601, 0x08081017, 0x1d34472a, 0x2d4d381f, 0x1f384e2e,
		0x25172d34, 0x240e0d12, 0x070a1406, 0x8c733d17, 0x24a73a07, 0x11251520, 0x26030608, 0x3734563f, 0x23233f5a, 0x48375a3f, 0x180e1f6b, 0x5e941813,
		0x8f012107, 0x21069573, 0x9b42ffff, 0x06032d05, 0x42022602, 0x07010000, 0x00008a00, 0x29050744, 0x32310002, 0x0250140a, 0x0744330f, 0x0159240a,
		0x827b02cc, 0x4643202b, 0x2b8205c7, 0x0b40102b, 0x35340002, 0x0250160c, 0x07e34d11, 0xf3ff1826, 0x3d03cf01, 0x0f202782, 0x270e374d, 0x1b2a2606,
		0x07015010, 0x26095b44, 0x015bff2c, 0x82b202af, 0x4da3202b, 0x0c240c37, 0x121b2d29, 0x2e202982, 0x24065b44, 0x0156ff47, 0x21278397, 0x27855d01,
		0x0000242e, 0x010b4010, 0x0b18143a, 0x01015002, 0x38056d47, 0xff1b0003, 0x02df01fb, 0x00110071, 0x002e0022, 0x2a0b408c, 0x4d000f18, 0x23048327,
		0xe0ffb81a, 0x74074755, 0x10230852, 0x47144d00, 0x07820641, 0x40e03008, 0x00111031, 0x1f76284c, 0x2d170117, 0x0e052073, 0x007e0e09, 0x00001405,
		0x090f0f05, 0x06000006, 0x421c7c26, 0x41127c2b, 0x11790e00, 0x7e050941, 0xed21071e, 0x07965632, 0x234a1020, 0x18012608, 0x5ddced2f, 0x080d59ed,
		0xe0530120, 0x1b86560c, 0x8056df20, 0x2b022126, 0x20257a56, 0x05174100, 0x1741e220, 0x407c2908, 0x0e182a0d, 0x274c000f, 0x1a290584, 0xb4e0ffb8,
		0x4c001210, 0x21088214, 0x09833740, 0x2f762828, 0x02176f17, 0x04412e17, 0x41842005, 0x00230704, 0x41080109, 0x85260e08, 0x05094911, 0x5a560885,
		0x0b084105, 0x4b5d5e21, 0x0a41072e, 0x2907410c, 0xe054e220, 0x1839560d, 0x54920121, 0x33560cd8, 0x00033f19, 0x01f5ff05, 0x00b502eb, 0x0020000d,
		0xb67b0032, 0x0b0a101b, 0xb80a4c00, 0x12b3d8ff, 0x07824d00, 0x11b3f02a, 0xb8054d00, 0x3540f0ff, 0x30081082, 0x2f2a2f26, 0x14262184, 0x30262121,
		0x012a0030, 0x21272a08, 0x00202721, 0x82080f7f, 0x852f2118, 0x262a4931, 0x034c2985, 0x0b501d89, 0x0e511389, 0x0823560f, 0x3f32ed2f, 0x2f0132ed,
		0xc0fddced, 0x102f332f, 0x090c41cd, 0x01303123, 0x2000822b, 0x2a0d5613, 0x0556bc20, 0x78012129, 0x4829ff55, 0x3e200807, 0x33070748, 0x38008f00,
		0x10008900, 0x3b010b40, 0x01092628, 0x270e0150, 0x200e0748, 0x282b82b5, 0x0100004a, 0x298f0006, 0x29298300, 0x2e303c02, 0x02501007, 0x29842f0c,
		0x24000139, 0xd201f3ff, 0x21006b02, 0x17b64800, 0x00100a20, 0xffb8124c, 0x832140e8, 0x1c203c09, 0x02211d73, 0x1d1a1a73, 0x1b0f730c, 0x1d202079,
		0x1d411e00, 0x147c0744, 0x54490d46, 0x122006a0, 0x2005564e, 0x0610622f, 0x2b303124, 0x596b132b, 0x1411220b, 0x05ba780e, 0x23353908, 0x33112311,
		0x4fd83311, 0x0c110b05, 0x060c120c, 0x311c0b4e, 0x1c302626, 0x4e4e660a, 0xfe6b0266, 0x1f372b59, 0x371f0b0b, 0xfe0c012b, 0x364d32f4, 0x4d361c1c,
		0xe0fe5c32, 0x21081a82, 0x000000fb, 0xff490002, 0x02cd015b, 0x000d0071, 0x406c0019, 0x0f301515, 0x18154d00, 0x114d000e, 0x04821210, 0x00110829,
		0xffb8074d, 0x8410b3e0, 0xb3f02207, 0x2207840a, 0x7208b4e8, 0xe82205ad, 0x19821b40, 0x08761325, 0x680d0e1b, 0x1a3105d3, 0x440d7c0e, 0x027c1619,
		0x00014105, 0xed333f2f, 0x15405c32, 0x5c231721, 0x15200530, 0x3408cc82, 0x033e3507, 0x23263435, 0x9b070622, 0x345a1d52, 0x532f6f6a, 0x512d4070,
		0x3b49233d, 0xa50c2d21, 0x1c0ded02, 0x794e7174, 0x4e1d485f, 0x624a3719, 0x0d524944, 0x29be8205, 0x3700ffff, 0xbd010000, 0xaf183e03, 0x00210777,
		0x20168243, 0x05255389, 0x0940fd2e, 0x10071315, 0x14080150, 0x342b2b4f, 0x47202f85, 0xb0222f82, 0x2f82b502, 0x09825120, 0x43000624, 0x2d8500f3,
		0x0940ee2a, 0x05001517, 0x16020150, 0x04202d85, 0x37060b4e, 0x0019003e, 0x002c0020, 0xb9990030, 0xd8ff1900, 0x11084f40, 0x28154c00, 0x4e080583,
		0x2d272100, 0x27142f2f, 0x1b1d0a27, 0x1a0b111a, 0x110c780b, 0x110c0c14, 0x0208091e, 0x78081a08, 0x07140207, 0x070c1a02, 0x2d310c32, 0x2e2e2f30,
		0x092a2417, 0x1d1e790a, 0x2a2a0c1d, 0x0b11021a, 0x0708440c, 0x333f0044, 0x332f333f, 0x4e2f3333, 0xcd310721, 0xddcd2f32, 0xc61001cd, 0x3911de10,
		0x7d872b87, 0x106f4fc4, 0x2f183322, 0x102d2583, 0x3031cdde, 0x14012b2b, 0x17031e07, 0x062b4e23, 0x35262628, 0x32333634, 0x634f0716, 0x47372005,
		0x27080a47, 0x37270737, 0x18174e01, 0x112a3031, 0x24ee2557, 0x312b1054, 0x0c0b1832, 0x32212330, 0x1c321755, 0x16321ac8, 0x19121219, 0x2b080383,
		0x86138c29, 0x17236e02, 0x95989039, 0x3ea2a23e, 0x388e9896, 0x26131e0b, 0x3f7b2c2c, 0x995e5f95, 0x17171591, 0x18181515, 0x3c312ca4, 0x2109734f,
		0x734f2d03, 0x00a63108, 0x400f0000, 0x02030409, 0x1c313a05, 0x342b5013, 0x200b3b4e, 0x083b4e3e, 0x65008f22, 0x29057343, 0x17196402, 0x02501004,
		0x3b4e1807, 0x4eb5200e, 0x8f30083b, 0x10000022, 0x21030b40, 0x07214c4e, 0x4d000350, 0x25061f47, 0x01dfff1d, 0x538303d8, 0x0000b328, 0x8f000701,
		0x53851500, 0x30180328, 0x500c002e, 0x9d430803, 0xff002905, 0xff2800ff, 0x02cc01e0, 0xd3205383, 0x06232b82, 0x85178f00, 0x311b2853, 0x5010032f,
		0x86300c03, 0x05ff5553, 0x24205383, 0x07222782, 0xcf82a502, 0x154f8920, 0x1e002c05, 0x500f0418, 0x4f1d0903, 0x82190902, 0x82da822e, 0x565b821c,
		0x5b830507, 0x33824420, 0x33840620, 0x2805474f, 0x131c3238, 0x370f0350, 0x0552484f, 0x63563183, 0x56282008, 0x02210763, 0x097f48a4, 0x63562920,
		0x419d2015, 0x2b83085f, 0x0b401025, 0x56430502, 0x5b200d63, 0xcc217982, 0x20b78303, 0x34b78a28, 0x0102b11a, 0x40e7ffb8, 0x000d130d, 0x0102500a,
		0x01014f12, 0x82ba850e, 0xff282287, 0x1bd218f5, 0x2cb7890b, 0x13232902, 0x00035002, 0x00024f28, 0x202e8524, 0x852f8200, 0x85b78363, 0x00a42263,
		0x0537491b, 0x1e010123, 0x215f8210, 0xc7560101, 0x185b8509, 0x210817c4, 0x3f4da402, 0x34142206, 0x225a8226, 0x41270002, 0x5320066f, 0x9b20ad82,
		0x2c20b784, 0xff24b785, 0x008900ef, 0xef20b785, 0x0424b783, 0x09025002, 0x0920b782, 0x2f20b789, 0xc224b782, 0x2602b502, 0x23052357, 0x00cba502,
		0xc92e3186, 0x171d0d40, 0x02500b01, 0x014f1c02, 0xba861802, 0x83570020, 0x85bb8308, 0x08734167, 0x1e000122, 0x82158357, 0x205f86bb, 0x0a8357a4,
		0x83572820, 0x023e2414, 0x8c320026, 0x020323bf, 0xbf82ffb8, 0x0021272b, 0x04035009, 0x04024f26, 0x0c774122, 0x20058b42, 0x052f4252, 0xbf83ef20,
		0x09243188, 0x0e035000, 0x0e203182, 0x00203186, 0xeb57bf83, 0x85bf8305, 0x22bf8867, 0x57320002, 0xbf8215eb, 0x5f850020, 0x82073342, 0x575b8229,
		0x372009eb, 0xcf217d82, 0x20bb8303, 0x25bb8635, 0x008900e6, 0x8983b11a, 0x0d40dd2e, 0x08122b31, 0x30170350, 0x2c17024f, 0x5320bb88, 0x0dafb018,
		0x84a50221, 0x010232bb, 0x40d9ffb8, 0x000f150d, 0x02025006, 0x02014f14, 0x0a7b4110, 0xbb836785, 0xa42f6785, 0x8b00e6ff, 0x00b91300, 0x40ddff02,
		0x822e3c09, 0x17022166, 0x8306aa43, 0x846b20eb, 0x20bf8363, 0x2c098255, 0x1ba40206, 0x40100000, 0x2004010b, 0x225f8212, 0x42130201, 0x2f57063b,
		0x0207240d, 0x42f8ffa5, 0xf82e083b, 0x1b210d40, 0x02501404, 0x014f2006, 0xbf881c06, 0x20052b57, 0x08bb56b5, 0xf12dbf89, 0x171d0d40, 0x02500007,
		0x014f1c09, 0x0b3b4209, 0xbf836785, 0x8f823820, 0xaf430720, 0x00012209, 0x1513592c, 0x5820bb83, 0x0020bb85, 0x0122bb85, 0x5b821a28, 0x1b090122,
		0x343d8982, 0x1e000100, 0xd5015bff, 0x32007802, 0x00b9bf00, 0xb3d0ff29, 0x284d000b, 0xb3d8ffb8, 0x05bb730c, 0x0f0eb42c, 0xb8254c00, 0x11b3e8ff,
		0x07824d00, 0x10b3e028, 0xb8234d00, 0x1884f0ff, 0xffb81f2b, 0x085840e0, 0x201a4d00, 0x20048212, 0x22238228, 0x8210181a, 0x0f202509, 0x28144d00,
		0x18260483, 0x104d000e, 0x04820d20, 0x820c1821, 0x0b102404, 0x830f4d00, 0x30072122, 0x28081382, 0x21761224, 0x27760521, 0x0c2f2f34, 0x2433190c,
		0x0c0c790b, 0x2c7c001c, 0x7c151818, 0x3f00451c, 0x2f2f32ed, 0x2f3911ed, 0x05537aed, 0x85693220, 0xc25d1805, 0x172b2114, 0x08875c18, 0x84333521,
		0x0d01570a, 0x226d0620, 0x226d0808, 0x16163727, 0x516d3d57, 0x51422a2f, 0x2e1b2227, 0x491f384e, 0x1451354d, 0x3c63171b, 0x233d5532, 0x4c44393d,
		0x4a896a3f, 0x050a210a, 0x0f5a1908, 0x2d334227, 0x440e223a, 0x22332111, 0x0b17433b, 0x16170e44, 0x31344a30, 0x6614185a, 0x3b604840, 0x014b0219,
		0x00010001, 0x015bff39, 0x00dc01b1, 0x40bc0031, 0x10202224, 0x28224d00, 0x2504820f, 0x4d000e10, 0x1641301a, 0x83152007, 0x20152dfd, 0x0d4d000c,
		0xb4e0ffb8, 0x4c000f0e, 0xe8270882, 0x4d000db3, 0x7effb80a, 0x062005fa, 0x82062e4d, 0xb3e82507, 0x034d0011, 0xb3211882, 0x20078412, 0x260f86e0,
		0x0a08b4e8, 0x82024c00, 0x22402118, 0x24082182, 0x05822408, 0x0b821805, 0x111f1f33, 0x08322d11, 0x1f1f851e, 0x10891100, 0x272c2c4b, 0x00500088,
		0x2f32ed3f, 0x254a413f, 0x18321321, 0x290c0490, 0x35053e27, 0x23022e34, 0x55413523, 0x0e620807, 0x3e270702, 0x4b2bd103, 0x2c371f37, 0x6b433d3a,
		0x19064084, 0x303e413f, 0x433d2a1d, 0x43240b19, 0x393f1f34, 0x1b252c17, 0x20080f06, 0xdc012f2a, 0x2b3c2612, 0x0d124729, 0x523e304e, 0x01451431,
		0x1f130b05, 0x28211e2c, 0x0a450615, 0x2b1d2718, 0x0908062f, 0x08034803, 0x00000607, 0x2d00ffff, 0x1f530000, 0x4e2b2006, 0x00270ec3, 0x0107100c,
		0x45000150, 0x002306df, 0x822c0002, 0x03b03021, 0x0015003e, 0x4080001b, 0x12201015, 0x19104d00, 0x31223522, 0x4d000929, 0x1d0c7f0d, 0x16181a40,
		0x031b1b60, 0x48827f15, 0x1c000838, 0x50068811, 0x1940161a, 0x1b188017, 0x0d4d0201, 0x3f004a00, 0xd4523f32, 0x055a7f09, 0x2306d252, 0x181acd33,
		0x09394718, 0x332b2b22, 0x09c84d18, 0x4a231121, 0x11200654, 0x0805c452, 0x14534729, 0x47351832, 0x3052122a, 0x0b311a3e, 0x54541a6e, 0x89026e1a,
		0x0908ce0e, 0x2f4e381f, 0x56f4fafe, 0xfe050b47, 0x5216037f, 0x013f07bc, 0x5bff2d00, 0x7802c701, 0x3b001300, 0xff1100b9, 0x082240e0, 0x044c000c,
		0x4d001028, 0x820f1804, 0x0e103404, 0x73024d00, 0x73081513, 0x7c05140b, 0x440a450e, 0x742f0001, 0x31220975, 0x00822b30, 0x11230529, 0x22232634,
		0x4a110706, 0x240805f5, 0x0115021e, 0x483f52c7, 0x5212401d, 0x3b3f6b21, 0xa5143050, 0x60661002, 0xddfd0509, 0x120b5b02, 0x365b4125, 0x3c008200,
		0xff190003, 0x02f40158, 0x000e00b5, 0x00420035, 0x202fb6a7, 0x4c000f0a, 0xe0ffb82a, 0x200883b4, 0x21088226, 0x09832140, 0x11281833, 0x184c0012,
		0x000a0820, 0x1228134c, 0x18134d00, 0x84048211, 0xb80a270f, 0x10b3e8ff, 0x07824d00, 0x3040e022, 0x3134b582, 0x20393232, 0x0f1d307f, 0x08400e0e,
		0x40431582, 0x23332028, 0x27081382, 0x31313630, 0x1e4b2d3d, 0x85034d1f, 0x2336501a, 0x12850b23, 0xed3f0051, 0x3fcd2f32, 0x3f333fed, 0x122f33cd,
		0x11333939, 0x012d0482, 0xd610cd2f, 0x2f3912ed, 0xed333333, 0xdd5b1832, 0x0bdb4d0e, 0x2206a16e, 0x55343526, 0x352505f1, 0x36361137, 0x0a846633,
		0x37270729, 0x22373426, 0x53150706, 0x87080748, 0x16240af0, 0x07101812, 0x1914252b, 0x1d0c0108, 0x11554c0e, 0x1a223323, 0x11520b29, 0x27181522,
		0x1d0e0f1c, 0x3b2f1f2e, 0x5e2b4310, 0x1a138c01, 0x1a1a200e, 0x7001191a, 0x2f1a170d, 0x5851243f, 0x0844040a, 0x36717f09, 0x15244059, 0xfd0eeb0a,
		0x150d0d8b, 0x16192f22, 0x2917252e, 0x70265125, 0x141b0a09, 0x28201610, 0x261b1a27, 0x24000200, 0xd001fcff, 0x2f006b02, 0x83004100, 0x10183ab5,
		0xb8374d00, 0x1440e8ff, 0x16210882, 0x2b048210, 0x00082012, 0x1120114d, 0x0d4c0012, 0x82060544, 0xb3d02907, 0x0c4d0011, 0xb3e0ffb8, 0x08251d82,
		0x40f0ffb8, 0x082b8222, 0x7629052f, 0x763d0000, 0x2319430a, 0x351c1c76, 0x19421476, 0x267c3005, 0x411f2c26, 0x420f7c38, 0x3fed3f00, 0xed2f3933,
		0x10013939, 0x2f33edd6, 0x05766ced, 0x230c4e45, 0x020e1401, 0x3106c06e, 0x022e2223, 0x023e3435, 0x35262637, 0x33373634, 0x24410606, 0x33272508,
		0x22071616, 0x08083871, 0x2e343530, 0x09a70102, 0x17131c12, 0x18131f2a, 0x39395034, 0x12183452, 0x26172a1f, 0x52080723, 0x2f2b0905, 0x05092b2f,
		0xad070852, 0x1524301b, 0x0583394b, 0x24152808, 0x16e10130, 0x091d262a, 0x33261b09, 0x33442920, 0x45321c1c, 0x26332029, 0x4f12091b, 0x233c2b2b,
		0x3c203d20, 0x823c3f3f, 0x232b0806, 0x1c0de13c, 0x363f1f2b, 0x202c1c0d, 0x0d1c2b1f, 0x02000000, 0xf5ff2100, 0xb502d401, 0x35000b00, 0x15409c00,
		0x0011182d, 0x18102d4d, 0x2008bccc, 0x06805820, 0x1110b439, 0xb82b4c00, 0x0a40f0ff, 0x4c000f0e, 0x0008181a, 0xffb8144d, 0x820a40e8, 0x180a2a08,
		0x4c00100d, 0xe0ffb808, 0x200883b4, 0x20178304, 0x20098329, 0x3e188402, 0x0c822f0f, 0x1282000c, 0x82291f37, 0x82062222, 0x0f1f361c, 0x2c2c8803,
		0x094d2532, 0x41511788, 0x2b232351, 0x4d252b2b, 0x13200a05, 0x0c074918, 0x36343522, 0x08165e41, 0x4a820124, 0x4b4b3d3d, 0x344a3d3d, 0x3f2d232b,
		0x2f503a20, 0x203a5030, 0x2b232d3f, 0x05500509, 0x33343506, 0x08820635, 0x45d20925, 0x82455050, 0x95013f03, 0x160f4f33, 0x52344564, 0x391f1e39,
		0x64453352, 0x334f0f16, 0x20264726, 0x4148203e, 0x06824841, 0x47263408, 0x01000000, 0x59ff3600, 0x6b02c701, 0x40002100, 0x170f2140, 0x05060673,
		0x781e191e, 0x00140500, 0x1f230005, 0x0022191f, 0x4121791e, 0x05190c13, 0x82441879, 0xdc3223e3, 0xad6e3fcd, 0xde103306, 0x7d872b87, 0x183301c4,
		0x31ccfd2f, 0x030e0130, 0x067e2107, 0x2135210e, 0x0ff32f19, 0x341c0b31, 0x0a200d28, 0x08160808, 0xbffe1b21, 0x194e4b1f, 0x200d0030, 0x09501829,
		0x360f2709, 0x7880853f, 0xa7834633, 0xa7824920, 0xd001ab22, 0x7f20a787, 0x8120a785, 0x8522a78c, 0xa7834921, 0x4c188522, 0x3320a7a0, 0x232ea794,
		0xa4012135, 0x46473e12, 0x1a09ff1b, 0xa6822730, 0x1905073a, 0xfe172208, 0x443f15e9, 0x01e41841, 0x1592014e, 0x2d645b4b, 0x2c3d2746, 0x20079a7e,
		0x06216913, 0x63000021, 0x312009ab, 0x3307474d, 0x02006201, 0x10009a00, 0x02020b40, 0x0f041f19, 0x17090250, 0x4d08534e, 0x972005a3, 0x2008ab63,
		0x83428262, 0x33052529, 0x50131c39, 0x0805115e, 0x01003439, 0x57ff5b00, 0x6b02cc01, 0x5b002600, 0xb80311b1, 0x2b40c0ff, 0x03480e0b, 0x0b170024,
		0x1f181414, 0x221b1b1f, 0x73211d28, 0x79202718, 0x1c211d1d, 0x21411979, 0x82001879, 0x080f311a, 0x00441823, 0xcddc333f, 0xcd2f3912, 0xed3fed10,
		0xed230782, 0x7fd61001, 0x322b05d8, 0x2f39112f, 0x32dd33cc, 0x18cd2bd5, 0x261a92b6, 0x15211521, 0x82231533, 0x23230805, 0x27010606, 0x1509171a,
		0x28171a23, 0x180b0a0b, 0x0725200f, 0xa3070f05, 0xf7fe5b01, 0x1f01e8e8, 0x18090594, 0x28149eb6, 0x46be466b, 0x120846db, 0x22008200, 0x82280002,
		0x01c73acf, 0x003000db, 0xb9da0039, 0xf0ff3600, 0x4d000eb3, 0xe0ffb828, 0x000e0db4, 0x2208824c, 0x4a0cb3e8, 0xb3210559, 0x22078414, 0x8413b3f8,
		0xb3d82207, 0x22078410, 0x860fb3f0, 0x00092107, 0x2005a270, 0x20078412, 0x08795dd8, 0x0f851020, 0x820f4021, 0x101f2128, 0x1f210d82, 0x41098218,
		0x3b08053d, 0x480e0b2e, 0x17003003, 0x1c14140b, 0x2d258231, 0x393b252d, 0x3a1c8226, 0x30141400, 0x263a080f, 0x21393986, 0x88292c2c, 0x34513017,
		0x00502188, 0x333fed3f, 0x112f32ed, 0x10ed2f39, 0x41054a41, 0x10220842, 0x424112ed, 0x08a9590a, 0x05200884, 0x240eb571, 0x27273435, 0x09695836,
		0x1515162e, 0x33161621, 0x17373632, 0x13070606, 0x2106f272, 0x5f411b01, 0x0420080f, 0x4a32060d, 0x3e261931, 0x665e294e, 0x5505b4fe, 0x103e2c4d,
		0x2d460e0b, 0x1d333e4d, 0x0314222f, 0x08107141, 0x0e1d0b28, 0x523f2906, 0x3c5c3e2f, 0x1d77751e, 0x080e4b48, 0x02100846, 0x453b2001, 0x182e2416,
		0x05000000, 0xf3ff1e00, 0xff64d901, 0x002f3608, 0xb9ca0039, 0xf0ff3800, 0x000e1440, 0x0d10364d, 0x344c000e, 0x290a8218, 0x000d1034, 0xffb8324d,
		0x0c82b3e8, 0xf0220782, 0x10821340, 0x08182e27, 0x182d4d00, 0x24048210, 0x4d000f10, 0xe05e1829, 0x82282007, 0x82b32008, 0x8624201a, 0x47232007,
		0x078206f0, 0x3840f022, 0x1f202982, 0x1f213383, 0x21098220, 0x2782101e, 0x1a1a3e08, 0x1b090f15, 0x0909031b, 0x2676351c, 0x1c76303b, 0x48100b40,
		0x7c333a1c, 0x1b18462b, 0x000c0612, 0x41217c37, 0xdeed3f00, 0xde32dd32, 0x01ed3fcd, 0xed2bd610, 0x12edde10, 0x32cd2f39, 0x06eb612f, 0x820d7641,
		0x1b74650d, 0x18340321, 0x2d095d76, 0x022e2223, 0x33161437, 0x23343532, 0x03620622, 0x186b2012, 0x260fcf4f, 0x8c454254, 0x6242458c, 0xfe361303,
		0x4c765328, 0x764c2424, 0x4c775353, 0x774c2323, 0xf2787a53, 0xd35078f2, 0x02cc2406, 0x4e2602cc, 0xa72006fb, 0x33052b64, 0x00020304, 0x00093422,
		0x3a0e0450, 0x2c0e034f, 0x200e024f, 0x410c0362, 0x1d2b07a3, 0x35002100, 0xff003f00, 0x413e00b9, 0x3c3006a1, 0x000e0d18, 0x0e183a4c, 0x103a4d00,
		0x384d000d, 0x8206a141, 0x40f02207, 0x3210820f, 0x00081834, 0x0f20334d, 0x2f4c0010, 0xb3f0ffb8, 0x824d0010, 0xb3e82507, 0x2e4d000f, 0x20069c41,
		0x2007862a, 0x21078229, 0x29831c40, 0x83182521, 0x83242005, 0x1012213a, 0x12200a83, 0x03236684, 0x83e0ffb8, 0x20078240, 0x824083f0, 0xb3e82207,
		0x05814c0e, 0x2f403908, 0x204d000d, 0x0f001d20, 0x0f0e2121, 0x763b220f, 0x7636412c, 0x100b4022, 0x39402248, 0x1e46317c, 0x1d1d1421, 0x051a0b14,
		0x3d050e0e, 0x0041277c, 0x32ceed3f, 0xdccd102f, 0x4105bf41, 0x33250dd2, 0xcddc102f, 0x0c1f7f33, 0x200adc41, 0x059c7d01, 0x48182620, 0x17200a16,
		0x23054143, 0x23153327, 0x0819d841, 0x03840122, 0x111e1610, 0x0f0d1e10, 0x170f0b12, 0x0f032806, 0x11121c16, 0x11100d1d, 0x06180f0b, 0x6ae3e3d3,
		0x2e17e741, 0x161a0bd7, 0x07080a10, 0x120d1907, 0x82171a0b, 0x0608250a, 0x39540d18, 0x2116ec41, 0xd7530000, 0x01f52105, 0x200bef41, 0x311682ac,
		0x03104017, 0x202f0002, 0x03500009, 0x024f400e, 0xc3522e0e, 0x05475109, 0x51022221, 0x012106af, 0x097b5362, 0x00282227, 0x04025009, 0x08334620,
		0x20053369, 0x074b4297, 0x10262b84, 0x00020b40, 0x5a822822, 0x22054142, 0x43040034, 0x0f290adf, 0x2d002300, 0x00b9c000, 0x05c4432c, 0xffb82c2b,
		0x0d1840f8, 0x182a4d00, 0x2004820e, 0x21098210, 0x09822028, 0x09832820, 0x85b82621, 0x22078224, 0x820f40f8, 0x18212b1a, 0x4c00100f, 0x00081821,
		0x47421d4d, 0x22078206, 0x840fb3e8, 0xb3e8210f, 0x17201782, 0x8207fd43, 0x40e02208, 0x2011822d, 0x20348413, 0x2b348313, 0x03090f0e, 0x76291003,
		0x76242f1a, 0x1034a782, 0x272e1048, 0x0c461f7c, 0x2b00060f, 0x0041157c, 0xdddeed3f, 0x210fd843, 0xb974cdd6, 0x0e6d6413, 0x2119ee41, 0x6f6415fa,
		0x1abf4308, 0x41087564, 0xb74316ca, 0x088b6412, 0x2d2c0029, 0x03500009, 0x414f2e0e, 0x2b200570, 0x2a054f56, 0x0100000d, 0x020603e8, 0x5d3c0026,
		0x01250dc3, 0x04121100, 0x37b7180c, 0x827b2012, 0x825c202b, 0x0006232b, 0x9351008a, 0x22212106, 0x0937b718, 0x0002003b, 0x0158ff36, 0x00b002b3,
		0x00260019, 0x180eb65f, 0x4c000c09, 0xe0ffb809, 0x200883b4, 0x21088205, 0x09832540, 0x07243508, 0x7f191d28, 0x1017160f, 0x27171111, 0x4d198516,
		0x1d1d0f12, 0x1a020021, 0x10110c21, 0x004b0c10, 0x332f333f, 0xcddedd10, 0x11391232, 0xed3f3333, 0x32c61001, 0x32221183, 0xbc5732ed, 0x372b2106,
		0x25110e4d, 0x35231135, 0x134d1333, 0x25eb3e0b, 0x1f2c1b2c, 0x32200f11, 0x11403323, 0x015d2b43, 0x1745b563, 0x20240f1f, 0x401f2020, 0x0cdf4c1a,
		0x080d0827, 0xfd465f02, 0x09e44c6c, 0x0222e582, 0xd3822500, 0xda01f434, 0x39002c00, 0x23b66d00, 0x000d0820, 0xffb81e4c, 0x0883b4d8, 0x08871a20,
		0x08821120, 0x09284023, 0x08ef820e, 0x3a0a7f26, 0x24262625, 0x30147f2c, 0x24301c37, 0x2714252d, 0x342d1726, 0x25252621, 0x88054b21, 0x4c0a500e,
		0xed3f3f00, 0x1120e287, 0x2305587a, 0xdedd2f01, 0xe583dd82, 0xfd5dd620, 0x34132306, 0xfe4e022e, 0x4e15200d, 0x34251003, 0x35342626, 0x0c064e17,
		0x1b11072e, 0x051e0f13, 0x30481653, 0x0d21372a, 0x2111fb4d, 0xfc4d8d01, 0x2b033108, 0x080c2037, 0x0179fe02, 0x180f08c3, 0xdc2f4730, 0x250ef44d,
		0x10131004, 0x12410d04, 0x00023a09, 0x0158ff3f, 0x006002b3, 0x002d0020, 0x200fb679, 0x4c000d08, 0xe0ffb80a, 0x250883b4, 0xd8ffb806, 0x09833340,
		0x2b082d08, 0x201d2424, 0x17101a7f, 0x2f1f1817, 0x00121211, 0x18080118, 0x201c1b2e, 0x1a1d8517, 0x21102449, 0x12130011, 0x0d282103, 0x0d111112,
		0x4109f141, 0x3f33060e, 0xcd32ed33, 0xc6100132, 0x2f325d5e, 0x11ce1033, 0x82332f39, 0x0afd4112, 0x2516fe41, 0x33153735, 0x04422315, 0x12f3230c,
		0x05421720, 0x11383408, 0x015d2b43, 0xbb526262, 0x17173dbb, 0x20201c0f, 0x8e401f20, 0x0d082bf4, 0x45800108, 0x45900e82, 0xfa8991fe, 0x03002308,
		0xf5ff1b00, 0xb502d901, 0x2f001e00, 0xa3004000, 0xff3b00b9, 0x1211b4e8, 0xb8354c00, 0x12b3e8ff, 0x07824d00, 0x1d40f028, 0x184d0011, 0x04820c10,
		0x820b1821, 0x0a202104, 0x28250482, 0x144d0009, 0x05627910, 0x0bb3f02a, 0xb8084d00, 0x0db3f0ff, 0xe8210784, 0x822b82b3, 0x40e0220f, 0x08188228,
		0x021f1023, 0x1e3f7f2f, 0x27163030, 0x38420a82, 0x33411682, 0x3d501b89, 0x22511389, 0x2c510d89, 0x00500589, 0x092f5e01, 0x18ed3f21, 0x220c795a,
		0x44393232, 0x13200d8d, 0x08a05f18, 0x18052e66, 0x22095969, 0x18171632, 0x4208536a, 0x23200567, 0x08075b5e, 0x33021e7b, 0xd5373632, 0x12200e4a,
		0x15232c16, 0x2a18404b, 0x17281011, 0x24164948, 0x1f14172e, 0x14084a08, 0x141b0f08, 0x150f080b, 0x0b1b0e0d, 0x0f1a074a, 0x0911160d, 0x0e18130b,
		0x0204170e, 0x0df60ea7, 0x5d38180f, 0x0d797a46, 0x820d0909, 0x385d4671, 0xfe0a1218, 0x12060585, 0x3630432a, 0x150e2744, 0x0e170d0f, 0x30364427,
		0x07122a43, 0x00000003, 0xff1b0003, 0x01d9015b, 0x065b41db, 0x00b96e24, 0x7363ff2a, 0xb8242105, 0x35063c7f, 0xe8ffb816, 0x000b3540, 0x0918094d,
		0x10064d00, 0x4c000b0a, 0x0a822006, 0x1c0e2408, 0x1f007f40, 0x8238081f, 0x82274214, 0x4b1e4108, 0x51198933, 0x5011893d, 0x500b8922, 0x5103892c,
		0x86ed3f00, 0x0a2e4101, 0x2c41ed20, 0x68372009, 0x3625076e, 0x17163233, 0x2a058336, 0x020e1415, 0x27262223, 0x41112315, 0x33220d17, 0xa6551616,
		0x05354105, 0x200ed525, 0x412b1712, 0x27210725, 0x1d254118, 0x132eb482, 0x170e0d19, 0x0f0e1204, 0x465d3818, 0x2241787b, 0x0b88080a, 0x063102b7,
		0x43291205, 0x27443631, 0x0d10150e, 0x44270e18, 0x29433136, 0x00040712, 0x00030000, 0x01a6ff09, 0x00b602eb, 0x00210019, 0x409d0024, 0x13031253,
		0x12047e03, 0x12040414, 0x1d061313, 0x070d1a1b, 0x0878071a, 0x0808140d, 0x0124210d, 0x1a000e00, 0x0e197800, 0x1a0e1914, 0x04261908, 0x00250804,
		0x12134419, 0x02050d12, 0x24790601, 0x1f221e23, 0x0d041114, 0x1a081d1d, 0x07410d0e, 0x03044408, 0x3f332f00, 0x332f0182, 0x122f3912, 0x33333917,
		0x3232ed33, 0x83331132, 0x6d012015, 0x5d5d05b3, 0xc40e2509, 0x10180587, 0x098be418, 0x18330123, 0x075c732f, 0x23272126, 0x23372707, 0x3d05bb6c,
		0x37171616, 0x031e0717, 0x06060317, 0x26373307, 0x33071726, 0x58259401, 0x52423f47, 0xb66c5424, 0x05340805, 0x3d270609, 0x2124133f, 0x17f20d1e,
		0x3a521836, 0x1d40120b, 0x12fca239, 0x9a42a2ea, 0x104aa3a2, 0x1087101c, 0x75793bde, 0x2302306f, 0xce58a63f, 0x64c13421, 0x2f05a34d, 0x01a6ff2e,
		0x00b602d9, 0x002b0023, 0x2a00b9de, 0x27058c43, 0xf0ffb82a, 0x4d0011b3, 0x402b0783, 0x4d000d14, 0x000b1029, 0x8208284d, 0x18282f09, 0x4c000c0b,
		0xe8ffb826, 0x00100fb4, 0x0882194c, 0x830a4021, 0x200f2a09, 0x014d000e, 0xb3d8ffb8, 0x20078412, 0x824083e8, 0xb3d0220f, 0x080f8410, 0x3940d848,
		0x094d000f, 0x15142827, 0x1d171508, 0x1607061e, 0x00001616, 0x08072d1a, 0x0c762408, 0x1b1d282c, 0x117c291b, 0x17151516, 0x27451114, 0x201e2323,
		0x0708037c, 0x03060907, 0x333f0046, 0x332f3333, 0x3232ed10, 0x0b88322f, 0x32322f2b, 0xedd61001, 0x10cd2f33, 0x231782ce, 0xc4877d2f, 0x01220082,
		0x0885dd18, 0x4a06f761, 0x252a0858, 0x22230606, 0x27072726, 0x1c542637, 0x17372108, 0x81088582, 0x27260717, 0x32331603, 0x14253736, 0x23131716,
		0xcc010622, 0x112d4f23, 0x40170f21, 0x28453b19, 0x083b6247, 0x3e120810, 0x10201011, 0x85201c18, 0x401d1c1b, 0x24ccfe22, 0x5e098120, 0x13141a5e,
		0x12550503, 0x7190225b, 0x2a52784f, 0x103f0101, 0x090e053c, 0xfe0a0f44, 0x130f0821, 0x1e664bd8, 0x0088c901, 0x00020000, 0x01b5ff28, 0x002502c3,
		0x002d0024, 0x2b00b9c3, 0x1340e0ff, 0x294d000c, 0x04820e10, 0x000b0838, 0x1008284d, 0xb8274d00, 0x6240f0ff, 0x234d000c, 0x4d000d28, 0x12822003,
		0x0e280327, 0x034c000f, 0x270f8230, 0x000f1002, 0x0e20024d, 0x18210482, 0x0804820d, 0x00082039, 0x13120b4d, 0x200a201f, 0x08292822, 0x0a092109,
		0x0e1a1a0a, 0x2121202f, 0x2e008225, 0x1d202021, 0x13191928, 0x1f228816, 0x0f12511d, 0x0588290f, 0x0b09090a, 0x41500508, 0x2f2d0953, 0x33333f32,
		0x2f3232ed, 0x2f331132, 0x0c524133, 0x22064a41, 0x82c48710, 0x0f504100, 0x3e343727, 0x32323302, 0x07444117, 0x03272622, 0x2108e84e, 0x68412223,
		0x37600805, 0x13171614, 0x28020e22, 0x365f4829, 0x18070c06, 0x1c0e1437, 0x1e111310, 0x190c690f, 0x233e210e, 0x2c4a230c, 0x38161e21, 0x544a4015,
		0x2566242a, 0xe71c3142, 0x1d3c5c3f, 0x3e134b01, 0x47050603, 0xfe020805, 0x070202b5, 0x0b0d450c, 0x42134606, 0x37556f19, 0x3d011447, 0x00402914,
		0x24000100, 0xcc3b0482, 0x0d006b02, 0x16402d00, 0x090b0f00, 0x0406730c, 0x030c0e03, 0x06060979, 0x780d4107, 0x392106da, 0x82e0822f, 0x33cd30d9,
		0x10cd32fd, 0x253031ce, 0x23112115, 0x82113335, 0x23153701, 0xfecc0115, 0x524949a1, 0x46468d8d, 0x01432101, 0x43f9fe07, 0x008200db, 0x00024008,
		0x01ddff12, 0x00a502f6, 0x000f000c, 0x042b4056, 0x0a0e0305, 0x0b0d0b0d, 0x0873000c, 0x01030006, 0x11030308, 0x05060d10, 0x0a790e07, 0x040c0300,
		0x0a0b0b0c, 0x04040541, 0x3f004402, 0x83332f33, 0x12112a03, 0xed103939, 0x39391132, 0x280a8201, 0x335d5e2f, 0x32cdfdcc, 0x24168433, 0x303132cd,
		0x22888201, 0x82132707, 0x21230805, 0x37071737, 0x52110123, 0xaaad3578, 0x36258601, 0x015d5de5, 0x9ae5fe1b, 0x110122bd, 0x3a461501, 0x8294f222,
		0xff3f39f3, 0x01b1015b, 0x003f00db, 0x1d00b9bc, 0x0cb3e8ff, 0xb81d4d00, 0x0bb3e0ff, 0xd8220784, 0x07840ab3, 0x09b3d02d, 0xb81b4d00, 0x0fb3d8ff,
		0x831a4d00, 0x840d201f, 0x822f8407, 0x40f0220f, 0x2728824c, 0x0b0a1808, 0x28084c00, 0x06212b82, 0x21208228, 0x4d823005, 0x82180521, 0x022d0819,
		0x4d000e10, 0x0d1c2a2a, 0x1c82000d, 0x37372241, 0x07008215, 0x40070801, 0x4b2d8926, 0x38388837, 0x893b0a18, 0x4e1f2203, 0x88130e0e, 0x066e5a0a,
		0xed393325, 0x7f323911, 0x332809c5, 0xde10332f, 0x112f33ed, 0x2811ed4d, 0x042e3425, 0x33363435, 0xf2c91832, 0x2223230d, 0xee4d2726, 0x46172006,
		0x2724055b, 0x3727032e, 0x32053a46, 0x3d295e01, 0x5b293d48, 0x1d512661, 0x241d080e, 0x846d1329, 0x5d280810, 0x0b13106b, 0x36431837, 0x080b1608,
		0x240b220b, 0x15232733, 0x201f2012, 0x452a1c13, 0x202a1720, 0x20197413, 0x32221718, 0x11973319, 0x41363208, 0x15310101, 0x4302021e, 0x140a0303,
		0x210f121c, 0x49081a1e, 0x0a040811, 0x00010011, 0x015bff4a, 0x00d001cd, 0x40a5002a, 0x12201d15, 0x101d4d00, 0x2004830f, 0x2c04820c, 0x4d000b18,
		0xd8ffb80d, 0x4d0010b3, 0x2007830c, 0x2507840e, 0x000db3e0, 0x12510b4d, 0x5d072006, 0x05210647, 0x626b18b8, 0xb3f02408, 0x824d000f, 0x40e8230f,
		0x08820928, 0x22272908, 0x05008127, 0x05000014, 0x2c001313, 0x22002828, 0x2b220801, 0x29852700, 0x86052249, 0x880f4c21, 0x3f004b16, 0x32ed3fed,
		0x21059055, 0x4b185d5e, 0x01210bf7, 0x0cb6482b, 0x030e0129, 0x17031e07, 0x5233031e, 0x51080570, 0x022e2223, 0x23032e27, 0x033e3523, 0x21352337,
		0x3d13a401, 0x151e4847, 0x08161d22, 0x24201e0f, 0x0b160415, 0x0b220b09, 0x20242b1e, 0x261d0a12, 0x15121d30, 0x1841433f, 0x014f01e5, 0x5c491592,
		0x11043167, 0x0f081414, 0x01101a20, 0x03034402, 0x2682180f, 0x10181a2f, 0x5d5f2837, 0x00451d53, 0x00010000, 0x30048244, 0x007902c1, 0xb9740023,
		0xe0ff2000, 0x4d0010b3, 0x20fe861e, 0x2507821b, 0x000f0eb4, 0x0882184c, 0x000ab323, 0x2207824d, 0x8409b3f0, 0x40e82707, 0x4d000827, 0x2e822012,
		0x0f28122e, 0x760a4d00, 0x11732319, 0x02100200, 0x25340082, 0x10011e24, 0x01077c0d, 0x44014516, 0x123f3f00, 0x1132ed39, 0x23054143, 0xdcfdce5d,
		0x2909e669, 0x3523332b, 0x37023e34, 0x58183636, 0x3a081448, 0x1c0e52fa, 0x30221e2b, 0x4e313447, 0x260a1c13, 0x661b362f, 0x291d1067, 0x16211718,
		0x3424bb0b, 0x14112028, 0x2f2d2630, 0x07430c1c, 0x5a080d10, 0x24302245, 0x1a0f0f1e, 0x821b261d, 0x550021d6, 0xa9260482, 0x2500dc01, 0x6b439100,
		0x00122105, 0x2005204f, 0x064b4311, 0x22055343, 0x860cb3e0, 0x840b200f, 0x83e02007, 0xb81a2bea, 0x3840d8ff, 0x4c000908, 0x2e821015, 0xe8831520,
		0x0f18152b, 0x20154d00, 0x144d000e, 0x254a8220, 0x251b820a, 0xf286137f, 0x2026272d, 0x0d121201, 0x18010788, 0x864c0150, 0x952f20f3, 0x822b20f4,
		0x2af88d00, 0x2707020e, 0x3233033e, 0x82141516, 0x0e42080a, 0x50fe1503, 0x16261b0f, 0x2a39291a, 0x1e252712, 0x23091a09, 0x5818312c, 0x231a105b,
		0x151b1112, 0x2b1e720b, 0x0f0e1b22, 0x1c231b26, 0x050d0b08, 0x0c0e0545, 0x1b3e4408, 0x0c182029, 0x1d17140b, 0x00820013, 0x1200033f, 0xc301fbff,
		0x1e007102, 0x40003100, 0x1240c500, 0x100f1036, 0x182e4c00, 0x2a4d0010, 0x210a8318, 0x644ab81d, 0x26088206, 0x0a09b4e8, 0x4b1b4c00, 0x078206d2,
		0x82b3d821, 0x861720f8, 0x2007820f, 0x270f83e0, 0xd0ffb812, 0x4d0012b3, 0x1f840782, 0xe0200782, 0x11253884, 0x40f0ffb8, 0x0819822f, 0x7638193e,
		0x762c1414, 0x2232421c, 0x09732320, 0x19410607, 0x2332791f, 0x20097906, 0x0132bf09, 0x09320932, 0x0f7c3d27, 0x007c2741, 0xed3f0042, 0x3912ed3f,
		0x5d2f2f39, 0xed103311, 0x39ed1032, 0x4407e845, 0xeb5a057a, 0x822b200c, 0x22172b00, 0x3527022e, 0x11333523, 0x185c033e, 0x16072a07, 0x06141516,
		0x15331503, 0xf77d1823, 0x05af4a12, 0x0fd98708, 0x0f262826, 0x260f3535, 0x2c0f2627, 0x0e1f384b, 0x33132119, 0x6dba6f45, 0x1d1d0a6d, 0x1928361c,
		0x1b322616, 0x2e173b4e, 0x21131624, 0x2417182b, 0x03020508, 0x3e860406, 0x06049401, 0x26100203, 0x29162e3e, 0x0e071b24, 0x5d5d3c4b, 0x3e532601,
		0x0a02024c, 0x1f232c1b, 0x440b192a, 0x1d26160a, 0x0a18261b, 0x00000201, 0xff120002, 0x02e201f3, 0x0014006b, 0xb9980021, 0xd8ff2000, 0x4d0012b3,
		0xe0ffb820, 0x078411b3, 0x1140f02a, 0x4c00100f, 0x12112017, 0x10200582, 0x14280b83, 0xb4f0ffb8, 0x4c000c0b, 0xe8240882, 0x4d000ab3, 0xf02d0782,
		0x00093340, 0x0a18014d, 0x014c000c, 0x080a8210, 0x731a0b29, 0x23120e10, 0x07731d0a, 0x10030005, 0x03032003, 0x1c220308, 0x0e790411, 0x0c07070a,
		0x7c154108, 0x3f004600, 0x4e333fed, 0x012c0637, 0x5d5ed610, 0x32ed33ce, 0xce32de10, 0x2a0d4b41, 0x35262217, 0x33352335, 0x84153335, 0x23152803,
		0x27061415, 0x82023e32, 0x14153d15, 0x61fa021e, 0x53353552, 0x353553c0, 0x24166152, 0x0dc00d19, 0x700d2319, 0xfc3d6669, 0x73080082, 0x7168663d,
		0x3c230d47, 0x2f5d5d2f, 0xff0d233c, 0x000900ff, 0x02eb0100, 0x0306026b, 0x0000009b, 0xff5b0003, 0x02d30197, 0x000f00a8, 0x00170013, 0x033f4070,
		0x12111615, 0x07020606, 0x090c0d00, 0x08080104, 0x190e0a0a, 0x04731410, 0x00020201, 0x20041004, 0x04080304, 0x79170c18, 0x05101009, 0x07070814,
		0x41057913, 0x0479140d, 0x00010102, 0x3f004404, 0x2606444a, 0x2f33ed3f, 0x48121133, 0xc6260614, 0x2f325d5e, 0x2b5910cd, 0x17123a07, 0x1711cd39,
		0x33303139, 0x23372707, 0x17372111, 0x23153303, 0x01153307, 0x820e8233, 0xf6270803, 0x561d4022, 0x3f152401, 0x49503965, 0x7be1febe, 0x491bbb40,
		0x58116964, 0x113d6b02, 0xdb46d0fe, 0xbe670146, 0x82db21fe, 0x045708c3, 0xb5ff2600, 0x2502c901, 0x2f002500, 0x38003400, 0x3d406f00, 0x0d343306,
		0x1c061b0e, 0x38371e05, 0x06032726, 0x0505041d, 0x15098230, 0x2f3a0915, 0x1c218235, 0x39211d1d, 0x3486380d, 0x37002626, 0x110e1414, 0x181b1e88,
		0x2a273351, 0x00030689, 0x323f0050, 0x4932ed32, 0xc38709b0, 0x1020c189, 0xc083dc82, 0xc8821120, 0x01303124, 0x9f491632, 0x14152505, 0x07230714,
		0x4b0a9f49, 0x172a0a09, 0x23262237, 0x07020e22, 0x15823433, 0x31820720, 0x0803012f, 0x3818080f, 0x01393517, 0x220f2ebc, 0x06387a13, 0x28175208,
		0x18371812, 0x3e273536, 0x022a084f, 0x30200206, 0xf9021321, 0xa6241918, 0x01252c03, 0x4c0101db, 0x6c174813, 0x070f0558, 0x0e03058f, 0x12084408,
		0x134a0505, 0x466d1f4d, 0x1e3c5c3e, 0x160183c8, 0x26193025, 0x3f72113b, 0x0073244f, 0x00010000, 0x06e74236, 0x001b2b08, 0x0e234041, 0x000e0b18,
		0x17181a4c, 0x06030573, 0x0f00001d, 0x7917061c, 0x011a1a03, 0x7c131010, 0x791b460c, 0x3f004101, 0xa3593fed, 0x5c332005, 0x3221089d, 0x051077cd,
		0x21351326, 0x23153311, 0x20077e4e, 0x42ec8437, 0x640805a0, 0x471c017f, 0x4d2d1347, 0x12513b3a, 0x283e1221, 0x7d7d3c3e, 0xfe462502, 0x2c5a43f9,
		0x2221394e, 0x200e4310, 0x43525144, 0x020000c1, 0x56ff4700, 0x9e02cd01, 0x27000b00, 0x29404e00, 0x26030309, 0x0f117f23, 0x24242912, 0x281b0c0c,
		0x0f862312, 0x26102600, 0x26260802, 0x1f1c1c0e, 0x06521888, 0x0e852700, 0x219b8249, 0x9d86cdde, 0x875d5e21, 0x2f322c9f, 0xcd32de10, 0x2f3232ed,
		0x183031cd, 0x210b5640, 0x6f5b3507, 0x505b1805, 0x3527080d, 0x35333523, 0x261a3401, 0x251b1a26, 0x0e01dd25, 0x2d1b4d4d, 0x4d26213b, 0x3d191922,
		0xbc34281c, 0x241802bc, 0x83241f1f, 0x458d3203, 0x30d13fbb, 0x10122a43, 0x110c4611, 0x3fd23b29, 0x08bf8376, 0x59ff1d20, 0x79020002, 0x30002200,
		0x00b9a800, 0xb3e8ff2f, 0x2f4d000e, 0x40f8ffb8, 0x4d000d13, 0x0d82182d, 0x82102d21, 0x10282109, 0x25210982, 0x05975bb8, 0xe8220782, 0x15820e40,
		0x0f18202f, 0x18204d00, 0x1c4d0008, 0xb3e0ffb8, 0x27078412, 0x110fb4e8, 0xb8074c00, 0x0f224b82, 0x07824d00, 0x2940f022, 0x03202182, 0x03202b83,
		0x1a382b83, 0x0a12762b, 0x00762332, 0x48100b40, 0x7c0e3100, 0x261b3115, 0x2e461e7c, 0x07756918, 0xdc103222, 0x2007d659, 0x0d4644cc, 0x00832b20,
		0x59341321, 0x112206af, 0xbb481614, 0x3535210a, 0x2005034a, 0x21158337, 0xe247023e, 0x1d290805, 0x2d4b351e, 0x1e364b2e, 0x1405160f, 0x1c080805,
		0x182b230b, 0x2d430b08, 0x1e354b2d, 0x1f3c3954, 0x3d0f1f2e, 0x01393c3e, 0x07ed7436, 0xbbfe3008, 0x02022b29, 0x15050241, 0x3d293f2a, 0x50262a20,
		0x827a537a, 0x44603c1c, 0x0082827a, 0x28000200, 0xf20159ff, 0x2000da01, 0x76002f00, 0x822e00b9, 0x000e21f8, 0x28054259, 0x244d000d, 0x40f0ffb8,
		0x2d108241, 0x100f100b, 0x100b4c00, 0x4c000908, 0x0b832005, 0x0a100527, 0x18054d00, 0x08048209, 0x00082021, 0x7f20294d, 0x21311118, 0x09400882,
		0x3008480c, 0x4b1b8914, 0x500d882d, 0x00882629, 0x6e005103, 0x0b59059e, 0x0d074108, 0x410ea978, 0x27210e07, 0x055b5214, 0x26113e08, 0x06222326,
		0x350e4901, 0x31472c20, 0x4e371f1a, 0x1b513430, 0x14061a14, 0x1e080806, 0x1b2e250b, 0x1c0dcc0a, 0x321c1e2b, 0x20230b0d, 0x0a124738, 0x59402413,
		0x3f5a3835, 0xfe081122, 0x0a064130, 0x24e72808, 0x161a2d3d, 0x0425010d, 0x00005906, 0x12000200, 0xd7010000, 0x1e007102, 0x95002d00, 0x0f1827b5,
		0xb81e4d00, 0x49b3d0ff, 0xf82205ce, 0x0f840ab3, 0x82b3e821, 0x261782eb, 0x080940e0, 0x83024d00, 0xb8012525, 0x3440e8ff, 0x63182682, 0x2d0808ba,
		0x0e0e0308, 0x08081300, 0x2f007629, 0x18731323, 0x01140016, 0x0e2e1408, 0x23791503, 0x1f141818, 0x14411c7c, 0x44080944, 0x3f333f00, 0x8945ed3f,
		0x46322005, 0xed230a69, 0x82112f33, 0x07115115, 0x852b0121, 0xc6631800, 0x23352910, 0x36113335, 0x16323336, 0x0dc96318, 0x3cb83c08, 0x26250f32,
		0x0e5d0f24, 0x0f212121, 0x35031806, 0x1f404052, 0x71702046, 0x0a1817db, 0x29392424, 0x31251616, 0x5739ae01, 0x453e1818, 0x46222249, 0x01143841,
		0x0144f4f4, 0x1807082a, 0x080dcd63, 0x21000126, 0xae010000, 0x1500da01, 0x17402f00, 0x1113170a, 0x02047f14, 0x01141601, 0x04041186, 0x07880e00,
		0x004c0050, 0x654ec688, 0x8333200b, 0x8335209f, 0x172a089e, 0x23262607, 0x33150722, 0x63152315, 0x68664242, 0x0f233b1f, 0x3e1d3120, 0xb7a6a63e,
		0x0523c13f, 0x05094908, 0xb73f8b11, 0x67820200, 0xdf010026, 0x1b006b02, 0x3a087982, 0x1c384069, 0x110a1c11, 0x141a1278, 0x151a1212, 0x731a1215,
		0x0a0a1c01, 0x14010978, 0x06010909, 0x01010906, 0x12112223, 0x171f2041, 0x0d0e1404, 0x031c1a01, 0x090a0707, 0x82440041, 0x39332f92, 0x3339172f,
		0x32cd3333, 0x333f3232, 0x4e5d1101, 0x3d941805, 0x75fd2008, 0x5918053b, 0x232f0ae1, 0x27263335, 0x17161633, 0x37363633, 0x82070633, 0x060624ae,
		0x82031507, 0x233a080d, 0x361ed216, 0x21344b18, 0x1b0b5d19, 0x1a0fa710, 0x1f1b5a0d, 0x35174c34, 0x1e11281d, 0xe61e7c0e, 0x40305e31, 0x42234541,
		0x23412221, 0x2f404145, 0x01e8315d, 0x1e3b1f2d, 0xd382003c, 0xff2a4e08, 0x01dd0158, 0x002700d0, 0x40a3002e, 0x1e1b1955, 0x16211821, 0x28292b14,
		0x17281721, 0x14211881, 0x13211818, 0x2810282c, 0x0f06090c, 0x10281006, 0x14060f81, 0x28060f0f, 0x1c1c0f28, 0x27273018, 0x2f0f0b0b, 0x091e2b2c,
		0x0c13141b, 0x34168221, 0x0c2f0c1f, 0x0f0c0c02, 0x4b248803, 0x10491817, 0x3f00490f, 0x28018233, 0x2f3911ed, 0x3311395d, 0x84028233, 0x10012df8,
		0x322f32c6, 0x32ce102f, 0x1939112f, 0x2307027f, 0x10c4c487, 0x87200382, 0x200b8453, 0x3312820e, 0x0ec4c405, 0x173031c4, 0x32331616, 0x26263736,
		0x33352327, 0x13410582, 0x07144109, 0x08054d52, 0x36363770, 0x16162337, 0x0e200a39, 0x1c163732, 0x435a1735, 0x580d1d11, 0x8d111b0a, 0x540c170b,
		0x3c0e180c, 0x172b144f, 0x134a5923, 0x0cea082d, 0x0d650b15, 0x0605571c, 0x7334312b, 0x5c2e3c3c, 0x325e272d, 0x2f325a2b, 0x3f3c2d5b, 0x4a503676,
		0x22f0040a, 0x44232243, 0x01000000, 0x5bff2c00, 0xd001af01, 0x82002800, 0x10241040, 0x204d000f, 0x04821020, 0x09821820, 0x79181520, 0x112007ca,
		0xe022088a, 0x1f822f40, 0x090e0523, 0x06504e0e, 0x22090925, 0x822a1382, 0x0008374b, 0x061b1b00, 0x00892829, 0x1c070e0e, 0x18881f1c, 0x8505094b,
		0x58184907, 0x32290f7e, 0x5e2f322f, 0xedde105d, 0x088d5433, 0x20067b43, 0x053f4e37, 0x030e1522, 0x21082a66, 0x62472726, 0x344a0806, 0x2323022e,
		0x2a2c139a, 0x01f40c25, 0x2c250c5b, 0x4226162f, 0x3e211c32, 0x53313456, 0x49141216, 0x1e4c492a, 0x0f223f32, 0x363716c4, 0x30451232, 0x3a3a3514,
		0x29170519, 0x49302c3d, 0x0b101830, 0x41100a46, 0x192c233a, 0xab820009, 0x82002b08, 0x72012102, 0x15009d02, 0x05b71500, 0x00101106, 0x0011050b,
		0xcddc332f, 0xdecd2f01, 0x133031cd, 0x07021e32, 0x23032e23, 0x07820e22, 0x023e2632, 0x212c19fa, 0x01360112, 0x13190e06, 0x060f1813, 0x12340a82,
		0x9d022c21, 0x1d2e2011, 0x0c13170a, 0x0a17130c, 0x11202e1d, 0x0ee7cd18, 0x0f402431, 0x00050704, 0x01024003, 0x04000506, 0x82060280, 0xcd1a2365,
		0x6b820132, 0x07823220, 0x32cd1029, 0x17013031, 0x82272707, 0x29012503, 0x616e2b67, 0x02250382, 0x7d208fb5, 0x82038232, 0x00033dab, 0x010102a7,
		0x002d034d, 0x000f0003, 0xb94f001b, 0xe0ff0f00, 0x11081140, 0x200b4c00, 0x09210583, 0x25058328, 0xd8ffb805, 0x09831740, 0x1610042b, 0x02800040,
		0x00160a02, 0x273a8203, 0x0719130d, 0xdedd2f00, 0x20068173, 0x2207822f, 0x5b1acd1a, 0x2b2807a8, 0x37270701, 0x23061417, 0x2007135d, 0x0a546607,
		0x8d4d012e, 0x32198713, 0x30302321, 0x28322123, 0x34074573, 0x3135eb02, 0x2d26d946, 0x2c26262d, 0x1714262c, 0x18151417, 0x82aa8218, 0x02702aa1,
		0x0284010c, 0x000b00cc, 0x08ab8217, 0x12402722, 0x92151a1a, 0x1b1b090f, 0x18099203, 0x9206121b, 0x2f00000c, 0xde32fd32, 0xed2f01cd, 0xde102f32,
		0x43180482, 0x4a611d61, 0x0c022112, 0x07a94618, 0xc0250787, 0x00020039, 0x207b8289, 0x2e7b846b, 0x401a000f, 0x0f0f0e0b, 0x0c039209, 0x8292060f,
		0x84fd2072, 0x2f332270, 0x236c8dcd, 0x23153327, 0x820ae35d, 0x06cb5d58, 0xd0825082, 0x6b000322, 0x89225382, 0xcf86fb02, 0x0b40662a, 0x0011181b,
		0x10101b4d, 0x21055d50, 0x078514b3, 0x822d4021, 0x18240815, 0x19701a1b, 0x19b019a0, 0x15191903, 0x010f7f92, 0x4092030f, 0x09010970, 0x1980181b,
		0x1a2f1a1f, 0x1a031a3f, 0x33070241, 0x71dc32ed, 0x32cd1a32, 0x1a5d2f01, 0xed5ddeed, 0x335d2f33, 0x6207557c, 0x172b1873, 0x149b2707, 0x15141c1c,
		0x82a91c1c, 0x82152003, 0x55a2230b, 0x0f416328, 0x7eef2311, 0xbf937122, 0x1900b926, 0x3e40f0ff, 0x1821bd83, 0x20ba8215, 0x83bf8310, 0x191831d1,
		0x011b6f1a, 0x1b9f1b7f, 0x1bbf1baf, 0x091b1b04, 0x092ac188, 0x1b801819, 0x1f1a401a, 0xbd8a1a48, 0x2b2f3323, 0x84be8433, 0x821120bd, 0xb47120be,
		0x364423bf, 0xbf922863, 0x22712f22, 0xe630bf8a, 0x17000b00, 0x3a001d00, 0x1a1c1c40, 0x1d1d6018, 0x0f2d9d82, 0x1b099203, 0x1a181c19, 0x1d011d1f,
		0x0956411d, 0x712f3333, 0xcd32ddcd, 0xed2f0132, 0x3912edde, 0xcd1a2f19, 0x0ef54133, 0xff5f3320, 0x1737240b, 0x41071737, 0xe2200f55, 0x4205476d,
		0xb22f1067, 0x28363628, 0x00020055, 0x010b0271, 0x82cc0284, 0x21220893, 0x0c404900, 0x000e1812, 0x0c20124d, 0x034c000d, 0x40e8ffb8, 0x4d000c19,
		0x2110001d, 0x1f100e21, 0xb762011f, 0x2f00220b, 0x09b16233, 0x0c820120, 0x82cd2f21, 0x60dc2010, 0x012005a6, 0x201c9562, 0x207b6201, 0x625c0221,
		0x5e321463, 0x00000039, 0x029c0001, 0x034501c7, 0x0003003e, 0xc282b511, 0x01020329, 0xddcd2f00, 0x822f01cd, 0x07012d7c, 0x45013727, 0x02901396,
		0x463136fd, 0x00272e82, 0x028c0001, 0x826801c1, 0x0005322f, 0x050e4023, 0x03006001, 0x03040501, 0x02800040, 0x2cc58204, 0xcd1add1a, 0x0132cd10,
		0x1a332f19, 0x324182cd, 0x27071713, 0x6efa2707, 0x1a54541a, 0x28553e03, 0x8c283737, 0x40212643, 0x0004050d, 0x253b8260, 0x80010340, 0x7b820502,
		0x32dd1a23, 0x8241841a, 0x31332940, 0x17371330, 0x8c071737, 0x6e204083, 0x2609af6e, 0x02500003, 0x84a40191, 0x000f27b7, 0x402c001b, 0xba820013,
		0x13190127, 0x0a160d07, 0x218e8304, 0x90831002, 0x1a2f3324, 0x91831acd, 0xdccd2f28, 0x332f33cd, 0x528232cd, 0xed419483, 0x0bf9410a, 0x2846e22c,
		0x1c152b54, 0x1c14151c, 0x0382de1c, 0x1d141429, 0x6b3e031d, 0x447f5f22, 0x00200f5d, 0x343c838f, 0x00031740, 0x19070d00, 0x13020201, 0x10160a19,
		0x80030040, 0x04010102, 0x332f0010, 0xd5827a82, 0x0c828986, 0x8d841020, 0x01303126, 0x17372707, 0x21208b8a, 0x01250b8a, 0x4828564a, 0x06da435f,
		0x82f9fe21, 0x82142089, 0x1003250c, 0xad6b225f, 0x00208d90, 0x17438f8a, 0x3c240805, 0x0f151a40, 0x40031d0f, 0x1a1c0909, 0x1c1d6018, 0x191b4018,
		0x1d1d1a80, 0x000c0612, 0xcd322f00, 0xcd2f3332, 0x270a6d41, 0x1833cd33, 0x11cd1a2f, 0x43100f45, 0x81201119, 0xde208b86, 0xe2279c86, 0x1a39391a,
		0x8f910253, 0x28852795, 0x42282323, 0x47770000, 0x023e3308, 0x00280026, 0x00070100, 0x000e0043, 0xb9130089, 0x16190100, 0x1a201b9f, 0x83252f88,
		0x8b001200, 0x05237700, 0x0d40f92e, 0x0a00200e, 0x18010250, 0x0c01014f, 0x3606e864, 0xff120001, 0x02cc01fe, 0x0024006b, 0x171f4079, 0x4d001220,
		0x82102017, 0x0f182604, 0x28124d00, 0x21048212, 0x04821018, 0x0e822020, 0xb8042e08, 0x2d40e8ff, 0x4c000a09, 0x76142323, 0x0f1c2605, 0x020d1f0d,
		0x73240d0d, 0x08011f00, 0x2425201f, 0x1c21791f, 0x02007c19, 0x1e412102, 0xaa901844, 0x393f3207, 0x32ed332f, 0x0132ed10, 0x5eddd610, 0x2f32ed5d,
		0x05d76e5d, 0x21080b57, 0x09553613, 0xe9451806, 0x0914620a, 0x35234c08, 0xb9231521, 0x63582b2d, 0x2b3f2a15, 0x030b1b0d, 0x310d0f05, 0x291e1133,
		0x15271318, 0x65015552, 0x0d7801be, 0x45275d6c, 0x02011e34, 0x46010141, 0x20332634, 0xfe06070d, 0x462502cd, 0x00ffff46, 0x01000036, 0x023e03cc,
		0x82c60226, 0x00072509, 0x0047008f, 0x2805c77d, 0x080a0c44, 0x01015002, 0x06047c0b, 0x26000136, 0xcc01f3ff, 0x26007902, 0x0c40d900, 0x0e0d1025,
		0x181f4c00, 0x18053756, 0x5d081b43, 0x1a21054d, 0x05774eb8, 0x2c581120, 0x24078206, 0x0011b3e0, 0x2207824d, 0x840cb3d8, 0xb3e02207, 0x2207840b,
		0x840ab3e8, 0xb3f02507, 0x104d0009, 0x10232f83, 0x86094d00, 0x20078237, 0x823783e8, 0xb4e02607, 0x4c000c0b, 0x82188602, 0x82188407, 0x40e02207,
		0x3c31821f, 0x03030e0e, 0x0f0c2818, 0x0e272276, 0x000d0d79, 0x7c121717, 0x0404461d, 0x45007c07, 0x05407400, 0x112f3224, 0x4d6c2f39, 0x0864410b,
		0x24085a5d, 0x32012b2b, 0x05e24c16, 0x07020e27, 0x16231533, 0x5c611816, 0x0144080f, 0x12553d27, 0x31461115, 0x192d412b, 0x07e5e404, 0x28135560,
		0x15081d24, 0x36291b07, 0x45603921, 0x5e442426, 0x0b1d7902, 0x1f180940, 0x462f4e37, 0x0b077867, 0x0542060c, 0x2b090e0d, 0x4e4e7852, 0x002b5278,
		0x0a577118, 0x40d80033, 0x0e182c0b, 0x102c4d00, 0x274d000d, 0xb3e8ffb8, 0x2207840a, 0x4f09b3f0, 0xb32005b0, 0x2005b84f, 0x201783d0, 0x23ff8323,
		0x1b4d000f, 0xba572783, 0xb3e02405, 0x184d0012, 0x200a8b42, 0x4fa518f0, 0x55b42007, 0xe821064b, 0x255d82b3, 0xe0ffb813, 0x08823e40, 0x0e100b2d,
		0x0b4c000f, 0x000a0920, 0x8210024c, 0x28012142, 0x152c3f82, 0x26760315, 0x1c2e2e33, 0x100d0076, 0x82e76419, 0x14194208, 0x422d2b47, 0x1a2c2113,
		0x192e3f26, 0x3a21666e, 0x1809222d, 0x303a4f14, 0x1f291d30, 0x1e0c0a17, 0x51253628, 0x0e0a075b, 0x190c4607, 0x241a2d2d, 0x100b161b, 0x2b3c2c20,
		0x0e095751, 0x0b46060e, 0x055f461f, 0x005a2308, 0x029b0100, 0x000b006b, 0x0815402b, 0x020b0605, 0x06067301, 0x07000d0c, 0x01410979, 0x44047906,
		0x905a3f00, 0x12112605, 0xcdfd2f39, 0x052c4b32, 0x33112008, 0x33352115, 0x21352311, 0x78230115, 0x7777bffe, 0x25024101, 0x464621fe, 0x4646df01,
		0x8400ffff, 0x1a032557, 0xb9022602, 0x07226182, 0x6e828300, 0x17008b32, 0x01021040, 0x04200e00, 0x09025002, 0x09014f18, 0x54074c44, 0xa4200823,
		0x13318b82, 0x17404a00, 0x100f1810, 0x180a4c00, 0x0a4d000e, 0x828f8220, 0x000b3a0a, 0xffb8054d, 0x111640f0, 0x124c0012, 0x00150373, 0x0c140b00,
		0x087c0f0c, 0x368d1846, 0x2f322208, 0x05826101, 0x2307385a, 0x11213513, 0x350d7953, 0x25017f11, 0x3c4f2f13, 0x2113523c, 0x402a3f13, 0x4625023f,
		0x1e545cfe, 0x5601210a, 0x00278e82, 0xff090002, 0x82de01f7, 0x001c278f, 0xb9560028, 0x7a820100, 0x0b0c3108, 0x254c000d, 0x0b0a7319, 0xb8181873,
		0x1f40c0ff, 0x0a480c09, 0x11180a18, 0x2a037620, 0x7c232911, 0x0b1d0000, 0x11411879, 0x1d46107c, 0x0046067c, 0x6f055463, 0xc63d05a7, 0x11edde10,
		0x2f2f3939, 0x10ed102b, 0x303132ed, 0x1632012b, 0x23061415, 0x11272622, 0x08a58223, 0x3e27075a, 0x15333505, 0x32133636, 0x26343536, 0x15072223,
		0x51011616, 0x4d494845, 0x441a3017, 0x363b1b05, 0x121b1409, 0xd801040a, 0x23061008, 0x0d22251f, 0x0110080c, 0x5f61648c, 0x0208086f, 0x7acca01c,
		0x06490e3a, 0x774c2f18, 0x01e173a8, 0x3cb3fe01, 0x03403f4c, 0x000203ff, 0x2d22cf82, 0xcf84f9ff, 0x00162708, 0xb94f0023, 0xe8ff0200, 0x000d2840,
		0x7321144d, 0x0d090911, 0x2503761a, 0x0d730c10, 0x1d411224, 0x790b007c, 0x01820010, 0x410e0d25, 0x8617440d, 0x123f21c7, 0xba83bb83, 0x10013f25,
		0x8432edd6, 0x332f21cd, 0x1122c890, 0x28581123, 0x8dc78905, 0x497124c8, 0x864a7149, 0x0d0622c0, 0x21c18206, 0xc1845f87, 0xfe2c0128, 0xf06b02cb,
		0xba82e6f0, 0xba82b820, 0xfb023b22, 0x0034ba83, 0x00120001, 0x02bf0100, 0x0019006b, 0x1400b96b, 0x0cb3e8ff, 0xb824b882, 0x0bb3f0ff, 0xe8200784,
		0x28060659, 0x092c40e0, 0x18024d00, 0x08048212, 0x0011282b, 0x1873194d, 0x08010d0f, 0x1b180d0d, 0x09730e06, 0x44191a0a, 0x12127c03, 0x79090e08,
		0x4408410b, 0xed3f3f00, 0x2f391232, 0x20d083ed, 0x25d182dd, 0x5e2f32ce, 0x3b42105d, 0x252b2307, 0x5e682634, 0x35232506, 0x15231521, 0x08065c68,
		0x0123152f, 0x1a33286c, 0x55520b33, 0x0ebe6501, 0x3f301d38, 0xa7530f25, 0x040a4653, 0x2502cefe, 0x05ae4646, 0x53381c09, 0x0000a737, 0x00ffff00,
		0x26bb8240, 0x023e03eb, 0x822e0026, 0x00072209, 0x4713828f, 0xe82a068b, 0x17190940, 0x01500810, 0x46461800, 0x181b8206, 0x21087b42, 0x2f84cb02,
		0x04004322, 0x28067346, 0x00131500, 0x01015009, 0x822c8514, 0xff092a2b, 0x03ee01f8, 0x02260223, 0x212b83d6, 0x72829003, 0xe7478b20, 0x40fe2a05,
		0x0b312909, 0x0b015015, 0xbff01826, 0x31290809, 0xc6015bff, 0x0b006b02, 0x16402c00, 0x09097306, 0x0573020a, 0x0a73010d, 0x410b030c, 0x79010608,
		0x3f00440a, 0x3fce33ed, 0x09066633, 0x3031ed25, 0x82331113, 0x15233701, 0x11233523, 0xa453f083, 0x6b02a34e, 0x2502dbfd, 0xa5a595fd, 0xd3596b02,
		0x2400210b, 0x362af384, 0xc301fbff, 0x06026b02, 0x0f8adb01, 0x06027124, 0xa1822500, 0x57470120, 0x33878205, 0x40250009, 0x060b0312, 0x00730506,
		0x00050a09, 0x04440879, 0x8208fe57, 0xd5240882, 0x102f32ed, 0x373031ce, 0x23152111, 0x21153311, 0x3d018f35, 0xcffe86eb, 0x46250246, 0x464621fe,
		0x12000200, 0xd920d382, 0x22084b82, 0x00190010, 0x11144065, 0x730b0a73, 0x010a0019, 0x0a190a08, 0x73100419, 0xb8171b0d, 0x11b4d8ff, 0x824c0012,
		0xb3e82408, 0x824d0010, 0x40f02307, 0x08820f16, 0x0004043a, 0x111a0373, 0x17410a79, 0x0f79040c, 0x00440001, 0xed32cd3f, 0xed3f3232, 0xed277e82,
		0x2b332f33, 0x43102b2b, 0x5e3106b7, 0x10ed105d, 0x333031ed, 0x33352315, 0x3737033e, 0x08928221, 0x03352334, 0x07030e07, 0x4e601133, 0x11242324,
		0x01030305, 0xa44e2719, 0x0f060202, 0xa5cb1b1e, 0x796d30eb, 0xfd434884, 0x02a5ebdb, 0x6c324325, 0x012d666b, 0xa34900df, 0x6b022f08, 0x28000602,
		0x01000000, 0x00000400, 0xc782f101, 0x002d4e08, 0x1b4c408a, 0x10210027, 0x27210221, 0x2678272c, 0x26261421, 0x732c1821, 0x0c120601, 0x78121512,
		0x11140c11, 0x01150c11, 0x1c1c0701, 0x2601269f, 0x0711112f, 0x4427262e, 0x18411b1c, 0x2c0c1515, 0x0c210101, 0x1241160c, 0x06074111, 0x21d18344,
		0x0182333f, 0x22052c53, 0x83113311, 0x01332c0c, 0x2f33c610, 0x325dce10, 0x1839112f, 0x250848cc, 0x10183311, 0x8e5532ed, 0x5d012305, 0xea823311,
		0xdb821120, 0xeb822320, 0x27032e26, 0x17161633, 0x36233e82, 0x82333736, 0x031e2314, 0x14822317, 0xd5116c08, 0x1c202314, 0x220c520c, 0x12152b28,
		0x12232322, 0x1f391d52, 0x1d3a1e4a, 0x22241252, 0x2b151222, 0x530c2229, 0x24201c0c, 0x182d0113, 0x28565146, 0x4e585e2b, 0x4542221b, 0x854d2c4c,
		0xfe0b0139, 0x4c8439f7, 0x42454c2c, 0x584e1b22, 0x55282b5e, 0xfe184651, 0x000100d4, 0x01f4ff26, 0x007602d1, 0x40b90034, 0x10183015, 0x832c4d00,
		0x20252f04, 0x254d000e, 0x4d000d10, 0xd0ffb81f, 0x078412b3, 0x11b3d822, 0xe0220784, 0xfd4708b3, 0x07ee4105, 0x2083e020, 0x0e481720, 0x42132006,
		0x08820707, 0x3640e030, 0x4c000a08, 0x1211200e, 0x10044c00, 0x0582100f, 0x0e182308, 0x06184d00, 0x2e151576, 0x34361d76, 0x270d0d34, 0x79341835,
		0x28100000, 0x227c2b28, 0x090c0c46, 0x2e49107c, 0x1fbc7e0d, 0x32331322, 0x2107cd58, 0x3e442707, 0x18142006, 0x23074668, 0x022e2223, 0x080c5b53,
		0x1e218d84, 0x43223540, 0x144f3036, 0x3860171b, 0x1e364b2c, 0x311b3637, 0x3f221626, 0x3b223658, 0x190a2431, 0x48395415, 0x49362056, 0x6a012a29,
		0x20291809, 0x0b153329, 0x13160f41, 0x2b293d27, 0x1a07114c, 0x32243628, 0x0a142c45, 0x42050f0e, 0x3e351d0b, 0x0a1a2f24, 0x37000100, 0xbd010000,
		0x11006b02, 0x2f404c00, 0x08490829, 0x01080a02, 0x11251105, 0x0c110802, 0x08037811, 0x08030314, 0x1309730c, 0xee827303, 0x0002002e, 0x44110312,
		0x080c440b, 0x00410241, 0x09275c18, 0xde10ed23, 0x071d42ed, 0x5d5d3108, 0x11333031, 0x033e1133, 0x23113337, 0x07030e11, 0x301e4b37, 0x54293d33,
		0x38351c4b, 0x6b02223c, 0x6f4924fe, 0xfd4b7069, 0x35ee0195, 0x53877669, 0x2208db44, 0x44260223, 0xaf4405db, 0x40102c06, 0x1500010b, 0x5009001d,
		0x44120101, 0x402008db, 0xeb27b382, 0x06026b02, 0x82002e00, 0x0d00250a, 0xc701f7ff, 0x1529c382, 0x0cb55a00, 0x4d000d10, 0x06ed4a06, 0x82074a7f,
		0x05185f07, 0x18820520, 0x121c403c, 0x73004d00, 0x08011100, 0x14091111, 0x09171373, 0x00441416, 0x09411179, 0x9747087c, 0x10012106, 0x22059247,
		0x455d5e2f, 0x132307f3, 0x82070606, 0x362727ca, 0x033e3736, 0xd8822135, 0x03ee2a08, 0x1e0b160c, 0x0926392b, 0x0a14302c, 0x0103070d, 0x25025229,
		0x2851b466, 0x021f3446, 0x45410748, 0x766c5e24, 0x0295fd3b, 0x82a68225, 0x822020e3, 0x84d420ac, 0x003024b7, 0x7effff00, 0x0f8405f3, 0x0f842b20,
		0xf3ff1d26, 0x7902d801, 0x3220d782, 0x2d20d784, 0xd7832f82, 0x20000731, 0x73001040, 0x73030907, 0x79020804, 0x43044105, 0x894405bb, 0xde102105,
		0x8f83a282, 0x21112335, 0xf6750111, 0x029a0152, 0x02dbfd25, 0xff95fd6b, 0x844900ff, 0x82712043, 0x84332053, 0x4c2e2063, 0x0f82058b, 0x0f842620,
		0x1f822720, 0x8384cd20, 0x73843720, 0xff095408, 0x02ee01f8, 0x0025006b, 0x1d00b974, 0x0eb3f0ff, 0xb81b4d00, 0x3b40f0ff, 0x034d0008, 0x4d000d18,
		0x1411141a, 0x141a1578, 0x061a1515, 0x000a0910, 0x110c064c, 0x060b780c, 0x060b0b14, 0x27150b11, 0x260b2222, 0x0606111a, 0x1f7c000b, 0x41141546,
		0x57410b0c, 0x12240698, 0x33331139, 0x22058649, 0x423911ce, 0x2b20062e, 0x68068157, 0x372d055c, 0x37023e32, 0x27032e37, 0x17031e33, 0x054f4436,
		0x08057751, 0x16163749, 0x1d241871, 0x25080b17, 0x11323d46, 0x2f290f5a, 0x40251833, 0x2714591b, 0x12142727, 0x31473326, 0x0f082d14, 0x0d3f200b,
		0x0e132016, 0x6d7a7f3a, 0x635c2628, 0xb9592e63, 0x636c3f64, 0x4e2a305d, 0x0509243c, 0x82080546, 0x000322e7, 0x34f7822a, 0x009302d4, 0x001c0015,
		0x40970021, 0x0d102111, 0x1e4c000e, 0x21ef8218, 0xe682101e, 0xe821f482, 0x241283b4, 0xe8ffb818, 0x821582b3, 0x40f02207, 0x2119821b, 0x0482181d,
		0x0e062029, 0x11031973, 0x831d0011, 0x761d2431, 0x82162309, 0x26402127, 0x28083183, 0x001f7616, 0x50004001, 0xc0007000, 0x0500d000, 0x0001002f,
		0x7c192022, 0x4410110e, 0x067c1a1f, 0x2f000403, 0x32ed32dd, 0x2b04833f, 0x5dd61001, 0x2bed715d, 0x2bedd610, 0x6507aa6f, 0x132608d2, 0x35373634,
		0x60781533, 0x075c0805, 0x2e352315, 0x16143703, 0x06061117, 0x11273405, 0x50612a36, 0x19614f49, 0x4927412f, 0x192f4128, 0x32322d52, 0x5e06012d,
		0x764c015e, 0x4a4a0b7c, 0x3b767c0b, 0x06243f5a, 0x24064e4e, 0x523b5a3f, 0x72010b5c, 0xa0515d0b, 0x1790fe18, 0x00ffff00, 0x01000019, 0x026b02db,
		0x003b0006, 0x00210a82, 0x062f472d, 0x28000b3f, 0x73031440, 0x07730a06, 0x0b73020d, 0x7902060c, 0x04440b09, 0x3f004100, 0xedce3f32, 0x2ab28232,
		0xedde10ed, 0x3031edd5, 0x84113313, 0x289a8201, 0xe1522d21, 0xfe4e2752, 0x060148a2, 0xa5ebdb23, 0x05cf4700, 0x6b02bf30, 0x4d001700, 0x30131040,
		0x134d000a, 0x04820918, 0x18082821, 0x3c0d0582, 0x00111740, 0x730c084d, 0x7300190b, 0x7c051815, 0x160c1010, 0x09440c41, 0x3f3f0041, 0x05254b3f,
		0x7483d620, 0x7c4e3220, 0x5d132006, 0x3322070e, 0x225e2311, 0x35280806, 0x0b893335, 0x2024301c, 0x52520e3b, 0x3c23420f, 0x53102b4c, 0x3926b801,
		0x040a1226, 0x95fd3c01, 0x1f0905e8, 0xb333523a, 0x0482eb84, 0x9782c720, 0x2e000b2c, 0x73061740, 0x070b0303, 0xed870a73, 0x08440b23, 0x20ee8504,
		0x0573672f, 0x11227a84, 0xf18a2f39, 0x2128f782, 0x4b5d4b2d, 0x66fe4b5c, 0x0127f183, 0x02c6fe3a, 0x8295fd25, 0x074741f3, 0x41000f24, 0x5b832540,
		0x73070f3a, 0x0a5f0a4f, 0x0abf0aaf, 0x730e0a04, 0x7302110b, 0x060a100f, 0x0f0d7902, 0xce21698b, 0x05d06ced, 0xedde1025, 0x90ed5dd5, 0x1533236e,
		0x72823523, 0x524b5223, 0x0766414b, 0xdb2b7486, 0x0000a5eb, 0xff120002, 0x82cc01f9, 0x00132ed3, 0x40800024, 0x0f20231f, 0x18224d00, 0x25048210,
		0x4d000e10, 0x09823017, 0x82201721, 0x28162109, 0x12211882, 0x05314fb8, 0xf02a0782, 0x4d0009b3, 0xd8ffb802, 0x078412b3, 0x11b3e022, 0xf03c0784,
		0x0a091b40, 0x76144c00, 0x0c1c2600, 0x250a0973, 0x0f0f7c19, 0x0c790920, 0x057c2041, 0x41052945, 0xdd220699, 0xb48232ed, 0x200c1750, 0x065c4d25,
		0x3523112a, 0x33361533, 0x07021e32, 0x50077f51, 0x4608051c, 0x3a22cc01, 0x421f2e4f, 0x19b05e22, 0x394f3019, 0x26145420, 0x14092134, 0x0c180d0a,
		0x1424311c, 0x2f4d38c2, 0x02080815, 0x03e2461c, 0x364d3017, 0x0d1e3326, 0xfefe0101, 0x1e0d0102, 0x00000032, 0xff240003, 0x82d001fa, 0x000e30ef,
		0x0021001d, 0x1c2a4045, 0x00121110, 0x8318124c, 0x0f250805, 0x01000f76, 0x73210008, 0x18092320, 0x21220673, 0x14411e44, 0x070c0c7c, 0x037c1b41,
		0xed3f0043, 0xed2f393f, 0x07b04c3f, 0x45defd21, 0x252006e9, 0x8206754d, 0x20b482b3, 0x20b38716, 0x08b38315, 0x3313363b, 0x47012311, 0x411a535b,
		0x140b4e1a, 0x515a520a, 0x1c26160a, 0x0c0a1008, 0x29300a15, 0xc24e4e8c, 0x08076464, 0x02e36202, 0x1e636702, 0x02132330, 0x0203fe02, 0xfdeb0141,
		0x05674d95, 0xcc01fa22, 0x1f32af84, 0x1b405800, 0x100f301d, 0x181d4c00, 0x124d000e, 0x04821040, 0x820f3021, 0x2d0e8304, 0xe0ffb80e, 0x4d0008b3,
		0xe8ffb801, 0x08821640, 0x00760f23, 0x20c58321, 0x4dc19020, 0x7b410770, 0x22c08a08, 0x86323332, 0x072222c0, 0x07744111, 0x25808339, 0x11522552,
		0x80881222, 0x44301b54, 0x11201128, 0x211c260f, 0x821c2e3d, 0x090634bc, 0x02e16202, 0x33266664, 0xfe020d1f, 0x0d0102fd, 0x8200321f, 0x00013b00,
		0x01f3ff2e, 0x007902d5, 0x40a50026, 0x12282554, 0x20254d00, 0x4c001110, 0x0a82181e, 0x09821e20, 0x201e4d33, 0x1e4d000d, 0x000c0b18, 0x1008174c,
		0x10164d00, 0x21048212, 0x04821118, 0x19823820, 0x28830d20, 0x28830d20, 0x10200d2c, 0x180d4d00, 0x4c000f0e, 0x19821807, 0x82100321, 0x83022004,
		0x0e1f3cea, 0x181b4d00, 0x24280576, 0x0f191924, 0x1a791927, 0x1010001a, 0x460a7c15, 0x52202323, 0xc6261190, 0x2f322f32, 0x4c62de10, 0x2b2b2212,
		0xf0431813, 0x022e2308, 0x0e6b3727, 0x234f0805, 0x032e3335, 0x07062223, 0xd4363627, 0x25435f3a, 0x39604527, 0x1c293521, 0x1d081507, 0x55132824,
		0xe5e60761, 0x412d1a04, 0x1146312b, 0x02551215, 0x79522979, 0x5179504f, 0x0d0e0929, 0x0c064205, 0x6c73070b, 0x374e2f46, 0x4009181f, 0x41001d0b,
		0xf33205d3, 0x7902d901, 0x2c001800, 0x10b68600, 0x00121128, 0x4a430c4c, 0x21078206, 0xff82b3e0, 0x0f860620, 0xe0220782, 0x10821b40, 0x83200321,
		0x6d022026, 0x092a0564, 0x76234d00, 0x76192e09, 0x38501301, 0x00133b07, 0x2d167315, 0x000f7914, 0x0002001f, 0x41171600, 0x7c1e4416, 0x7c28460e,
		0x38504504, 0x123f2d05, 0xed5d2f39, 0xfdd61001, 0x322bde32, 0x0d099f18, 0x76331321, 0xfe820beb, 0x23112324, 0x30453311, 0x3e210805, 0x2e343502,
		0x0e222302, 0x053d7b02, 0x36243f4a, 0x26141326, 0x34222237, 0x3c011424, 0x088b4e4e, 0x2e891810, 0x9266350e, 0x7b4e2481, 0x4e7a5756, 0x72482224,
		0x02e0fe51, 0x37cbfe6b, 0x0f288918, 0x00022108, 0x01000039, 0x007102ca, 0x002b001c, 0x1f00b996, 0x6240f8ff, 0x094d000e, 0x00100f30, 0x0a10094c,
		0x18300a82, 0x4c000908, 0x00101007, 0x0f18074d, 0x38064d00, 0x06211482, 0x27fe8230, 0x00083806, 0x1210044d, 0x37080482, 0x4d001108, 0x0500051c,
		0x141c1778, 0x17171c17, 0x11731228, 0x2200002d, 0x01080076, 0x172c0808, 0x28791305, 0x44120b28, 0x410b7c1d, 0x0044001c, 0xed3f323f, 0x2f39123f,
		0x26053945, 0x33ed5d5e, 0x82de102f, 0xfc75180c, 0x336d0813, 0x2637033e, 0x36343526, 0x021e3233, 0x35231117, 0x27222223, 0x1307030e, 0x15020e22,
		0x33021e14, 0x26263533, 0x24240f39, 0x3c340f23, 0x28106f72, 0x520f2729, 0x07140347, 0x2222210e, 0x311b9c0f, 0x29161625, 0x0a36233a, 0x444a242a,
		0x5619173c, 0x0262613a, 0xfd040603, 0x1501f39e, 0x21444139, 0x1d0c2b02, 0x2e262430, 0x02ef091a, 0x9b4f1803, 0xdb012307, 0xa8820602, 0x34052b42,
		0x02cc01f4, 0x002200b5, 0x40a10035, 0x0f183015, 0x10304d00, 0x2e59180e, 0x6d26200b, 0x2120072e, 0x402c0882, 0x4d000913, 0x000a0813, 0x10180d4d,
		0x08270483, 0xb8094d00, 0x82b3c0ff, 0x4408200c, 0x05240622, 0xb3d8ffb8, 0x04201782, 0x17820783, 0x40210783, 0x3c37821e, 0x1b06822d, 0x0037061b,
		0x36108235, 0x00893235, 0x1b280303, 0x284d1a88, 0x00510b88, 0xd82c193f, 0x32ed250b, 0x2f32ce10, 0x2009db50, 0x2000862b, 0x0acb7513, 0x35022e33,
		0x37023e34, 0x1737033e, 0x0607030e, 0x1e140706, 0x0bc97502, 0x1a867f08, 0x64632144, 0x36503319, 0x122e4f3e, 0x50653a15, 0x161c2319, 0x0e06090c,
		0x561f2718, 0x1b0a0f5c, 0x3021252f, 0x1e0c0f1e, 0x3f242632, 0x169b0112, 0x2f6d7a18, 0x2f274256, 0x4e3c6b50, 0x0c436685, 0x03040504, 0x03024803,
		0x0b030503, 0x4c2aec59, 0x2e1b223b, 0x3b1e223d, 0x17231c2d, 0x00030000, 0x01f8ff47, 0x00dc01c3, 0x001b000e, 0xb9800032, 0xe8ff3000, 0x000b0ab4,
		0xffb8304c, 0xef82b3e0, 0xe8260782, 0x4d0008b3, 0x1882b826, 0x000d0c23, 0x2208824c, 0x840bb3f0, 0x40e02810, 0x4d000a2d, 0x82121006, 0x08220804,
		0x2b4d0011, 0x28288212, 0x342e8208, 0x007f001b, 0x1f08011f, 0x860e2b33, 0x17031b1b, 0x03502388, 0x20411c88, 0x39ed2708, 0x5ed61001, 0x4718ed5d,
		0x37201133, 0x27054e45, 0x022e3435, 0x32372323, 0x0829a718, 0x22131524, 0x48182726, 0x4c18086f, 0x7008077f, 0x1a340a98, 0x15232f1a, 0x192c2013,
		0x3f305661, 0x162c2315, 0x550e2815, 0x1a1a5636, 0x46243656, 0x1d222136, 0x3a212e26, 0x03023f4e, 0x171e1207, 0x07121e16, 0x15291d3d, 0x02040e19,
		0xe6fe8301, 0xc401060a, 0x1e0c0a06, 0x2f232632, 0x30330e0e, 0x0e21382a, 0x6b000100, 0xb8010000, 0x0500d001, 0x0c401a00, 0x7f050703, 0x85040600,
		0x4a004901, 0x0f4a1800, 0x31ce3a07, 0x21113330, 0x6b112315, 0x01fb4d01, 0x75fe45d0, 0x00020000, 0x017fff1b, 0x083782d0, 0x17000f46, 0x00b94d00,
		0xb3f8ff15, 0x154d0009, 0x40e8ffb8, 0x4d000822, 0x06068212, 0x087f1001, 0x19097f0c, 0x0d018217, 0x0b18007f, 0x0108170e, 0x124a0d85, 0x00490685,
		0xed3fed3f, 0x32cd3232, 0xedd61001, 0xde10edd5, 0xab480482, 0x2b2b2505, 0x033e3337, 0x8206fb50, 0x252e0875, 0x0e142311, 0x241b0702, 0x0611221e,
		0x27120101, 0x4ee7fe4e, 0x08713c01, 0x46172013, 0x69615a2b, 0xc776fe3b, 0x01c78181, 0x56592845, 0x537f1f4f, 0x01c72708, 0x000602db, 0xde820048,
		0x82070021, 0x82eb2004, 0x314f08ab, 0x5f40a800, 0x0b100b00, 0x060b0b02, 0x81111611, 0x10140b10, 0x050b0b10, 0x06810500, 0x0606140b, 0x2924240b,
		0x811e191e, 0x1f14241f, 0x2a24241f, 0x29812a2f, 0x29291424, 0x16002f24, 0x1f19197f, 0x33100606, 0x321f2929, 0x242f2f00, 0x82191916, 0x30182f2e,
		0x492a2949, 0x184a1e1f, 0x4a11104a, 0xd9820506, 0x333f3323, 0x2602823f, 0x39123f33, 0x4a333311, 0xb04c05da, 0x2f322106, 0x3221e483, 0x05b64c33,
		0x10188726, 0x7d08872b, 0x8708c477, 0x5d01260f, 0x3e013031, 0x0b075103, 0x35231522, 0x080a2951, 0x17031e62, 0x1e013335, 0x1a1b1c0c, 0x2310530a,
		0x15102424, 0x0e252a2c, 0x211e0a52, 0x10490f23, 0x0a1e2123, 0x2a260e52, 0x2410152b, 0x520f2324, 0x1c1c1a0a, 0x0d01490c, 0x32343315, 0x3a391a15,
		0x3b141637, 0x1a1f4642, 0x1434393a, 0x3414d6d5, 0x1f1a3b39, 0x143b4246, 0x3a3a3716, 0x35331519, 0x00c51533, 0x01350082, 0xf5ff4800, 0xdc01bf01,
		0x8b002c00, 0x281f0b40, 0x1f4d0012, 0x05485a20, 0x6f08405a, 0xe02a0772, 0x4d0008b3, 0xe8ffb806, 0x07840cb3, 0x0bb3c822, 0xe0300784, 0x000a2840,
		0x82260d4d, 0x821d0808, 0x21212e10, 0x163b5882, 0x2d160801, 0x2286210d, 0x17170322, 0x5113881a, 0x88292c2c, 0x3f005003, 0x6a2f32ed, 0xed2606f9,
		0xc6100139, 0x9b475d5e, 0x18332006, 0x200c7cad, 0x09994613, 0xa2180720, 0x36240d9a, 0x23263435, 0x0b42e218, 0x21564508, 0x4626274f, 0x160e2036,
		0x33260c19, 0x573c6171, 0x4e0f1112, 0x3c3c4237, 0x335c6233, 0x1c3c3832, 0xc4011a49, 0x200d0d0b, 0x20122633, 0x0e04121a, 0x49433035, 0x05460812,
		0x24202613, 0x1d22422a, 0x0c0e241f, 0x3f08b282, 0x003f0001, 0x01b60100, 0x001100d0, 0x24314050, 0x11490108, 0x11791159, 0x01113803, 0x1101112b,
		0x84080308, 0x0c14110c, 0x7f03110c, 0x7f0c1300, 0x08010900, 0x11031209, 0x0c490b49, 0x4a024a08, 0x2109e550, 0xe6505d5e, 0x315d230d, 0xe0500130,
		0x50232005, 0x013905ee, 0x3b1b51b6, 0x4a15363b, 0x3a361750, 0xd0011c3a, 0x620130fe, 0x5e615c22, 0x280a8225, 0x5b5b27b2, 0xff001e53, 0x258f85ff,
		0x26029802, 0x9982eb02, 0x90030622, 0x1030a682, 0x0b010b40, 0x00091d15, 0x12000150, 0x342b2b4f, 0x47202782, 0xde261d82, 0x0602d001, 0xc7841501,
		0xf7ff0d24, 0xc782ad01, 0x5200152b, 0x180c1240, 0x4c00100f, 0x2405850b, 0x4d000b20, 0x07c35207, 0xe03a0882, 0x0d0c1940, 0x7f004c00, 0x14091111,
		0x0917137f, 0x004a1416, 0x09491185, 0xdc440885, 0x503f2005, 0xdf5008e1, 0x0e142f08, 0x06060702, 0x36362707, 0x34023e37, 0xd9822135, 0x03eb2408,
		0x140a0c07, 0x2c0c4c52, 0x0d0d0f33, 0x53120106, 0x431e8b01, 0x391c4143, 0x08460852, 0x4c1e2331, 0x82255454, 0x828b20e3, 0x0100279e, 0x00001b00,
		0x9f82d901, 0x00244f08, 0x5a4b407c, 0x02106a10, 0x103b102b, 0x1003104b, 0x841f1a1f, 0x0d14100d, 0x64171a10, 0x0a52010a, 0x440a3401, 0x0a23020a,
		0x00200a01, 0x0a0d8420, 0x0a0d0d14, 0x8217030d, 0x00261611, 0x04098203, 0x49101a25, 0x1f490a00, 0x1720200d, 0xb76f4a04, 0x069c5405, 0xed32d627,
		0x32de1032, 0x084050ed, 0x00825d20, 0x8733112d, 0x7d872b18, 0x5d5d01c4, 0x82133031, 0x3e2327c5, 0x16333703, 0xcc821716, 0x1e334308, 0x26231703,
		0x030e2726, 0x032e2307, 0x03010877, 0x09070150, 0x134d060b, 0x35292834, 0x0b064c14, 0x50020609, 0x0d070303, 0x0f161315, 0x13160e52, 0x5b560115,
		0x76374ead, 0x30357678, 0x90646490, 0x0a823530, 0xb44e372c, 0x38351f54, 0x3f2a2a3f, 0xef853538, 0x00004724, 0xef82ad01, 0x000b2308, 0x09204039,
		0x0d007f01, 0x007f0408, 0x0c050105, 0x8503490a, 0x081f080f, 0x08080802, 0x05490605, 0xc482014a, 0x123f3f2b, 0x5d5e2f39, 0x10013fed, 0x055346d6,
		0x30313233, 0x23352321, 0x33112315, 0x33353315, 0xc053ad01, 0x25028253, 0xd001cdcd, 0x6382bdbd, 0x079b4218, 0x02db0125, 0x82520006, 0x00012110,
		0x07247387, 0x14402600, 0x09207282, 0x08247184, 0x85030805, 0xed206789, 0x2205b646, 0x83edde10, 0x23112160, 0x21200182, 0x01255c84, 0xfe8b0166,
		0x2bb28275, 0xffff0000, 0x5bff4700, 0xda01cc01, 0x53205b82, 0x31240f84, 0xc301f5ff, 0x46206b84, 0x3a206b84, 0xba20df82, 0x6b832c82, 0x03011332,
		0x0400067f, 0x04040801, 0x05020809, 0x04490785, 0xed22d283, 0xd3780132, 0xfdce2505, 0x013031ce, 0x6c82c982, 0xba013528, 0x01975297, 0x6a8245d0,
		0x82458b21, 0xffff264a, 0x58ff2400, 0x82d68201, 0x825c206b, 0x00032210, 0x2d7b821a, 0x00b502da, 0x000d0006, 0xb99a0027, 0x1e771f00, 0xb81f2b05,
		0x1a40f8ff, 0x0c4d0011, 0x04821020, 0x0f0e2828, 0x28084c00, 0x0582100f, 0x000e2028, 0xffb8054d, 0x1882b3d0, 0xe0210782, 0x241b83b4, 0xd8ffb802,
		0x821e83b4, 0x40d02208, 0x08228229, 0x00820a2b, 0x22080122, 0x7f27071d, 0x15820010, 0x1010031a, 0x1c1b2829, 0x88040d4d, 0x07491a1d, 0x10278803,
		0x004b0f4c, 0xed333f3f, 0x84038532, 0x333328c2, 0xfd10eddd, 0x53dd3232, 0x2b2009f2, 0x6f510083, 0x17300806, 0x34353636, 0x23112726, 0x35032e35,
		0x37023e34, 0x1e153735, 0x0e141503, 0x3d6c0702, 0xb23d2c2c, 0x2c3e3e2c, 0x34432649, 0x43341e1e, 0x44264926, 0x442d0883, 0x554ee826, 0x024a0102,
		0x5502f355, 0x2f0a824e, 0x01a2cefd, 0x37573c20, 0x203c5737, 0xe20ed401, 0x002f0c89, 0x1d00ffff, 0xd8010000, 0x0602d001, 0x82005b00, 0x4700210a,
		0x3f06a747, 0x402e000b, 0x007f0918, 0x0d017f04, 0x05007f08, 0x0c050801, 0x0049060a, 0x05038508, 0xce3f004a, 0x0122c783, 0x9e44de10, 0xedd52905,
		0x33253031, 0x21352315, 0x3006be46, 0xfe4e27a9, 0x52bd53c5, 0x0181c746, 0x0176fed0, 0x0867598a, 0x01ad2c08, 0x001700d0, 0x1424403b, 0x000b0a20,
		0x0918144c, 0x20144d00, 0x074d0008, 0x190a7f0b, 0x18167f01, 0x11118804, 0x0b49170b, 0x5149084a, 0x39081487, 0x16141513, 0x37363233, 0x23113335,
		0x23030e35, 0x35022e22, 0x32398835, 0x53133024, 0x1f190753, 0x42281022, 0xd0011a2f, 0x072a3588, 0x30fedb05, 0x050502b3, 0x3f261104, 0x8351892e,
		0xd0013e08, 0x30000b00, 0x7f071840, 0x08000404, 0x030d0b7f, 0x090c007f, 0x01050501, 0x85030749, 0x83df8200, 0x112f21de, 0x470d775a, 0xe284069b,
		0x84058551, 0xfe1f2adb, 0xfe8a01e1, 0x00010030, 0x08e3482d, 0x40412608, 0x0b7f0e25, 0x7f0f070b, 0x025f024f, 0x02bf02af, 0x7f060204, 0x7f0a1103,
		0x0c0c1007, 0x0e490800, 0x05850a02, 0x05484107, 0x333f3224, 0xdf522f33, 0x07835107, 0x6d820120, 0x82095041, 0x4b5e2989, 0xabfe4e27, 0x4e4b4d4b,
		0x57417583, 0x277b8206, 0x12000200, 0xd001f6ff, 0x1433d382, 0x5b002500, 0xff0e00b9, 0x000bb3e8, 0xffb80e4d, 0x840ab3d0, 0xb3e82607, 0x0a4d0009,
		0x06bd4ab8, 0xe0220882, 0x11821a40, 0x0c821824, 0xfa822027, 0x1d26012a, 0x03070789, 0x51118915, 0x084b1519, 0x7e611120, 0x0c645105, 0x35231322,
		0x2905a250, 0x1415021e, 0x2223020e, 0x864a2726, 0x1e3f080b, 0xad5b6d03, 0x24193a0e, 0x1b1c3040, 0x2b2b4732, 0x30a92752, 0x251c1036, 0x112f1715,
		0x1a181405, 0xb1458b01, 0x24110703, 0x3b2a283a, 0x0b091126, 0x162e2930, 0x030a1520, 0x02019f05, 0x82000101, 0x00032200, 0x20cb822d, 0x29cb82c7,
		0x001d000c, 0xb9530021, 0xcd821800, 0x294a0d20, 0x0eb32105, 0xf0220784, 0x10822140, 0x820a2208, 0x0801170f, 0x1e7f1f17, 0x7f040f23, 0x4a1f221d,
		0x12128900, 0x1a89070d, 0x490d2051, 0x3f333f00, 0x20c383ed, 0x06ac503f, 0x24086c51, 0x0622372b, 0x055a5107, 0x26343523, 0x20d08927, 0x08cf8306,
		0x11230520, 0x1d10b433, 0x0d22080c, 0xa12e2921, 0x14250b4e, 0x1727331c, 0x3f234557, 0x4e9a0121, 0xac82e64e, 0x29030226, 0xea282d2e, 0x5424ca86,
		0x0a0b0948, 0x0023b082, 0x82470002, 0x82cc20bb, 0x000e270a, 0xb962001f, 0x1d7d1a00, 0xb81a2a05, 0x09b4d8ff, 0x174c000a, 0x821085b8, 0xb3d82407,
		0x824d000a, 0xe8250807, 0x00092140, 0x1120064d, 0x18054d00, 0x034d0012, 0x11211982, 0x201f7f0c, 0x14148908, 0x1c89000f, 0x00490f51, 0x51c9853f,
		0x7b411075, 0x1616220b, 0x3ac98e03, 0x13403afe, 0x1a192d21, 0x3d0c1337, 0x4010539c, 0x3648281d, 0x2f60731f, 0x413a2c57, 0x02230876, 0x8a960103,
		0x000036c6, 0xff3b0001, 0x01cc01f5, 0x002400db, 0x17304050, 0x4d000e28, 0x2104840e, 0x09820d20, 0x000c103f, 0x8211144d, 0x1d1d2600, 0x25081212,
		0x88191c1c, 0x13861220, 0x09502013, 0x05880c09, 0x05924951, 0xed2f3924, 0xfb60ed10, 0x0b2b5106, 0x4c079d53, 0x372006c7, 0x080b1a51, 0x1e323343,
		0x23cc0102, 0x33395d41, 0x140c1351, 0x3d242649, 0xd5031c2e, 0x2c1c04d3, 0x3527223a, 0x4618131d, 0x425c3832, 0x5b3aea24, 0x090f213f, 0x140c0945,
		0x43213625, 0x1322311e, 0x08470b0a, 0x5a3e220d, 0x22008200, 0x82360002, 0x82d920bf, 0x001a24bf, 0x42870026, 0x0b21053d, 0x05007c00, 0x9d5f0a20,
		0x4c402705, 0x4c000b0a, 0x1682180e, 0x82280e21, 0x10032613, 0x4c000d0c, 0x210f8303, 0x0f821003, 0x82212c08, 0x821b2816, 0x3005200c, 0x03054005,
		0x7f070b05, 0x08010820, 0x11882427, 0x0f850650, 0x020b1f0b, 0x080b0b08, 0x4a084909, 0x8300881e, 0x086347f2, 0x1001ed28, 0x32fd5dd6, 0x1c515dde,
		0x2205240e, 0x4727022e, 0xfd790671, 0x14272309, 0x59613316, 0x01063c06, 0x262f1950, 0x4e41031a, 0x1a03404e, 0x1a182f26, 0x17182732, 0x1a573127,
		0x831a2222, 0x140b3c03, 0xc43c4f30, 0x3dc7d001, 0x17143051, 0x47475e37, 0xf317375e, 0x54595954, 0x84585855, 0x282008f7, 0xad010000, 0x1a00dc01,
		0x7f002500, 0xff2000b9, 0x114d40e8, 0x114c0012, 0x4d000b10, 0x0a092811, 0x20240a82, 0x0d4d0008, 0x0d220f83, 0x0f820838, 0x03060c3c, 0x0c078106,
		0x0c070714, 0x250f0303, 0x27187f19, 0x82210707, 0x08010f00, 0x1282260f, 0x25861a30, 0x4a191425, 0x5014851e, 0x004a0607, 0xf650333f, 0x732f2007,
		0xf7500535, 0x39112106, 0x230fb66f, 0x27262225, 0x18060f49, 0x2909f542, 0x35352311, 0x22232626, 0xf7821506, 0x01333e08, 0x0b190e14, 0x5415341d,
		0x1e1e1c0b, 0x1d23320e, 0x3b2a4734, 0x0a531c50, 0x3e331e2b, 0xb4513340, 0x612b0101, 0x33371a2a, 0x4312122f, 0x273a2726, 0xfe080a14, 0x02dfb436,
		0x2d2d2a03, 0xcb5f1822, 0x43003111, 0x10000001, 0x00020b40, 0x02132325, 0x24000250, 0x3b06cf4a, 0x01f5ff28, 0x028f02c7, 0x00480026, 0x00060100,
		0x00000d83, 0x03104017, 0x36240f02, 0x03262882, 0x024f2e00, 0x2c822200, 0x34342b22, 0x003a2082, 0x0159ff14, 0x00b502b0, 0x408b002b, 0x1218230b,
		0x10234d00, 0x134d0010, 0xfb47ffb8, 0x22088205, 0x450db3e8, 0x11200655, 0x34080784, 0x083740e0, 0x0f4c000a, 0x02191f19, 0x20281919, 0x072d117f,
		0x7f280406, 0x2900012b, 0x292c2901, 0x16891d4a, 0x042a074b, 0x24030101, 0x100b0088, 0x030b200b, 0x071e1908, 0x05a44912, 0xfdce322b, 0x1033cc32,
		0x3911edde, 0xff85182f, 0x33132508, 0x33153735, 0x6409f461, 0x1a620f45, 0x42142d09, 0x13a2a252, 0x43311631, 0x1e0b1228, 0x0a0e5518, 0x17372d35,
		0x42520a31, 0x0e456202, 0x085b3e53, 0x4e381f09, 0x18fafe2f, 0x2c0a1155, 0x47560301, 0x7ffe050b, 0xff002402, 0x05e74fff, 0xb5023c08, 0xe6022602,
		0x06010000, 0x00368f00, 0x0b401000, 0x06082201, 0x01500200, 0x2b4f0701, 0x0100342b, 0xf5ff3100, 0xdb01c201, 0x58002400, 0xff1700b9, 0x000eb3c0,
		0xffb8174d, 0x840db3d8, 0xb3e82507, 0x0e4d000c, 0x403d0f82, 0x4d000e1d, 0x261d0808, 0x00821411, 0x12861325, 0x1c1c0512, 0x51208819, 0x880c0909,
		0x0dcc4d05, 0x08015318, 0x24056056, 0x023e3437, 0x0dea6733, 0x20055b55, 0x05a67717, 0x24313d08, 0x32385c42, 0x1d131846, 0x3a222735, 0xd3041c2c,
		0x2e1c03d5, 0x4926243d, 0x51130c14, 0x415d3933, 0x5a37ea23, 0x080d223e, 0x130a0b47, 0x431e3122, 0x14253621, 0x0945090c, 0x5b3f210f, 0x4220eb82,
		0xb227c382, 0x0602db01, 0x83005600, 0x823620fb, 0x02c2220f, 0x200f829e, 0x2c0f8a4c, 0x0126028f, 0x0100000c, 0xdc830006, 0x068d6a00, 0x0d40da2e,
		0x0b012a18, 0x22020250, 0x1602014f, 0x0a036018, 0x56ff4724, 0x43848001, 0x00004d37, 0x0d000200, 0xde01f6ff, 0x1d00d001, 0x77002900, 0xff1700b9,
		0x0b2141e0, 0x38071a46, 0xe8ffb814, 0x100b1140, 0x0f234c00, 0x7f01007f, 0xb00ea00e, 0xb80e020e, 0x05dc65ff, 0x000e003e, 0x821e080e, 0x2a082b15,
		0x12128921, 0x1a88270e, 0x0e850151, 0x07880849, 0xed3f0051, 0x11230183, 0x4ded2f39, 0x39240767, 0x5d2b2f2f, 0x2507dd65, 0x132b2b2b, 0xd7651523,
		0x35032105, 0x20051f59, 0x08c64716, 0x23263423, 0x06154722, 0x44f04108, 0x343b1d07, 0x10231f0c, 0x1a16d604, 0x25143e37, 0x32171f33, 0x2019a11a,
		0x0e08140b, 0x011a2107, 0x8253228b, 0x4607385e, 0x76502b07, 0x07ae4952, 0x3b2b4552, 0x08081125, 0x052d268b, 0x270101a1, 0x3620ef83, 0x1727ef86,
		0x67002200, 0x471100b9, 0xc98205c5, 0x0fb4f022, 0x0882de82, 0x40e82008, 0x000e0d2c, 0x7f1e0a4c, 0x03171707, 0x240f8218, 0x107f0206, 0x23030103,
		0x010c891b, 0x820c0686, 0x20042c01, 0x08511488, 0x03490449, 0x823f004a, 0x11ed2200, 0x83d48239, 0x08cf4cd2, 0x0a8e8418, 0xd54c3720, 0x36152108,
		0x860b896b, 0x32332adc, 0x4971f036, 0x17497149, 0x2bd58d19, 0x1a210d10, 0xd001d3d3, 0x08afbbbb, 0xa021cb8b, 0x2fca8203, 0x1400ffff, 0xb0010000,
		0x0602b502, 0x00000201, 0x8207234f, 0x0126220f, 0x23198215, 0x228f0006, 0x28051b43, 0x0d17190d, 0x0e015005, 0x067b4418, 0x1d823f20, 0x2783b620,
		0x2205734f, 0x85044300, 0x15002827, 0x50000913, 0x86140001, 0xff242a27, 0x02cd0158, 0x00260298, 0x059b4f5c, 0x27851220, 0x2c241328, 0x01501520,
		0x6b432109, 0xff472206, 0x06fb4d7f, 0x40322308, 0x0a7f071a, 0x7f030b0a, 0x7f020d06, 0x08010b00, 0x07090c0b, 0x4a0b8502, 0x00490004, 0xed3f323f,
		0x8f4dce33, 0x0cd45b08, 0x23152336, 0x53472335, 0x4e8c53c0, 0xfed0018c, 0xfe8a0176, 0x00818130, 0x02390082, 0xf4ff2700, 0xb502cc01, 0x3c001100,
		0x37b5b300, 0x4d000818, 0xe8ffb833, 0x3a0782b3, 0xc8ffb82d, 0x4d0009b3, 0xd8ffb82b, 0x4d0010b3, 0xe0ffb829, 0x000f3340, 0x8318164d, 0x0e202104,
		0x0d200983, 0x28210482, 0x2104820c, 0x04820b20, 0x0a092826, 0x18134c00, 0x10211482, 0x26318220, 0x100f180a, 0x82064c00, 0x83b4204f, 0x83012008,
		0x82222040, 0x00123f17, 0x30820d15, 0x3e301e1e, 0x15158226, 0x3d3a8203, 0x1212002b, 0x35880818, 0x18882151, 0xd442004d, 0x33112205, 0x05016533,
		0x3856ed20, 0x18112005, 0x231381b4, 0x15060613, 0x2f0a2456, 0x35262627, 0x32333634, 0x37363632, 0x23060617, 0x20067257, 0x05424d17, 0x2e222323,
		0x081e8202, 0x4440ff65, 0x23301e0e, 0x0f1f3020, 0x562b2316, 0x4e5a2a22, 0x181b2318, 0x430e050e, 0x1d1f0c2c, 0x20170c13, 0x31402414, 0x5032171d,
		0x3350363a, 0x98015319, 0x21436112, 0x191b2e3c, 0x29213b2c, 0x361f2c3b, 0x3f223c18, 0x0201013a, 0x01010247, 0x0e121209, 0x0e151414, 0x4f3d3118,
		0x41522a36, 0x56402628, 0x41735430, 0x2008055f, 0x01fbff12, 0x009302d5, 0x00260015, 0x1e2a4098, 0x00100f30, 0x12381d4c, 0x201d4d00, 0x194d0011,
		0x20098228, 0x21098419, 0x0e821018, 0x000f202e, 0x1220184d, 0xb8084d00, 0x0ab3e8ff, 0xd8250784, 0x4d0009b3, 0x820f8605, 0x40e02207, 0x39108225,
		0x2807761b, 0x00131521, 0x0e0d1073, 0x790d0027, 0x21101310, 0x01000179, 0x01821001, 0x7c161131, 0x3f004309, 0x39392fed, 0x105d2f2f, 0x6e3311ed,
		0x322406c3, 0x33cd32fd, 0x340f425d, 0x3315132b, 0x15021e32, 0x26222314, 0x35231127, 0x15333533, 0x7bbf1833, 0x1e3a080b, 0x34bd3202, 0x1d395638,
		0x204822e0, 0xa7525959, 0x25331f6c, 0x37261414, 0x0f0c3124, 0x04020c0c, 0x4a2d1485, 0x0906c435, 0x4946fa01, 0x3cfe4649, 0x24301d0d, 0x0c1c3125,
		0xe34b02f8, 0x05af4c05, 0xb502cc33, 0x27001800, 0x00b96300, 0xb4e0ff11, 0x4c000a09, 0x21d6820e, 0x09833040, 0x821c2f08, 0x06222910, 0x017f0704,
		0x07281817, 0x04018617, 0x0b891f01, 0x011f010f, 0x014f013f, 0x0b010804, 0x19030b01, 0x02511389, 0x3f004d03, 0x16443f33, 0x975e2005, 0x0f3d47dc,
		0x85061421, 0x490120dc, 0x2908077e, 0x031e1507, 0x9f525912, 0x193a0e9f, 0x1c2f3f24, 0x522b5766, 0x02015927, 0x2a3c3630, 0x06112f17, 0x011a1814,
		0xe50ed7d0, 0xbe4c6d44, 0x48542b05, 0x82010b09, 0x2e29aefe, 0xbd4c282d, 0x03260808, 0xf3ff1d00, 0x7902d801, 0x24001300, 0xe7003500, 0x102c0b40,
		0x2c4d000e, 0x4d000d08, 0xf0ffb82a, 0x000e0db4, 0x26641c4c, 0x25078206, 0x0011b3f8, 0xf4831b4d, 0x26822d20, 0x83181921, 0x82102004, 0x18192a2b,
		0x194d000c, 0x4d000b10, 0x055b5e18, 0x00081026, 0x1010114d, 0x18240482, 0x0d4d000f, 0xb3203182, 0x07820c82, 0x82b3f021, 0x430c200f, 0x082006a2,
		0x07200786, 0x07821f86, 0x3040e022, 0x03262082, 0x00100f10, 0x4583034c, 0x76172e3e, 0x1d28370a, 0x0b400076, 0x36004810, 0x2e202528, 0x1d141731,
		0x2b052020, 0x1a460f7c, 0x2b07367f, 0x332f3911, 0x32cd32dc, 0x0132cd10, 0x1db2a818, 0x2b2b2b22, 0x3708447f, 0x23020e14, 0x25022e22, 0x26373632,
		0x06222326, 0x33363607, 0x07021e32, 0x16220982, 0x15823316, 0x2805ae47, 0x513b201d, 0x3b513132, 0x21078220, 0x07823231, 0x0e35013e, 0x45030a1a,
		0x04424243, 0x151c260e, 0x84222224, 0x080b2418, 0x443e3d41, 0x121a0c08, 0x23211082, 0x08547f01, 0x7a532408, 0x50262650, 0x0b0e4e7a, 0x6f767870,
		0x19141510, 0x121e0314, 0x6167655f, 0x18140a0a, 0x00000014, 0x4c280003, 0x132d06c3, 0x34002300, 0x00b9a000, 0xb3e0ff2b, 0x06bc4410, 0x07840f20,
		0x1b40f038, 0x294d000e, 0x00100f30, 0x0e18294c, 0x18224d00, 0x4c001211, 0x7d631022, 0x05a54606, 0xffb8122a, 0x080e40e8, 0x100c4d00, 0x08200482,
		0x02250483, 0x40f0ffb8, 0x3f0d8226, 0x00821d27, 0x82172d36, 0x0a2f0a1f, 0x0a030a3f, 0x271f1d35, 0x2d141724, 0x2a1a3030, 0x1a500f88, 0x28050e4d,
		0x3912ed3f, 0x32cd332f, 0x05bb58dc, 0x20088253, 0x4d008a2b, 0x2e2a0517, 0x3e343502, 0x1e323302, 0x30410502, 0x22232409, 0x4137022e, 0x30080e4f,
		0x381fcc01, 0x4d2d2e4e, 0x381f1f38, 0x4e2e2d4d, 0xecfe1f38, 0x08081e13, 0x42343240, 0x15201406, 0x7a202022, 0x08091810, 0x41333341, 0x161d0b07,
		0x08108214, 0x5937e823, 0x40232340, 0x5a373759, 0x3f23233f, 0x0d143a5a, 0x424a463f, 0x0e100e12, 0x3f0a0d0f, 0x0b414a48, 0x080b820e, 0x0001004d,
		0x0100000d, 0x007402fd, 0x4048001b, 0x16171627, 0x0b781713, 0x0b0b140c, 0x1313160c, 0x140d1278, 0x1c120d12, 0x13030b0d, 0x0c164112, 0x0b17440d,
		0x45007c06, 0x32ed3f00, 0x33333f32, 0x2f01333f, 0xd6102f33, 0x107d2b87, 0x181887c4, 0x0807c697, 0x1632014f, 0x23260717, 0x07020e22, 0x032e2303,
		0x12163327, 0x033e1317, 0x2418b301, 0x110f250e, 0x08080907, 0x17627806, 0x192a2829, 0x243f1d59, 0x180e0760, 0x13740224, 0x0610390c, 0xfe181d11,
		0x928a4b20, 0xfe8a62a2, 0xa4017eee, 0x11212f1e, 0x08008200, 0x1e00013e, 0xe9010000, 0x1900dc01, 0x2f405400, 0x0b0a0b00, 0x14001981, 0x0f001919,
		0x19080119, 0x05011b13, 0x0481050a, 0x01041401, 0x0a341a04, 0x0b190a01, 0x50108816, 0x0a490405, 0x004a0100, 0xb483ab84, 0x5d2f0122, 0x8729ae83,
		0x1801c47d, 0x5e32ce10, 0x0e51185d, 0x26232608, 0x1e332726, 0x18a88303, 0x08097a98, 0x4b030160, 0x5a214f2a, 0x1c1b180a, 0x1208530e, 0x111a241a,
		0x0d0e1222, 0x0a14171d, 0x2c83ee5f, 0x245b6163, 0x27181201, 0x06070f1b, 0x1a1c0841, 0x00020000, 0x0157ff37, 0x002303e2, 0x0029001b, 0x104a4080,
		0x0b731611, 0x201f2627, 0x380a0020, 0x082a0108, 0x01080901, 0x1b261b06, 0x181b0802, 0xfa687e1b, 0x73182905, 0x0c08400a, 0x2b0b0a48, 0x08070069,
		0x1b032a2b, 0x0a101144, 0x18441779, 0x20264108, 0x41021c23, 0xddde3f00, 0x333f32ce, 0x19dced3f, 0x333f18c5, 0x5dd61001, 0xddde10ed, 0x0a13692b,
		0x12115d2d, 0xc52f1839, 0xfd10c5d6, 0x69c519de, 0x33320a21, 0x07020e16, 0x37033e27, 0x02061123, 0x26221307, 0xa2433727, 0x17830805, 0x4f370606,
		0x423c330f, 0x0127561e, 0x17291d10, 0x1517093c, 0x4b1a0512, 0x386c2370, 0x083f0846, 0x221d1d22, 0x45083e08, 0x22fe6b02, 0x8283782b, 0x1fdffd36,
		0x173b4042, 0x231c0926, 0xea011427, 0x5500ff95, 0x3339a602, 0x23231d11, 0x3933111d, 0x00020000, 0x016cff3f, 0x009802e3, 0x0029001b, 0x05414076,
		0x027f0b06, 0x201f2627, 0x39130120, 0x1b2b011b, 0x0d121b01, 0x1b168112, 0x1b161614, 0x83017f0d, 0x02012dfb, 0x007f162b, 0x13080113, 0x491b0d2a,
		0x152bf183, 0x4a121649, 0x85010506, 0x87004a0c, 0x060241f3, 0x5e20fa82, 0xf984fb8f, 0xcddecd22, 0x0124f986, 0x06163311, 0x0e23f186, 0x59230703,
		0x2720053b, 0x0139f88c, 0x360227ba, 0x13063a29, 0x22051113, 0x383c3d1b, 0x17504a15, 0x1c3c3b38, 0x2cf98c6a, 0x75fed001, 0x2326743f, 0x231f1806,
		0x0f6a5911, 0xf98b4b20, 0xf347fb83, 0x006b3305, 0x00250016, 0x1f1a4078, 0x4d000f28, 0x0010201e, 0x04841a4d, 0x000e1024, 0x1383194d, 0x47b80821,
		0x2d080605, 0xe8ffb805, 0x0a092940, 0x761c4c00, 0x16222707, 0x11730014, 0x00260f0e, 0x1411790e, 0x01792211, 0x01100100, 0x11011102, 0x17411201,
		0x54640a7c, 0x1fd84705, 0x4607d347, 0xd44706f7, 0x162f0811, 0x383dab16, 0x78203d58, 0x20512271, 0x7a524747, 0x28361f36, 0x3a291717, 0x1b183a24,
		0x1466e501, 0x63354a2d, 0x01090661, 0x464640db, 0x475bfe40, 0x032108d3, 0x067f5401, 0xe801cc36, 0x2d001c00, 0x15409100, 0x00122022, 0x1118224d,
		0x181f4d00, 0x1f210982, 0x20098210, 0x21de8214, 0x80510cb3, 0x0ab42505, 0x104c000b, 0xb422e682, 0x08840c0b, 0x40e03608, 0x4d000a32, 0x2f128220,
		0x07040628, 0x1c1b017f, 0x861b072e, 0x25010401, 0x012f0d89, 0x0002013f, 0x400d100d, 0x040d500d, 0x010d0108, 0x891d020d, 0x00025117, 0x08f6472f,
		0x4517f747, 0x13200563, 0x2105c248, 0x7a511523, 0x05fe4709, 0x425f1320, 0x1e2f080a, 0x52481203, 0x19079e9e, 0x240c1f1e, 0x1d1e3342, 0x2c2b4835,
		0xf948275a, 0x1f133f30, 0x38161528, 0x1b160611, 0x3eaa011d, 0x01513a3e, 0x54020304, 0x012309c4, 0x54cafe66, 0x240810c7, 0x00490002, 0x02c70100,
		0x00150071, 0xb6d50024, 0x12111021, 0xb8214c00, 0x0940f0ff, 0x0a4d0010, 0x4d000e10, 0x210d8207, 0x07860fb3, 0x07840c20, 0x055de820, 0xb3f02106,
		0x06202482, 0x18071142, 0x200a225f, 0x843083e8, 0x000a220f, 0x2107824d, 0x4567b3e8, 0x22941805, 0x31402108, 0x1e2b5182, 0x09091f0a, 0x08200721,
		0x82081f20, 0x231a3f01, 0x1a260576, 0x1000730f, 0x25100801, 0x0e07090a, 0x1e202179, 0x10001a1a, 0x007c1644, 0xd6510041, 0xcc332605, 0xce32fd33,
		0x054b4333, 0xde10322b, 0x393912ed, 0x33112f2f, 0x84078211, 0x0c696704, 0xed642b20, 0x075b0807, 0x06270717, 0x15232306, 0x033e1123, 0x07062217,
		0x32323315, 0x17372737, 0xeb343536, 0x1b375337, 0x443a3f61, 0x48132011, 0x2b2b1252, 0x301a1729, 0x110a440c, 0x33382b08, 0x1c710231, 0x7c2b4633,
		0x77216b31, 0x02e70503, 0x04060462, 0x02014701, 0x224a02fa, 0x7c4f1e5a, 0x5a000200, 0x0029062b, 0x00290016, 0x1d2040b4, 0x30db8238, 0x000e181d,
		0x0d101d4d, 0x10194d00, 0x4c001211, 0x2e0a8319, 0x000f2015, 0xffb8154d, 0x0908b4e8, 0x49144c00, 0x03200600, 0x0c230783, 0x83024d00, 0x860e2007,
		0x310f8507, 0x0b3040e0, 0x28064d00, 0x18052905, 0x17041703, 0x01820429, 0x1b222908, 0x222b0082, 0x0e007f0d, 0x2a0e0801, 0x5012881e, 0x18284b0e,
		0x06882517, 0x51090305, 0xce333f00, 0x33ccfd33, 0xed3f3f33, 0x22272441, 0x41061425, 0x2225061f, 0x23152726, 0x06104911, 0x0805d759, 0x06222354,
		0x16161107, 0x37323233, 0x2ccc0127, 0x34383427, 0x25101e0e, 0x1b530e38, 0x52323755, 0x35af203a, 0x3d4c1114, 0x0e0b2722, 0x0f091d36, 0x42e73609,
		0x20592066, 0x1206055a, 0x6702b70b, 0x3f221008, 0x175d615a, 0x59512946, 0xdbfe0406, 0x5d01160d, 0xcb720100, 0xe1210806, 0x28000b00, 0x73021440,
		0x07080d05, 0x0c0b0073, 0x0a790007, 0x03790644, 0x3f004101, 0xed3fedce, 0x2cc28232, 0x10cdfddd, 0x3031edde, 0x35331137, 0x269d8233, 0x35211533,
		0x724fee8f, 0x762406d0, 0x4621febc, 0x3d05935b, 0x0100006b, 0x004402b8, 0x401f0007, 0x057f020f, 0x007f0709, 0x03850608, 0x4a004901, 0x4f823f00,
		0x2406bc58, 0x11333031, 0x2a4a8421, 0x4b02016b, 0x74d001fb, 0x8875feb9, 0x6b240893, 0x3e001100, 0x13071f40, 0x090e0b0b, 0x0004730d, 0x11020211,
		0x79010c12, 0x05040409, 0x1079000d, 0x05790844, 0x9d839e82, 0x2f391122, 0x086a4b18, 0xfd32dd25, 0x7332cd32, 0x35220578, 0x62823523, 0x15231522,
		0x0382af82, 0x5932af82, 0xeb3d0159, 0xfe868686, 0x43d646cf, 0xc6460c01, 0xb582d643, 0x21000122, 0x0134b383, 0x000d00d0, 0x0717402f, 0x0c090b0f,
		0x0201047f, 0x86010c0e, 0x00236e82, 0x85058508, 0x12ed21bb, 0xd6206986, 0x10216684, 0x83c382ce, 0x21352164, 0x6b2f6486, 0x4d014a4a, 0xb79e9efb,
		0x9545da3f, 0x8200b73f, 0x2d002f56, 0xd0015bff, 0x2b006b02, 0x00b97200, 0xc162ff2a, 0x18142f05, 0x144d000e, 0x4d000d10, 0x0011180f, 0x04850e4d,
		0x0e201382, 0x08086a68, 0x00082227, 0x1120204d, 0x222d0076, 0x0f1d731c, 0x08080108, 0x7c162c1d, 0x211d2727, 0x1d411e79, 0x057c0c44, 0x3fed2f00,
		0x2794833f, 0xc61001ed, 0x105d2f32, 0x43060764, 0x2526097c, 0x23020e14, 0x97182222, 0x22290cac, 0x1107020e, 0x15211123, 0x06e44421, 0xd0014908,
		0x3755391d, 0x020b1a0d, 0x220d0f05, 0x17182a39, 0x0e22392a, 0x06151a1e, 0xfe630152, 0x1e1807ef, 0x573a0e1f, 0x39711c3a, 0x022c4b66, 0x1b010143,
		0x37344f35, 0x0318324e, 0xfe020505, 0x466b02cf, 0x050603b1, 0x66482703, 0x472fef83, 0xcf015aff, 0x2300d001, 0x15407c00, 0x83101814, 0x000f24e7,
		0x8210104d, 0x18102109, 0x02230982, 0x44e0ffb8, 0xd8200689, 0x0808436a, 0x000a2c2e, 0x121d1d4d, 0x1f250382, 0x201a7f19, 0x0b0f010b, 0x0b020b1f,
		0x011a000b, 0x15241a08, 0x1a000089, 0x491b861e, 0x890f4a1a, 0x3f004b08, 0x5e21f78a, 0x91f9825d, 0x320121fa, 0x2009af52, 0x093b5716, 0x83150721,
		0x822320f9, 0x013008f9, 0x18606a05, 0x0a2f4730, 0x05050816, 0x3e39080b, 0x34144642, 0x46015313, 0x1e1907f3, 0x751e011f, 0x3d54306b, 0x42020123,
		0x544d0101, 0x05064755, 0x4421d482, 0x20f2837d, 0x3f008200, 0xff040001, 0x02eb015b, 0x0031006b, 0x0f6e40c1, 0x2100010c, 0x21202110, 0x21210803,
		0x2b302b1c, 0x2d06f974, 0x1b181b21, 0x14211c78, 0x0c211c1c, 0x0075070c, 0x18302909, 0x0c007331, 0x78060106, 0x35055257, 0x00001501, 0x1c1c0726,
		0x732a2626, 0x11113327, 0x26293207, 0x15752b79, 0x01302207, 0x233e8201, 0x12114116, 0x32191575, 0x1001ceed, 0x102f32c6, 0x2f33edde, 0x12112f33,
		0x64332f39, 0x01260609, 0x32ed1018, 0x0e648732, 0x735e2016, 0x0064050c, 0x0f2a750a, 0x15338e08, 0x2e233523, 0xc3112703, 0x181c1e11, 0x1e0a520a,
		0x0e132623, 0x0d1f2020, 0x1a311852, 0x1c361d49, 0x23210e52, 0x21110f23, 0x280c1c20, 0x1b0b184e, 0x0112221f, 0x5147182e, 0x5d2d2856, 0x1e1e4d56,
		0x244d4b46, 0x0139864d, 0x39f4fe0c, 0x4b234e85, 0x191f484b, 0x2248443e, 0x5728a5eb, 0xfe184751, 0x010000d1, 0x7fff0700, 0xd001e001, 0xb6003100,
		0x240f6840, 0x10090001, 0x03092009, 0x090c1108, 0x81030003, 0x04140904, 0x24240904, 0x0937651f, 0x7f160024, 0x51652419, 0xa02f3009, 0x0219b019,
		0x1f0c1919, 0x0c0c0404, 0x650d7f10, 0x39820b4d, 0x270a4d65, 0x850c0f0f, 0x03044a11, 0x2205f95b, 0x653f2f33, 0x4b411552, 0x415d2009, 0x4a410b4b,
		0x1101320e, 0x5d5d5e33, 0x36013031, 0x0e333736, 0x16160703, 0x07324117, 0x65231521, 0x75081159, 0x13341715, 0x23200d53, 0x3e221225, 0x0a4f2918,
		0x201f1b09, 0x200f490f, 0x520a1b1f, 0x2827220c, 0x22230f14, 0x09520b1e, 0x0b1a1918, 0x2b150149, 0x37152967, 0x24193c3a, 0x81c72f5c, 0x33373819,
		0x14dacf14, 0x1b3c3b34, 0x3a424420, 0x3c3a1815, 0x34161538, 0xc9153436, 0x00010000, 0x0157ff26, 0x007602d1, 0xb948014c, 0xf0ff4900, 0x4d0013b3,
		0xe8ffb849, 0x078412b3, 0x11b3d822, 0xe02e0784, 0x4d0008b3, 0xe0ffb845, 0x001211b4, 0x0887414c, 0x85b83d21, 0x20078231, 0x823183e0, 0x40e82807,
		0x000a082f, 0x8210384c, 0x18382140, 0x32213d82, 0x31048228, 0x100f102e, 0x182e4c00, 0x254d000e, 0x4d001018, 0x04822021, 0x0d181a26, 0x054c0011,
		0x15226d83, 0x07824d00, 0x14b3e022, 0xe8230784, 0x841312b4, 0x83e02018, 0x2118827e, 0x3e83b4e8, 0xffb80228, 0x1413b4d8, 0x08824c00, 0x82b4d021,
		0x08088360, 0x0b40d851, 0x424d000f, 0x3f3f7630, 0xb8031147, 0x3340c0ff, 0x03480e0b, 0x0f17004c, 0x0b08010b, 0x231c1414, 0x374e4776, 0x1c292937,
		0x1414004d, 0x4d080f17, 0x7c333636, 0x7929423a, 0x453a2a2a, 0x7c201d1d, 0x0046174c, 0x32ed333f, 0x2f393f2f, 0x821039ed, 0xdc102a08, 0x2f3912cd,
		0xc61001cd, 0x058e6d32, 0xcc290d82, 0xdd335d5e, 0xcd2bd532, 0x0dff6511, 0x850a694f, 0x7217200a, 0x232105da, 0x06f54c22, 0x27343528, 0x37363627,
		0x5345032e, 0x05576905, 0x6a352321, 0x2620056b, 0x2406bb6d, 0x021e3233, 0x082c7715, 0x1afe0723, 0xa96c1817, 0x0c04270d, 0x2b361f06, 0x13770921,
		0x173f770a, 0x4a341c23, 0x576b182e, 0x0d1b2511, 0x0e0d0a01, 0x20092777, 0x16507746, 0x2c412d25, 0x82000318, 0x00013700, 0x0157ff48, 0x00dc01bf,
		0xb9d60045, 0xe0ff4200, 0x4d000bb3, 0x6d5eb842, 0xb8372806, 0x0bb4e8ff, 0x824c000c, 0xb3e02d08, 0x054d000a, 0xb4e0ffb8, 0x4c001413, 0xd8230882,
		0x841211b4, 0x62e82008, 0xb32007d8, 0x2205c645, 0x4110b4d0, 0xb64105bf, 0x2a3e2505, 0x41393982, 0x3c05b641, 0x480e0b35, 0x17004403, 0x0b010b0f,
		0x211a1414, 0x31474182, 0x00252531, 0x1a08011a, 0x05b94146, 0x30304637, 0x3e34882d, 0x26268625, 0x1e1b5034, 0x51174488, 0xed333f00, 0x12b74132,
		0x2308ac67, 0xcc2f3912, 0x4117b841, 0x262016a9, 0x6706b841, 0xd47810bf, 0x020e2108, 0x2105ea67, 0xa8410607, 0x47312213, 0x10d66710, 0xfa671220,
		0x5461220c, 0x11a14107, 0x020d1c23, 0x0eea670f, 0x0b684920, 0x3e51080d, 0x000b0548, 0xff400001, 0x02d9015b, 0x0018006b, 0x03394065, 0x15180603,
		0x03007818, 0x03000014, 0x0306030b, 0x140b1078, 0x000b1010, 0x730a0600, 0x10151a07, 0x01120073, 0x00191208, 0x10154118, 0x13120303, 0x09441241,
		0x440b7906, 0xceed3f00, 0x05146a3f, 0x964b3f20, 0x18c5200a, 0x21076f83, 0xff451887, 0x30312405, 0x44060601, 0x27080ba2, 0x33112311, 0x37363611,
		0x7531d601, 0x2a663544, 0x19164e28, 0x233d3832, 0x77415252, 0x496b022d, 0x872d4890, 0x2ea5eb50, 0x09dec118, 0x3f924322, 0x6b05e747, 0x220805a3,
		0x403c001a, 0x0518181e, 0x1c067f09, 0x117f0f14, 0x1717181b, 0x14000f12, 0x49121114, 0x05084a11, 0x8a4a0a85, 0x3311229c, 0x249e832f, 0xde1032ed,
		0x249c82ed, 0x1e373031, 0x0a2e4503, 0x15331122, 0x332f8b82, 0x13ee0606, 0x15313130, 0x13094e28, 0x183e3d38, 0x36086089, 0x31290fff, 0x81c71a36,
		0x323c411f, 0xd001df11, 0x335f30c2, 0x82006c33, 0x01670800, 0x00003000, 0x6b02eb01, 0x7e001e00, 0x03004640, 0x05050801, 0x1e191e08, 0x14050078,
		0x09050000, 0x78050805, 0x0c14090c, 0x160c1909, 0x0fbf0faf, 0x120f0f02, 0x20080000, 0x12731115, 0x411e001f, 0x100c0e0e, 0x17151915, 0x15150517,
		0x12411312, 0x44090844, 0x3f333f00, 0x2f39123f, 0x112f3333, 0x32cd1033, 0x863f2f32, 0x32ce2ebc, 0x2f39112f, 0x32dd335d, 0x7d872b87, 0x0a5d41c4,
		0x015d5e22, 0x08050346, 0x26262348, 0x35231527, 0x11231123, 0x35331133, 0x033e1533, 0x0bd60137, 0x2131251b, 0x5d2d5530, 0x41264e2c, 0x2b52522b,
		0x1f2a1c41, 0x6b020b19, 0x4d443f21, 0x709e3c30, 0x8925916a, 0x02e2fe87, 0x87f6fe6b, 0x3e452986, 0x134b213c, 0xde480806, 0x2200d001, 0x4b408400,
		0x00100000, 0x08030020, 0x061e0000, 0x0581060b, 0x05051400, 0x181d0000, 0x001e811d, 0x1e001e14, 0x0b18051e, 0xbf0eaf15, 0x0e0e020e, 0x14240511,
		0x23117f0f, 0x0d491d1e, 0x140f0b0d, 0x16161418, 0x20079a41, 0x05a65f05, 0xde84e096, 0x1132cd23, 0x05a87033, 0x012be187, 0x30315d5e, 0x17031e25,
		0x84032e23, 0x681520de, 0xde83061a, 0x0e334108, 0x182d0103, 0x12292d31, 0x22211062, 0x2d3d1324, 0x3d2d5252, 0x191c2115, 0x2214610e, 0x17ff2a25,
		0x2147443c, 0x32373b1c, 0xd6656213, 0x67c1d001, 0x272b1b50, 0x311c1627, 0x00003430, 0x12000100, 0xeb2e0482, 0x1c006b02, 0x45407900, 0x1c060303,
		0x0b431c19, 0x07360806, 0x78030603, 0x0c14070c, 0x0000070c, 0x190c1e06, 0x73181517, 0x0f001012, 0x001d0f01, 0x0c19411c, 0x150f1803, 0x1f120f03,
		0x03122f12, 0x0e121208, 0x440e4113, 0xc2410706, 0x5d5e2308, 0xcd833339, 0x333f332f, 0x5dd61001, 0x32fd33cd, 0x103333cd, 0x181f43ce, 0x1121df83,
		0x08d35823, 0x43152321, 0x60250523, 0x30764040, 0x0521435d, 0x5247472f, 0x63413636, 0x496b0228, 0xad36498f, 0x06234367, 0x40e50129, 0x8e404646,
		0x88409143, 0x01de37d3, 0x001f00e8, 0x00484080, 0x181a0500, 0x001b811a, 0x001b1b14, 0xc5180006, 0x29080907, 0x21051b1b, 0x1416180b, 0x0f117f17,
		0x08010e00, 0x1a1b200e, 0x140e1749, 0x14180b11, 0x02182418, 0x08401118, 0x1111480d, 0x8c18120d, 0x2f2908d4, 0x2b2f3912, 0x33115d39, 0x84d98211,
		0x8b5e20d6, 0x001021d7, 0x1029c518, 0x8b09b741, 0x372308d7, 0x01030e33, 0x3d3e1b00, 0x13621236, 0x193a3832, 0x52484852, 0x58673737, 0x36331561,
		0x3d14fd36, 0x431f4845, 0x702b0670, 0x3a3e3e3a, 0x1a675b62, 0x41343737, 0x18300baf, 0x37406400, 0x09000303, 0x0878090e, 0x08081403, 0x18220b82,
		0xc9440315, 0x00032806, 0x0e1a0800, 0x44117315, 0x0e2609bb, 0x14791110, 0x64431041, 0x12ed2308, 0xc2863939, 0xee71dd20, 0x2b872105, 0x088d8d18,
		0x420cba44, 0x9a41067a, 0x05b84405, 0x5c242d08, 0x383a1940, 0x145d1535, 0x1d38342f, 0x3bb05e52, 0x6b022357, 0x15528c43, 0x32645847, 0x3b4e5c32,
		0x02d8fe11, 0xecfe4625, 0x00428a48, 0x1120b783, 0xde340482, 0x1800d001, 0x36406200, 0x15050000, 0x16811512, 0x16161400, 0x260c9341, 0x1a051616,
		0x417f120b, 0x192a058f, 0x12491516, 0x850e0d0b, 0x81414911, 0x8a3f2008, 0x85cd20b6, 0x207541b6, 0x0806df44, 0x1813012a, 0x12323837, 0x322e1362,
		0x5b521833, 0x235634ad, 0xff572a61, 0x4a463d13, 0x3c421f1f, 0x01df0f33, 0x33c2458b, 0x66352e61, 0x080caf79, 0x21403c22, 0x0273070f, 0x11037306,
		0x0b730a0e, 0x0f790910, 0x020e1f0e, 0x000b0e0e, 0x440b410c, 0x07790205, 0x21060b46, 0x80751233, 0x26988206, 0xedd5edde, 0x68303132, 0x23210626,
		0x06944411, 0x52600138, 0xe12b4e27, 0x02e15252, 0xebdbfd6b, 0xfe2001a5, 0xfe6b02e0, 0xdf4500fb, 0x0f28080b, 0x25404200, 0x007f050d, 0x11017f04,
		0x007f080c, 0x10090109, 0x0c0f8507, 0x08020c1f, 0x0e090c0c, 0x4a09490a, 0x05850003, 0x8306e645, 0x5d5e2477, 0x6c1001ed, 0x79840642, 0x15332524,
		0x486c3523, 0x82a9200b, 0x53bd2178, 0x6c05f469, 0x0122074d, 0x78822d00, 0x6b02e23a, 0x3a000d00, 0x0d051f40, 0x0f010273, 0x0873070b, 0x0d79020e,
		0x7906090d, 0x2406134e, 0x04410908, 0x20e58208, 0x05637633, 0x10331122, 0xe6836d83, 0xe584dd20, 0xe0851520, 0x33112322, 0x012c0182, 0xb3525ee2,
		0x02b35252, 0xdbfd466b, 0x0121e087, 0x29e28205, 0x47000100, 0xe2010000, 0x6f82d001, 0x21403b25, 0x847f0d05, 0x007f256f, 0x02081008, 0x852e7482,
		0x8506490d, 0x0b010b0f, 0x4909080b, 0xdf820804, 0x3f207186, 0xdc84dd88, 0x70830120, 0x2c08246d, 0x525be201, 0x9b53539b, 0xfe45d001, 0x82da8775,
		0xff36216b, 0x24050750, 0x40880023, 0x05ab5b0d, 0x13101436, 0x0a4c0014, 0xb4d8ffb8, 0x4c001211, 0xf0ffb806, 0x4d000cb3, 0xe8260782, 0x000b09b4,
		0x1082054c, 0x34403a08, 0x004d0009, 0x0f1e731d, 0x1e0e010e, 0x17221e0e, 0x01071f76, 0x49094807, 0x73212507, 0x22202210, 0x22032230, 0x047c1924,
		0x79202204, 0x221e4123, 0x0c7c1244, 0x3fed2f00, 0x071a5033, 0xed5dd626, 0x5d2bde10, 0x2305f75c, 0x32ed105d, 0x21071f50, 0x41751501, 0x3527210a,
		0x24073174, 0x07062223, 0x05434111, 0x1a013808, 0x4a0e110a, 0x3a271543, 0x03080a25, 0x1f180708, 0x09490712, 0x52490910, 0xe16b0249, 0x86820101,
		0x20477151, 0x01014502, 0x38563c1f, 0xfe0101bb, 0xfd2502be, 0x416b02db, 0xf384055f, 0x00d0012f, 0xb96c0022, 0xe8ff1900, 0x4d000eb3, 0x21d48219,
		0x07840db3, 0x8305724a, 0x402c0810, 0x4d000a2a, 0x0d7f0c14, 0x2201220f, 0x110d220d, 0x241a8206, 0x11107f10, 0x03231101, 0x084b1f89, 0x11171788,
		0x4912850f, 0x004a110d, 0x8641d987, 0xde102106, 0x0520d98f, 0x8206f04f, 0x422320c8, 0xef68060c, 0x08125005, 0x82230121, 0x1f3125cc, 0x08150549,
		0xe423ca82, 0x8506190a, 0x0d052ae4, 0x01015e05, 0x0187535c, 0x05876ed5, 0x0102b53d, 0x5b416d67, 0x01011a39, 0x1d000200, 0xd9015cff, 0x2c007902,
		0xec003a00, 0x5d2032b5, 0xb32506ab, 0x2a4d0012, 0x20de82b8, 0x22078411, 0x840cb3e0, 0xb3e82207, 0x2307840b, 0x090e40f0, 0x1821ef82, 0x2d04820e,
		0x4d000810, 0xd8ffb812, 0x001210b4, 0x73540a4c, 0x20078206, 0x822b83f0, 0xb3e02407, 0x824d000a, 0x40e82207, 0x29338210, 0x0c0b1006, 0x18064c00,
		0x4d180a09, 0xf02b0c20, 0x000d0bb4, 0xffb8014c, 0x822e40f0, 0x10400872, 0x762d1330, 0x05130317, 0x76351c05, 0x2413130b, 0x003c0b24, 0x383b1c76,
		0x2528087c, 0x217c2825, 0x7c033045, 0x13461710, 0x2f00147c, 0xed333fed, 0x32ed3f32, 0xedde102f, 0xedd61001, 0x2f32ce10, 0xed260c82, 0x122f3911,
		0x06823939, 0xba553920, 0x822b200f, 0x14132300, 0x1f611716, 0x15162c05, 0x07020e14, 0x07171616, 0x6e272626, 0x6e650569, 0x1771080a, 0x3e171614,
		0x26343503, 0x6f062223, 0x4d12333a, 0x12483842, 0x14273924, 0x450b2d3f, 0x4f2f1d61, 0x48292139, 0x44253862, 0x321a1514, 0x32462b17, 0x0808ac1b,
		0x0a162319, 0x201d1a15, 0x796b3601, 0x7f564912, 0x29686772, 0x0d354751, 0x45023229, 0x03435105, 0x50774f28, 0x2b52784e, 0x0b430b0e, 0x5e42240b,
		0x234d2a95, 0x3f362909, 0x5241431e, 0x08008200, 0x2800022c, 0xd6017fff, 0x0b00db01, 0xd5003f00, 0x103a0c40, 0x354d0008, 0x00090810, 0xffb82c4c,
		0x1210b4c0, 0xb8224c00, 0x0db3e8ff, 0x07824d00, 0x0cb3e022, 0xe8220784, 0x07840bb3, 0x0ab3e025, 0x82214d00, 0x0f40261f, 0x1d4d000e, 0x26048210,
		0x0d0a201c, 0x82164c00, 0x10b32313, 0x07824d00, 0x0eb4f026, 0x114c000f, 0x40271082, 0x00100f3e, 0x8320044c, 0x04350854, 0x4d000f10, 0x031a3417,
		0x242e2e29, 0x0f1a8200, 0x1a3f011a, 0x06371a3f, 0x14412482, 0x09403782, 0x0c0f1f89, 0x3c890f0c, 0x89031750, 0x2e513429, 0x004b2f89, 0x1082413f,
		0x2509c042, 0x392f3311, 0xae621239, 0x14252512, 0x36361716, 0x22055841, 0x62262637, 0x1621059e, 0x07316917, 0x2705636d, 0x17031e07, 0x27032e07,
		0x7f081587, 0x1a011716, 0x352c0609, 0x1d1e1e17, 0x1221082f, 0x1729361f, 0x0807362e, 0x2433200f, 0x0f203122, 0x21342413, 0x2123220a, 0x37180b0a,
		0x5f102e34, 0x513e2571, 0x082e1a2c, 0x163722a5, 0x29364c08, 0x03a73737, 0x412c1507, 0x0e5a482c, 0x27203718, 0x191c3042, 0x23213a2c, 0x0925343f,
		0x060e1813, 0x0e013d01, 0x05202c1c, 0x5a3a737e, 0x03081f3c, 0xffff0000, 0x57ff2e00, 0x7902cc01, 0xa2000602, 0x31200f84, 0xc3220f82, 0x0f82db01,
		0x00c22608, 0x00010000, 0x015bff27, 0x006b02cd, 0x402a000b, 0x04730715, 0x0a730301, 0x0c0d0808, 0x0b790902, 0x79030641, 0x05bf4608, 0x0132ed32,
		0x2f391211, 0xddcefdce, 0x013031ed, 0x33112315, 0x31054d4b, 0xaacd0135, 0xaa2b4e27, 0xfe466b02, 0x02a5eb21, 0x56824625, 0x3a245782, 0xba017fff,
		0x0806ab6f, 0x7f0a1920, 0x7f060407, 0x010b0001, 0x0d0b0b08, 0x8506090c, 0x00054a0b, 0x00490285, 0x3f32ed3f, 0x5b84ceed, 0x865d5e21, 0x2313235d,
		0x60872135, 0x0197d124, 0x5f829780, 0x458b0127, 0xc7bbfe45, 0x26c38481, 0x0100000d, 0x826b02e8, 0x823c20c3, 0x0001226c, 0x20c3821e, 0x086b82d6,
		0x5400143d, 0x0a0f2e40, 0x810a140f, 0x09140609, 0x140f0609, 0x03008114, 0x00030014, 0x00097f03, 0x06080106, 0x00161506, 0x030f4914, 0x0a050606,
		0x4b054909, 0x333f3f00, 0x33113912, 0x86333f33, 0xfdcd2284, 0x0f035fdd, 0x07060622, 0x545eec82, 0x3e2a0806, 0xd6013703, 0x522e6125, 0x5a255f2e,
		0x25231f0c, 0x24251011, 0xd0010c1f, 0xb05ee780, 0x7fe65eb2, 0x5b61632c, 0x615b2424, 0xa6822c63, 0xab860020, 0x18003008, 0x2e405600, 0x100b1014,
		0x14141178, 0x16111411, 0x0b017317, 0x07780808, 0x04071404, 0x01020407, 0x101a1901, 0x01174111, 0x040b1479, 0x18070804, 0x23088f5d, 0x32ed3333,
		0xcd229c86, 0x9a84dc33, 0x10180124, 0x0a82cdfd, 0xc47d8727, 0x35333031, 0x705c1823, 0x209b8208, 0x32ac8233, 0x15231533, 0x3c7a80d2, 0x215c295a,
		0x26172b47, 0x82112123, 0x7d3b340a, 0x6142bd81, 0x94505bb0, 0x4b4c2a51, 0xad5b294b, 0x41bd4264, 0x1a340c3f, 0x2e405400, 0x1015100c, 0x140c0f81,
		0x090f0c0f, 0x1a151a03, 0x3a064041, 0x0b7f0604, 0x1b1c0909, 0x490f1015, 0x860c0315, 0x4b084a09, 0x0049001a, 0x603f323f, 0x012b0541, 0x3912112f,
		0xcdfdcd2f, 0x822b87dd, 0x87a38298, 0x860120a1, 0x87232092, 0x031e22a9, 0x2ca98217, 0x5320d601, 0x527b6329, 0x512a637a, 0x0c494120, 0x58cb7029,
		0x3da5a53d, 0x416fcc58, 0x19210d4b, 0x059b4fff, 0x00193908, 0x102f4056, 0x78020f02, 0x17141017, 0x18171710, 0x120b120a, 0x140a1378, 0x130a1313,
		0x1b187301, 0x1a0b0f0f, 0x10411312, 0x0b0a410f, 0x00791744, 0x3f004402, 0x333fedce, 0x98550183, 0x10872108, 0x1122a884, 0x544d1833, 0x30312705,
		0x2e233505, 0xae822703, 0x36234208, 0x33033736, 0x03333717, 0x33171616, 0x178b0115, 0x24201b0b, 0x1e422414, 0x32552159, 0x83765b9e, 0x4326a659,
		0xa5a5281e, 0x4848441b, 0x4591381f, 0x0150ad4a, 0xfeeded24, 0x43833edf, 0x000100eb, 0x064f721d, 0x001b3308, 0x0c2d4052, 0x81140d14, 0x15140c15,
		0x0115150c, 0x121d1a7f, 0x81021102, 0x19141219, 0x11111219, 0x14191c0d, 0x11124915, 0x4a0d0c49, 0x4a028519, 0xa8873f00, 0xc6102f22, 0x2107104d,
		0xc4181801, 0xa7850ba2, 0x07030e22, 0x2720a783, 0x4350a783, 0x01350805, 0x1b0a0e82, 0x12122320, 0x0b1f2527, 0x2e5d2155, 0x737b5da5, 0x3e209958,
		0x8181281c, 0x32333014, 0x33321716, 0x7f3c1330, 0xa2a2dc39, 0x2e5b2ad7, 0x000000c7, 0xf74c1801, 0x0f2b0808, 0x1f403900, 0x07077304, 0x1108730b,
		0x01b001a0, 0x73020102, 0x02100e0d, 0x0f05790d, 0x79040741, 0x00440b0a, 0x32edcd3f, 0x5aed333f, 0x5d200684, 0x12449684, 0x72112007, 0x233407f8,
		0x550e0135, 0x4e2752a7, 0x0255dcfe, 0x21fe466b, 0xdbfd2502, 0x83061d44, 0x05ab506f, 0x7f206f85, 0x7f206f82, 0x7f206f88, 0x85296f84, 0x07490f05,
		0x0b0a8504, 0x206faa4a, 0x2f6f839e, 0xcf0155e5, 0x01bcfe45, 0xc776fe8a, 0x458a0181, 0x3620df83, 0x2c063742, 0x4056001b, 0x08281710, 0x20164d00,
		0x2204820a, 0x5d000918, 0x12200588, 0xf03d0784, 0x00111c40, 0x7310094d, 0x0c730f0b, 0x1973001d, 0x147c051c, 0x1a091014, 0x790b0e41, 0x05074510,
		0x39123323, 0x05a8472f, 0x2006c44b, 0x058f472b, 0x33021e25, 0x86373632, 0x604618ff, 0x1908260b, 0x3720242d, 0x289a820e, 0x233d102b, 0x0d28493c,
		0x62461853, 0xebdb220a, 0x644618a5, 0x00012208, 0x08334236, 0x40452708, 0x0d100e2a, 0x180e4d00, 0x4c000c0b, 0x0a08200e, 0x051a4c00, 0x7f04007f,
		0x7f131d01, 0x89161c10, 0x1a050b0b, 0xe84b4911, 0x4b989309, 0x677506e6, 0x75332007, 0x2708087c, 0x4e27a901, 0x1f19082b, 0x41281021, 0x3552192e,
		0x13302532, 0x81c74652, 0x040502b4, 0x3e261004, 0x3688892e, 0xdb050729, 0x2906eb50, 0x006b02bf, 0xb95b001a, 0xa3560200, 0x47022006, 0x07820689,
		0x40e02508, 0x4d000f23, 0x04130510, 0x0d091804, 0x001c0c73, 0x01181073, 0x04061b18, 0x10127c03, 0x0a0d1313, 0x440d4119, 0x30056645, 0xfdcd332f,
		0x100133cd, 0x10ed5dd6, 0x1132edde, 0x4a108239, 0x420805fd, 0x17161413, 0x36153335, 0x33113736, 0x06352311, 0x35231507, 0x3535032e, 0x31238933,
		0x0b2a1843, 0x34195252, 0x25413343, 0xb801530e, 0x710a4842, 0x03080273, 0x95fd3c01, 0x730508e8, 0x39220473, 0x86b3304e, 0xad2a08ab, 0x1b00d001,
		0x22404100, 0x000b1018, 0x0413074d, 0x0b1a1414, 0x1d0d7f0e, 0x1c1a7f01, 0x88040507, 0x15151214, 0x491b0b0e, 0x948e4a0e, 0x1321938d, 0x20928815,
		0x88928435, 0x882a0893, 0x163e262a, 0x53530e20, 0x3e16240a, 0x172b3c24, 0x2e88d001, 0x5252052b, 0xdb040502, 0x03b330fe, 0x50530208, 0x3d261302,
		0x9382892c, 0x00002d3b, 0x6b02c401, 0x56001500, 0x280d1140, 0x4c001211, 0x0010180d, 0x0f100d4d, 0x0c0c6a00, 0x1c6ab320, 0x40d03c05, 0x4d000816,
		0x1709730a, 0x13731200, 0x037c0e16, 0x41141303, 0x0044130a, 0x423f333f, 0x3223077c, 0x4aedde10, 0x13290717, 0x32333636, 0x1515021e, 0x058e4823,
		0x11072408, 0x7f331123, 0x3f264111, 0x52112d50, 0x3e204e39, 0x0152520e, 0x2009058c, 0xb634543c, 0x084e4eb6, 0x82bbfe05, 0x060b6d90, 0xb502b03f,
		0x4b000602, 0x02000000, 0xf3ff1200, 0x7902db01, 0x2f002600, 0x00b9bf00, 0xb3f0ff21, 0x058a4912, 0x8411b321, 0xb4d82a07, 0x4c00100f, 0xe8ffb821,
		0x05a349b3, 0x1e40f827, 0x1f4d0009, 0x21168320, 0x1382101f, 0x82081f21, 0x200c260f, 0x0c4d0010, 0x23e08218, 0xe0ffb808, 0x07824383, 0x4383d820,
		0xd0210782, 0x081c82b3, 0xffb8023e, 0x0d2e40f8, 0x274c000e, 0x07072376, 0x002f3123, 0x0f001d76, 0x0f200f10, 0x1a0f0803, 0x0f301476, 0x171d7900,
		0x2a032f2f, 0x0645207c, 0x0a7c0306, 0xed3f0046, 0xed3f2f32, 0xcc2f3912, 0x24057e44, 0x5d5edcfd, 0x8d421832, 0x08136518, 0x22237408, 0x2e27022e,
		0x36343503, 0x15061737, 0x36171614, 0x16323336, 0x07061415, 0x23263427, 0x07020e22, 0x433304ed, 0x16072f22, 0x352e4307, 0x01152e49, 0x1625321c,
		0x04430205, 0x56082024, 0x02504c45, 0x24294b01, 0x0a131e15, 0x73210101, 0x41081876, 0x512d1a0a, 0x1103426f, 0x0d23311f, 0x11080619, 0x01242010,
		0x979f8989, 0x46051508, 0x3a256864, 0x82002449, 0x02220800, 0xf5ff1200, 0xdb01c701, 0x2f002600, 0x00b97900, 0x40f0ff2c, 0x00100f15, 0x1408254c,
		0x18254d00, 0x0a821312, 0x11103f08, 0xb8074d00, 0x0fb3e0ff, 0xb8014d00, 0x2b40d8ff, 0x4c001211, 0x0c038227, 0x2f31030c, 0x00228205, 0x02141014,
		0x19821f14, 0x86051430, 0x2f2f1c22, 0x080b0b00, 0x2a510f88, 0x00500088, 0x447fed3f, 0x08124106, 0x20111141, 0x21ec8201, 0x0e412315, 0x033e2219,
		0x06074117, 0x32013e08, 0x04e04d48, 0x261a3235, 0x340a0b0a, 0x2e422c20, 0x2f1a0218, 0x02051523, 0x1d200443, 0x332b1f05, 0x0f1e265e, 0x010c121a,
		0x707cdb01, 0x0e4b481d, 0x12084608, 0x30523c21, 0x2f1e1103, 0x050b4122, 0x03251d2d, 0x18314b32, 0x16433dc6, 0x41182e24, 0x5b2d0607, 0x7902db01,
		0x32002900, 0x00b9e500, 0x05574224, 0xa24d2420, 0x42078206, 0x08820557, 0x0ab3f024, 0x07824d00, 0x3340c82d, 0x224d0009, 0x00100f20, 0x8208224c,
		0x10222113, 0x0f270f82, 0x4d000f28, 0x820c080f, 0x0b182104, 0x102a0482, 0x4c000a09, 0x0010280e, 0x6c420e4d, 0x05b94f06, 0xffb80823, 0x066542e0,
		0xb3f04208, 0x024d000e, 0x40f8ffb8, 0x4d000d34, 0x0d0d730a, 0x26762a12, 0x34260707, 0x20760032, 0x12101200, 0x08031220, 0x17761d12, 0x79001233,
		0x32321a20, 0x237c2d03, 0x03060645, 0x0a0b0d7c, 0xcd3f0046, 0x1b754233, 0x2f391122, 0x5a088843, 0x13200bab, 0x44086e41, 0x7f4205c9, 0x30062725,
		0x38274e23, 0x80421023, 0x15082920, 0x099e9a05, 0x3a644e34, 0x081e8442, 0x1200022d, 0xc7017fff, 0x2700db01, 0x92003000, 0xff2d00b9, 0x0f1640e8,
		0x264c0010, 0x00121110, 0x0c18134c, 0x10134d00, 0x4c000b0a, 0x5cffb807, 0x01270509, 0xb3d8ffb8, 0x824d0012, 0xe0320807, 0x00113340, 0x127f0f4d,
		0x82281512, 0x3032030c, 0x00238205, 0x20151015, 0x15080315, 0x311a8220, 0x8605150d, 0x30301d23, 0x080b0b00, 0x0f101288, 0x95422b51, 0x33cd2506,
		0x112f32ed, 0x2206aa43, 0x43d6102f, 0xde2207ab, 0x3341ed32, 0x0e9c420c, 0x4306674b, 0x9e420bad, 0x1f082615, 0x44424f15, 0x1f9d4203, 0x040d0627,
		0x75107b79, 0x1a9f4255, 0x00ffff3d, 0x01000059, 0x026b029b, 0x002c0006, 0x00ffff00, 0x01000004, 0x022303f1, 0x18c90226, 0x2f0f0b57, 0x310940ff,
		0x50260739, 0x4f2e1101, 0x00342b2b, 0x07202f84, 0xeb222582, 0x2f829802, 0x0982e920, 0x90030622, 0x102c1682, 0x00010b40, 0x101f3d35, 0x32050150,
		0x20082a84, 0xff2e0001, 0x02d8015b, 0x002b006b, 0x23164087, 0x00121118, 0x0e20224c, 0x10224d00, 0x1e4d000d, 0x2b098218, 0xf0ffb814, 0x4d000fb3,
		0xe8ffb813, 0x092b0788, 0xb80e4d00, 0x2a40e0ff, 0x604d0008, 0x340808a4, 0x2007070c, 0x012d1176, 0x73281919, 0x7c252c2a, 0x2a0c0c01, 0x442a412b,
		0x06167c1d, 0x3f004107, 0x3fed2f33, 0x2f39123f, 0x1001ed33, 0x2f32edd6, 0xedde1032, 0xe5481833, 0x11132110, 0x087b4418, 0x9b621520, 0x9f46180b,
		0x114c0808, 0x1e801123, 0x153b4143, 0x3c381966, 0x52301f3f, 0x341a233e, 0x1b0d344d, 0x0f05030b, 0x294e3c0d, 0x0c1c463e, 0x02520d1a, 0x1ee5fe6b,
		0x1d484d4b, 0x45474521, 0x3b1e041f, 0x5f38425b, 0x43022846, 0x62600101, 0x0b264b40, 0xe6fe0101, 0x2e078752, 0x015aff47, 0x00d001cc, 0x40750027,
		0x82301f11, 0x101f27ef, 0x4c000e0d, 0x0a82201b, 0xfa830d20, 0xe9820920, 0xffb83208, 0x0a2b40f0, 0x821d4d00, 0x0505000e, 0x140b0681, 0x06050b06,
		0x16290e06, 0x7f230016, 0x220b2825, 0x250b0b89, 0x4a254926, 0x4b13891a, 0x3f004906, 0x22f2853f, 0x832f01ed, 0x2f3231f2, 0x2f32ce10, 0x0587c100,
		0x107d042b, 0x101801c4, 0x2007aa43, 0x5ef48613, 0xcf4f0e4b, 0x07450806, 0x33112315, 0x3b3a169a, 0x14611135, 0x18363631, 0x3019685c, 0x160b2f48,
		0x0b050508, 0x57413908, 0x06200d51, 0x06015353, 0x35373515, 0x31311714, 0x74051630, 0x3b4e2b67, 0x42020123, 0x484c0101, 0x02034e56, 0x29de82d0,
		0x01000000, 0x57ff0d00, 0xf882e201, 0x63002125, 0x490600b9, 0x5a54063f, 0xf82f080a, 0x4d000bb3, 0xf8ffb803, 0x000d2240, 0x1f1a194d, 0x73001473,
		0x20091111, 0x23141373, 0x191a2209, 0x44207913, 0x41117900, 0x46087909, 0x83ed3f00, 0x19dc2201, 0x28cd82c5, 0xd5de10c6, 0x2f3911ed, 0x06266bed,
		0x00822b20, 0x0f745418, 0x6c163321, 0xee21082b, 0x7d541803, 0x6c1c200f, 0x1d210b25, 0x89541802, 0x0b1e6c12, 0x86250221, 0x016c22cf, 0x25dc82e3,
		0xb556001f, 0xbb82200b, 0xffb80724, 0xba82b3f0, 0xe82c0782, 0x000c2240, 0x1d18174d, 0x7f00147f, 0x1e2bc382, 0x2114137f, 0x17182009, 0x181e8513,
		0x200e4e44, 0x20c398ed, 0x57441813, 0x6b332010, 0x441808fd, 0x1f200f5f, 0x2109f46b, 0x44180124, 0x75201269, 0x0809eb6b, 0x01008b31, 0x59ff2d00,
		0x6b02c701, 0x35001900, 0x0a191c40, 0x1b027311, 0x15731418, 0x0f79131a, 0x02181f18, 0x00151818, 0x44154116, 0x2f00070e, 0x573f3fcd, 0xfd270cb1,
		0x303133cc, 0x82113301, 0x2223219c, 0x2008c25e, 0x07b95711, 0x79527521, 0x172c08af, 0xf61b2107, 0x02f65252, 0x2995fd6b, 0x09b38e18, 0x572f0121,
		0x012207cc, 0x87824700, 0xd001ad22, 0x27088782, 0x1722403d, 0x007f0f08, 0x7f12161b, 0x13011300, 0x0f85111a, 0x02161f16, 0x13161608, 0x13491418,
		0x05890c4a, 0xed3f004b, 0xc7578d85, 0x208f840a, 0x568d8d21, 0x332208f3, 0x8e85ad01, 0x08080b2b, 0x1b200817, 0xc05353c0, 0x268b8a53, 0xd001cddc,
		0x8200bdbd, 0x00012200, 0x069f422d, 0x47001736, 0x09082540, 0x1703730e, 0x0302730f, 0x73121619, 0x79111813, 0x8c828d84, 0x4114002a, 0x08094413,
		0x440f7902, 0xdc238e82, 0x4118c519, 0xd5220e20, 0x874232ed, 0x33012206, 0x0a764211, 0x21072141, 0x6d425268, 0x52e9250c, 0x6b02e952, 0x200d7f6e,
		0x08ee5820, 0x00010024, 0x6742ff47, 0x82152005, 0x24230897, 0x7f0a0504, 0x7f0b1301, 0x12170100, 0x0f007f0d, 0x160f0801, 0x1212850d, 0x4910140f,
		0x04054a0f, 0x6e0b8500, 0x3f200858, 0x2107094d, 0x92825d5e, 0x9789de20, 0x47422520, 0x0a284108, 0x260a366e, 0x5353ce24, 0x424552ce, 0x2c580832,
		0x00013a07, 0x015bff36, 0x006b02bf, 0x4050001b, 0x0a181710, 0x10174d00, 0x164d0009, 0x05c86b10, 0x1e40e026, 0x4c001211, 0x2006384e, 0x08394e0b,
		0x1a090c2c, 0x0d790f41, 0x3f00440c, 0x9688edcd, 0x8210ed21, 0x08f55793, 0x0b965418, 0x3523152d, 0x06063533, 0x022e2223, 0x18333535, 0x26089a54,
		0x0f274f2a, 0x183c2342, 0x220f9c54, 0x18a2eba5, 0x20089e54, 0x053b4e00, 0x2405fb4c, 0x18294045, 0x0d851818, 0x09183b08, 0x0f084d00, 0x7f0e0a7f,
		0x011d0a0b, 0x041c1a7f, 0x0b151588, 0x0e491b08, 0x5d4f0c85, 0x18999505, 0x840ba943, 0xad431898, 0x4f2b220e, 0xaf431827, 0xc7812212, 0xb143186d,
		0x8200200a, 0x42202097, 0x262d065f, 0x00b9c400, 0xb3f0ff26, 0x264d000c, 0x05ef62b8, 0xffb80328, 0x1310b4f8, 0x08824c00, 0x0fb3f024, 0x07844d00,
		0xb0490d20, 0x820a2006, 0x01520808, 0x000c0b28, 0xffb80b4c, 0x124640e8, 0x0c0b4d00, 0x19067311, 0x7b260026, 0x1a14191a, 0x0118191a, 0x177b0100,
		0x17171418, 0x171a0018, 0x02731217, 0x05300520, 0x28060502, 0x25731f1a, 0x261a2720, 0x19001841, 0x44201f19, 0x79050b0c, 0x01174412, 0x75710041,
		0x2f332209, 0x057f5e33, 0x32ed3226, 0x5dd5d610, 0x11220682, 0x15523912, 0x18872105, 0x25051c52, 0xdefd1018, 0x5718c519, 0x2b26085f, 0x16331313,
		0xdf421712, 0x032e2509, 0x03230327, 0x2606ae67, 0x4d55ef33, 0x42061112, 0x183c0be8, 0x03030201, 0x51474f02, 0x03030301, 0x08035001, 0x4c090f0b,
		0x34013701, 0x92f3fe82, 0x330a7c71, 0x8a867e36, 0x01e6fe41, 0x8789411a, 0xa04c367e, 0x00479a9e, 0x01220082, 0x07431b00, 0x002c3806, 0x182340ad,
		0x157f1e19, 0x0f0e1810, 0x28104c00, 0x104d000d, 0x820c0b20, 0x22272b0a, 0x100d8427, 0x22100d14, 0x4a4c0a1f, 0x25078206, 0x0e0db4d8, 0x10844c00,
		0x4d000c22, 0xd8230782, 0x820b2e40, 0x00282208, 0x41491828, 0x7f1f3f08, 0x2e151411, 0x097f0300, 0x18192d04, 0x4a1f8514, 0x00491022, 0x0d27490a,
		0x4a042828, 0x22413f00, 0x06324105, 0x1018012b, 0x32ed32d6, 0x32d5de10, 0x4d4918ed, 0x822b2008, 0x18112000, 0x82074d49, 0x0530410b, 0x11544918,
		0x17161622, 0x20087f43, 0x5c491826, 0x30142912, 0x152e201d, 0x050f0b4d, 0x2e09d345, 0x07030220, 0x15101009, 0x130e520e, 0x18011010, 0x28086449,
		0x59599536, 0xce5b3695, 0x08ab4362, 0x55b34e2b, 0x3b353625, 0x353b2a2a, 0x05934936, 0x2a0fd349, 0x01000009, 0x022303eb, 0x49240026, 0x102a0ad3,
		0x00020b40, 0x0f04221a, 0x93180250, 0x9820107f, 0x44202b82, 0x300bcf49, 0x3c340402, 0x0250131c, 0x2b4f310f, 0xffff342b, 0x20538500, 0x2153871a,
		0x7a828300, 0x17008b29, 0x02031040, 0x822b1900, 0x09032354, 0x58854f23, 0x34342b22, 0x3a269785, 0xb001f5ff, 0x5b878f02, 0x31843384, 0x45330522,
		0x03235c82, 0x854f3d0f, 0x82318360, 0x821b2063, 0x02e22c81, 0x0006026b, 0xff0000a1, 0x821f00ff, 0x01de223f, 0x200f82db, 0x200f84c1, 0x201f825b,
		0x20d784cc, 0x33d78628, 0x008b0012, 0x0100b913, 0x0940f8ff, 0x0a00170f, 0x0c010150, 0x2009ab4a, 0x213f8228, 0xdb8302c7, 0xdb8c4820, 0x2d250228,
		0x02500213, 0x2a832200, 0x00ffff2d, 0x01f3ff19, 0x027902d8, 0x84e80106, 0x772d2067, 0x02230597, 0x84350206, 0x201f840f, 0x83fb8203, 0x0701251f,
		0xefff8300, 0x1a347782, 0xb80203b1, 0x0d40f1ff, 0x11193b29, 0x330c0350, 0x270c024f, 0xcc825182, 0x00ffff22, 0xfb834384, 0x01264383, 0xf8830006,
		0x31850000, 0x0d40f62e, 0x15023826, 0x30100350, 0x2410024f, 0x8b4b3185, 0x4b67820a, 0x6341058b, 0x01022b09, 0x07423000, 0x11025026, 0x8d4b4f3a,
		0x08634105, 0x20058f4b, 0x078f4b8f, 0x172e3384, 0x01021040, 0x1f463401, 0x05025010, 0x944b4f3e, 0x06634105, 0xf4ff2624, 0xcb83d101, 0x00ca0223,
		0x20cb8400, 0x32cb84f8, 0xffb80102, 0x370d40f7, 0x501c2749, 0x4f410f02, 0x88350f01, 0xff4824cb, 0x84bf01f5, 0x82ea20cb, 0x83cb8733, 0x40ef2e31,
		0x16412f0d, 0x0202500f, 0x02014f39, 0x2acb8a2d, 0x01f3ff18, 0x026b02cf, 0x840f0206, 0xff2c26db, 0x01af015b, 0x200f82d0, 0x200f84a3, 0x22498237,
		0x820603bd, 0x82cb20b7, 0x00072d09, 0x0000008a, 0x4010008b, 0x1200010b, 0x0faf6318, 0x21823f20, 0x7b02b622, 0xeb202b82, 0x2b837f84, 0x09202986,
		0x850b9f7e, 0x881a2053, 0x08a34253, 0x0001022e, 0x09002614, 0x1e010250, 0x1201014f, 0x0b23a418, 0x8f205b85, 0x33835b88, 0x10401722, 0x5c823184,
		0x82000221, 0x87002031, 0xffff2131, 0x20053b7b, 0x21638203, 0xb7843200, 0x03246388, 0x34220002, 0x03266382, 0x024f2c04, 0x638b2004, 0xf5ff2825,
		0x8202cc01, 0x52002163, 0x6386bf84, 0x63823184, 0x0af69218, 0x00343423, 0x0b9f7b00, 0x21001a2f, 0x21b58800, 0x4d000e10, 0xf0ffb81c, 0x200782b3,
		0x2607891a, 0x0d1440e8, 0x83154d00, 0x1815211d, 0x11260982, 0x00100f10, 0x20820d4c, 0x0883b420, 0xffb80725, 0x832a40e8, 0x10033009, 0x034d0010,
		0x4d000f18, 0x0a76171f, 0x7b181e23, 0x222e0658, 0x1e1e7918, 0x0f7c1405, 0x057c1b46, 0x41180045, 0xd6230997, 0x1832ed2b, 0x7b103c58, 0x172d0f40,
		0x21373632, 0x22131616, 0x26210706, 0x102e7b26, 0x4442dc2f, 0x05edfe05, 0x43404142, 0x06130105, 0x101b7b44, 0x6b72a92b, 0xf801726b, 0x6f69696f,
		0x0e0f7b00, 0x7324f783, 0x20210c40, 0xfe87bd83, 0x82b3d821, 0x451c20c5, 0x0e4106f4, 0x40e8220a, 0x2126832b, 0x05831815, 0x82171f23, 0x39e08200,
		0x09400a82, 0x220a480c, 0x1e3f8618, 0x1e021e4f, 0x881b141e, 0x8814500f, 0xe5845105, 0x8f07a062, 0x0fe27ae6, 0xe2820720, 0xe2852320, 0x26263322,
		0x2d11d17a, 0x064436d3, 0x354108fe, 0xfc084332, 0xbd7a4408, 0x4ae02c0f, 0x01494847, 0x42424453, 0x42000044, 0x03210b3b, 0x0d3b4278, 0x0003042d,
		0x09003624, 0x2e040450, 0x1804034f, 0x8308e545, 0x083b4233, 0x42790321, 0x31840b3b, 0x50000924, 0x31820e04, 0x31870e20, 0x2e2a6382, 0xd501f3ff,
		0x26021a03, 0x6385e002, 0x3106ab44, 0xffb80102, 0x290d40e8, 0x50040f3b, 0x4f330002, 0xab440001, 0x423b2009, 0x0321079f, 0x20638500, 0x374418ef,
		0x40e62e07, 0x0839270d, 0x1f025000, 0x1f014f31, 0x0adf4325, 0xf8ff0926, 0x0603ee01, 0xd6206782, 0x8a226784, 0xbf430900, 0x26072806, 0x50150b27,
		0x45280b01, 0x4e180588, 0x022007df, 0x0ae79118, 0x0000122a, 0x010b4010, 0x20222113, 0x09212982, 0x06874523, 0xbb835385, 0x83205385, 0x17275384,
		0x01021040, 0x823a2807, 0x0b022654, 0x0b014f32, 0x0b5b4326, 0x58ff2426, 0x8f02cd01, 0x07934218, 0x82830021, 0x2231845b, 0x82352313, 0x0902265c,
		0x09014f2d, 0x82318621, 0x2063858b, 0x26b7873e, 0x24006501, 0x84008900, 0x28222231, 0x2063842a, 0x4163822b, 0x0022061c, 0xbf880000, 0x6387b520,
		0x2d650123, 0x22318500, 0x8425232e, 0x82262063, 0x0a834163, 0x00003625, 0x8303bf01, 0x41da20c7, 0x022a0de7, 0x2c1a0001, 0x02500a14, 0x31822409,
		0xc78b1820, 0xad203383, 0x0221c783, 0x0be741fa, 0x08010229, 0x09152c1a, 0x82000250, 0x88002031, 0x05a74b31, 0x6b02cc37, 0x28000b00, 0x0d031440,
		0x05067309, 0x0c0b0073, 0x08790005, 0x0d68180a, 0x5ace2008, 0xdd2206ba, 0x681810ed, 0x23330a0e, 0x8f352335, 0x86eb3d01, 0x0246e24f, 0x21fe4625,
		0x8246a5eb, 0x012a08e8, 0x7fff6b00, 0xd001b801, 0x24000900, 0x0b041240, 0x06007f07, 0x050a017f, 0x09490285, 0x4a018506, 0xceed3f00, 0x1001ed3f,
		0x4f85edd6, 0x11233322, 0x2c06bb5e, 0x4d0138a3, 0x014f35fb, 0xbbfe45d0, 0x2d4a82c7, 0x2400ffff, 0xd001faff, 0x26021a03, 0x0341de02, 0x03042d0d,
		0x06362400, 0x0704501f, 0x07034f2e, 0x260ceb42, 0x01f6ff2d, 0x828f02c7, 0x42fe2033, 0x0d2410eb, 0x0d04501e, 0x0d203182, 0x04223188, 0x25822400,
		0x7802e230, 0x17000b00, 0x27001b00, 0x00b99d00, 0x2e61ff0a, 0xb80a2b05, 0x1840e8ff, 0x084d000d, 0x04830f10, 0x4d000d23, 0x20098304, 0x20138304,
		0x06795202, 0x4d080782, 0x0d3540e8, 0x184c000e, 0x120c0618, 0x00191900, 0x21202629, 0x26277e20, 0x26272714, 0x24211d27, 0x2301234f, 0x21281e1d,
		0x41234426, 0x0f412027, 0x1e1b1803, 0x45091544, 0x3fcd3f00, 0xcddedddc, 0x3f3f333f, 0xd6100133, 0xcd5ddcdd, 0xaa711133, 0x32c62309, 0x1e82102f,
		0x622f3221, 0x012109d2, 0xab781814, 0x534b180a, 0x032a080a, 0x27231533, 0x33112315, 0x33352713, 0x01032311, 0x2b2b25e2, 0x2b2b2626, 0x0c0f6b25,
		0x0b10100b, 0xa1360f0c, 0x423edfa1, 0x03820977, 0x4ecf012a, 0x4e4e5c5c, 0x384f5b5b, 0x22080083, 0xc5fe3737, 0x02fb7545, 0xb74cfe6b, 0x0195fdfd,
		0x010000b4, 0xec000000, 0x3201f401, 0x0d000300, 0x820203b3, 0xcd2f2306, 0x89822f01, 0x15211129, 0xfef40121, 0x4132010c, 0x1f3405ef, 0xd401f3ff,
		0x3c007802, 0x1140e800, 0x000d1830, 0x0c10304d, 0x182b0482, 0x4c000b0a, 0xe8ffb82b, 0x841211b4, 0xb3e02608, 0x254d0010, 0x05cb56b8, 0xe8250782,
		0x4d0011b3, 0x820f8613, 0x220f8707, 0x850cb3f8, 0x54402217, 0x08428209, 0x18181f48, 0x171a1e21, 0x35231504, 0x04023c38, 0x15760432, 0x3e152a2a,
		0x23363600, 0x0d0d3276, 0x32103200, 0x08033220, 0x3c1a3d32, 0x02170279, 0x38793521, 0x02af381e, 0x0f0202bf, 0x02381f38, 0x38023802, 0x26292910,
		0x68182d7c, 0x39291144, 0x5d5d2f2f, 0xed103311, 0x2d048432, 0x5ec61001, 0x102f325d, 0x332f33ed, 0x0883cc10, 0x39171129, 0x39171211, 0x64332f32,
		0x13220c54, 0xef532135, 0x08856f08, 0x15330726, 0x07060623, 0x21210682, 0x06375c06, 0x9b4e1720, 0x34710806, 0x35233736, 0x37363633, 0x31011f37,
		0x261e130c, 0x153d2e14, 0x25462611, 0x142c4934, 0x15512f09, 0xe9272339, 0x380ed2fe, 0x1e433440, 0x2b592a18, 0x132e4d3b, 0x53300504, 0x21284015,
		0x163c6601, 0x1723171c, 0x4808110c, 0x2f1d0d0b, 0x151c1e3b, 0x1524133c, 0x1f153c16, 0x0e13302a, 0x1a101642, 0x111e382b, 0x143c0c1d, 0x00131724,
		0x00010000, 0x08048221, 0x6b02d25d, 0x97001700, 0x10074e40, 0x140f080f, 0x13130403, 0x0d160f13, 0x090e0d0a, 0x1211060e, 0x09050505, 0x03060701,
		0x1114730a, 0x190d0d10, 0x080e1218, 0x79150204, 0x09040517, 0x0f121308, 0x2008100e, 0x0e000208, 0x08040801, 0x120e0e12, 0x0c040408, 0x440c4117,
		0x123f3f00, 0x822f3917, 0x5d5e2400, 0x8533115d, 0xed102301, 0x11820132, 0x12112f3b, 0x33332f39, 0x3232fd33, 0x32cdcc32, 0x04877d2f, 0x8710c4c4,
		0x1801c4c4, 0x280f8c10, 0x15013031, 0x17371523, 0x24038407, 0x27073523, 0x27038437, 0xd2013523, 0x831b68b0, 0x51230282, 0x82821a68, 0x02b03a02,
		0x3188486b, 0x31673e38, 0x89ab3d38, 0x673c3931, 0xaa3d3830, 0x00020048, 0x20e38228, 0x2de382cb, 0x000b0007, 0x0a15402b, 0x01090406, 0xa5827303,
		0x06020d29, 0x790a0779, 0x8304410b, 0xdefd21ac, 0x25068963, 0x1032cefd, 0x798432ce, 0x1123113d, 0x15253523, 0xcb013521, 0x01a951a9, 0x015dfea3,
		0x75fe45d0, 0x9b458b01, 0x82004646, 0x821b205b, 0x02d0315b, 0x0018006f, 0xb59c0027, 0x00101021, 0xffb8144d, 0x82052b59, 0xb4e02d08, 0x4c000a09,
		0xe0ffb812, 0x4d0012b3, 0xd0220782, 0x078411b3, 0x0ab3e822, 0xe0250784, 0x4d0009b3, 0x211f8211, 0x20823040, 0x76232908, 0x13000013, 0x1d060a29,
		0x0c730318, 0x09280408, 0x0c1d7917, 0x7902051d, 0x0f180818, 0x021d1f1d, 0x181d181d, 0x107c1904, 0xed25b285, 0x2f393912, 0x0c98422f, 0x3232d625,
		0x843232ed, 0x485e18c1, 0x1525280c, 0x35231523, 0x18333523, 0x2609a681, 0x23061415, 0x7c131523, 0x3e2a059c, 0x2e343502, 0xc97e0102, 0x00824951,
		0x4c214a08, 0x7b706c23, 0x1f452878, 0x2523071e, 0x15172a3d, 0x3f9e2f24, 0x5b3f5f5f, 0x09270140, 0x625e5e06, 0x8c015b58, 0x0aee0102, 0x2226301b,
		0x000c1b2d, 0x74000100, 0x7f011b02, 0x0d009802, 0x0bb71500, 0x0a04030a, 0x00000704, 0x434d192f, 0x1826200b, 0x200a4f41, 0x3d4018fa, 0x1b02230c,
		0x41183339, 0x6e18081b, 0x003d0fab, 0xff360003, 0x02c201fb, 0x001a0071, 0x00380029, 0x7b51407a, 0x326a0132, 0x012e7901, 0x3e02826a, 0x02267a26,
		0x227b226b, 0x95198502, 0x17950219, 0x01168101, 0x85011394, 0x0e900113, 0x190e1401, 0x088be3e5, 0x101e183a, 0xc5754030, 0x1f1f2902, 0x141a2c39,
		0x611e3124, 0x232e194e, 0x2f241614, 0x08271a1a, 0x06030205, 0x04580204, 0x10020306, 0x162e3e26, 0x091c2228, 0x5c3c4811, 0xdd26015e, 0x14e3e519,
		0x7cffff21, 0x6b2806db, 0xc6020602, 0x02000000, 0x08053b4f, 0x006b0243, 0x0016000b, 0x0629404c, 0x78120c12, 0x0b14060b, 0x1105060b, 0x0078110c,
		0x00001405, 0x000c0c05, 0x1700180b, 0x4106440b, 0x1241050c, 0x44007911, 0x32ed3f00, 0x3f3f333f, 0x10c61001, 0x3d3911ce, 0x06a9512f, 0x08156a18,
		0x3e333b08, 0x1e333703, 0x0e031703, 0x2e210703, 0x2d170903, 0x5f1e332e, 0x2c33361b, 0x2109ee10, 0x01142b27, 0x24291417, 0x959d591e, 0xa3464e92,
		0x02409da5, 0x7c5b1923, 0x98555598, 0xa7825c7c, 0x00005b25, 0x8202cc01, 0x280021a7, 0x0120a782, 0xc720b784, 0x1128a782, 0x1d403700, 0x0e090e05,
		0x06309a86, 0x0f130006, 0x0012090f, 0x4110790e, 0x08790509, 0xed219985, 0x58988232, 0x48520579, 0x30312205, 0x22888301, 0x82352115, 0x21280897,
		0xbf012135, 0x4d524f20, 0xfe33011d, 0x4e4b216f, 0xe5fe234d, 0x28027a01, 0x8483782c, 0x3d434637, 0x33767d7f, 0xff000046, 0x0eeb6b18, 0x330aff4c,
		0x00170003, 0xb9d00023, 0xf0ff2200, 0x0e0d1540, 0x10204c00, 0x1c290583, 0x4d000e18, 0x000d101c, 0x0a0c4d4d, 0x1340e022, 0x15271082, 0x4d001020,
		0x820f1015, 0x08182804, 0xb8114d00, 0x82b3e8ff, 0x21078211, 0x1482b3f0, 0x17820784, 0xffb80b23, 0x821783f0, 0x83e82007, 0x22078217, 0x823b40f0,
		0x08072118, 0x07212d82, 0x212a8218, 0x0e821007, 0x014f2708, 0x4002015f, 0x02005000, 0x00010001, 0x0e761e18, 0x04761825, 0x48100b40, 0x79032404,
		0x1b090000, 0x2146137c, 0x3b4d097c, 0x08176c0e, 0x7c465d20, 0x06355d0c, 0x15331329, 0x3e342723, 0x69323302, 0x2324053b, 0x37022e22, 0x2b0a1048,
		0x929898af, 0x32513a20, 0x213a5231, 0x11faef18, 0x22475b22, 0x0e3ef118, 0x827a5324, 0x03827a82, 0x5b000021, 0x00350fdf, 0x00400001, 0x02d00100,
		0x001a006b, 0x05384063, 0x151a0a05, 0x06d5411a, 0x0a050b23, 0x08e37505, 0x151c0a24, 0x225e7310, 0x151b3208, 0x12050510, 0x44124113, 0x1a440a0b,
		0x3f004100, 0x058f7432, 0x332f192b, 0x10180133, 0xed5d5ed6, 0x14c17232, 0x07030e22, 0x08092671, 0x3e11333a, 0xbb013703, 0x3432341e, 0x3f421e1f,
		0x165d1538, 0x1f3e3a34, 0x391c5252, 0x02132e34, 0x444d326b, 0x471b223e, 0x2e325f55, 0x173f4e58, 0x6b02d6fe, 0x4620ecfe, 0x00214647, 0x01200082,
		0x08083743, 0x4a00162c, 0x0a102740, 0x0b780a05, 0x0b0b1410, 0x05001110, 0x11167800, 0x11161614, 0x160b0505, 0x00170b18, 0x05114416, 0x0b0a4110,
		0xa8820044, 0x4305ea54, 0x21231633, 0x5427032e, 0xaa8207c3, 0x92012108, 0x232b2f14, 0x2c240908, 0x1754142f, 0x1e322d2c, 0x31361a66, 0xb265102b,
		0x1918658f, 0x62b19067, 0x24093d43, 0x00010000, 0x36048222, 0x006b02d3, 0x4099001a, 0x0f280123, 0x20014d00, 0x4c000e0d, 0x830c1801, 0x820b200a,
		0x0d0e2604, 0x01007b0e, 0x26288214, 0xb81a080d, 0x82b3d8ff, 0x22078224, 0x820cb4e8, 0x22088227, 0x822b40e0, 0x0f250826, 0x7e1a001a, 0x10140f10,
		0x15000f10, 0x07027308, 0x7315101c, 0x101b1619, 0x000e411a, 0x16150f0f, 0x44070844, 0x05c4550d, 0x333f3322, 0x200cc055, 0x0d9454de, 0x44331121,
		0x01210611, 0x2400822b, 0x13133031, 0x06844133, 0x0323033c, 0x07020e14, 0x37123623, 0x5b5bfa33, 0x08080a06, 0x02024f03, 0x55020303, 0x06825752,
		0x4f012108, 0x5b0e0e06, 0x34013701, 0xaaa1923b, 0x8a823653, 0xdbfe418d, 0x8d412501, 0xa136828a, 0x009b2f01, 0x0021c582, 0x20048237, 0x08f382be,
		0x4e001144, 0x001a3040, 0x01000d01, 0x04010926, 0x02091409, 0x00050009, 0x14090e7e, 0x730e090e, 0x73051311, 0x01010710, 0x12070107, 0x0905410f,
		0x0e440741, 0x3f004400, 0x333f3f32, 0xd610013f, 0x10ed5d5d, 0x3169fdde, 0x825d2005, 0x30312800, 0x27032e21, 0x83112311, 0x112808ad, 0x6b011133,
		0x463c3111, 0x1f534b25, 0x0f354046, 0x7f6d2a4b, 0x12fe4a8e, 0x83366b02, 0x012b7984, 0x0095fde1, 0x25000300, 0xcf208b82, 0x21088b82, 0x00070003,
		0x4033000b, 0x000a0a19, 0x0b0d0500, 0x0401010b, 0x08790b0c, 0x79040208, 0x79014407, 0xce504102, 0x32c6220a, 0x05a7442f, 0x312f322c, 0x35210130,
		0x15210121, 0x03821321, 0xfec70139, 0xfe990167, 0xfeaa015e, 0x4a013056, 0x2402b6fe, 0x47dcfd47, 0x4f496901, 0x022508af, 0x00060279, 0x0da74432,
		0x00d20227, 0x00020000, 0x368b8249, 0x007102c7, 0x001d000e, 0x1b154087, 0x4d001018, 0x000f101b, 0x8218174d, 0x28162104, 0x04200e82, 0x82063f64,
		0xb3f02407, 0x824d0009, 0xb3e02507, 0x024d0008, 0x12201783, 0xf0220784, 0x078511b3, 0x0a09b424, 0x18824c00, 0x1b40e022, 0x19352182, 0x131f0376,
		0x09007307, 0x1e090801, 0x13137907, 0x0f440900, 0x0645187c, 0x01ed2108, 0x65068543, 0x2b20091d, 0x13220083, 0x46481632, 0x11232105, 0x08e74418,
		0x24054a48, 0x7a726aeb, 0xde44186a, 0x36213f0a, 0x24161627, 0x6371022f, 0xe65b6b62, 0x07046102, 0x02470203, 0x1e0cfa02, 0x31242631, 0xe2820c1c,
		0x01002408, 0x00002800, 0x6b02bf01, 0x59001500, 0x0a0a2f40, 0x11001107, 0x140a0d78, 0x100a0d0d, 0x03170410, 0x770a070a, 0x0d310626, 0x0a16070d,
		0x0300000a, 0x0e79110d, 0x79030741, 0x07254606, 0x19391126, 0x1801332f, 0x200de169, 0x05ed69ce, 0xc47d0833, 0x06013031, 0x15210706, 0x36363521,
		0x27262637, 0x080a8235, 0x01031e2b, 0x2a6a3145, 0x69fe3f01, 0x34366a22, 0x89011e63, 0x260ddcfe, 0x4201322e, 0x463c8040, 0x45843741, 0x372d8145,
		0x3c341346, 0x21a78541, 0xe7440024, 0x00073005, 0x010f4020, 0x04067303, 0x02080904, 0x49077905, 0xd36d0698, 0x09464a08, 0xadd00130, 0x6b02ad52,
		0x02dbfd46, 0xff004625, 0x6b6d00ff, 0x200f820c, 0x2653822a, 0x029302d4, 0x82d70206, 0x00012264, 0x080f8216, 0x6b02d833, 0x55001500, 0x0c0f2d40,
		0x09100809, 0x08117810, 0x11081114, 0x0e001511, 0x0d780e15, 0x0d0d1400, 0x0d171500, 0x1116090d, 0x0d0e4110, 0x44080941, 0x05044315, 0x200a906b,
		0x0f8e6bce, 0xc40e1023, 0x050e43c4, 0x360f906b, 0x1e0b7d01, 0x23152722, 0x215a1e45, 0x5ba23259, 0xa459817a, 0x6b235a30, 0x4f29098a, 0xeded2501,
		0xa84edffe, 0x20a38454, 0x20a3822b, 0x2ea382c9, 0xb976001b, 0xe8ff1900, 0x001413b4, 0x4ab8194c, 0x078205ef, 0x11b3e822, 0x21056f60, 0x078410b3,
		0x2c40e827, 0x044d000f, 0x08268310, 0x11200422, 0x1b4c0012, 0x0e02730f, 0x7313070e, 0x730a1d16, 0x021b1c07, 0x0e0d1079, 0x14010e0d, 0x44014108,
		0x22054768, 0x662f2f39, 0xed250596, 0x11edde10, 0x460c8339, 0x212208e8, 0xd45b3523, 0x14152905, 0x33353316, 0x35363215, 0x28080582, 0x23020e14,
		0x2f4a1f01, 0x52122841, 0x314a3127, 0x28125227, 0x249e2f41, 0xd1395d42, 0xf75465ce, 0xce6554f7, 0x425d39d1, 0x21be8224, 0x04821200, 0x7902e232,
		0x98002b00, 0xff2100b9, 0x0d0940e8, 0x181d4d00, 0x11200482, 0x2007b863, 0x2708820b, 0x100e5140, 0x18074c00, 0x072ac882, 0x4d000f10, 0x000e1807,
		0x0e83014d, 0x0e830120, 0x6f113008, 0xaf157f15, 0x0415bf15, 0x761a1515, 0x0e12120e, 0x2960012d, 0x29a02970, 0x290429b0, 0x04762429, 0x2c040000,
		0x2a790129, 0x79111544, 0x471f4414, 0x322107c6, 0x07d9483f, 0x2f32ed29, 0xce10335d, 0x84102f32, 0x23e38809, 0x33372b2b, 0x2b0bff70, 0x15330706,
		0x033e3523, 0x022e3435, 0x26051f71, 0x1517021e, 0x186d1223, 0x301ea3e7, 0x4a953d46, 0x2e4c6637, 0x37664c2e, 0x463d954a, 0xa2e7183c, 0x00023413,
		0x01f6ff31, 0x00da01d7, 0x002b0019, 0x2a00b967, 0x82b3f0ff, 0xb82523e9, 0x0786e0ff, 0x3440f028, 0x184d000d, 0x04821010, 0x000f1824, 0x8218124d,
		0x12390843, 0x4d000818, 0x047f200d, 0x2d040909, 0x2c158227, 0x5110881a, 0x510a8809, 0x06bc6424, 0xd151ed20, 0x05344f05, 0x2005a06a, 0x2500832b,
		0x17163201, 0xc6821411, 0x26260723, 0x070c4f27, 0x13023e25, 0x82373632, 0x263526f9, 0x06222326, 0x081f8215, 0x300d014e, 0x09031757, 0x1d0d0e12,
		0x41141124, 0x314a302d, 0x52391f1a, 0x0d342022, 0x2a070203, 0x0d4b3f18, 0xda012d1d, 0xd4fe0813, 0x0c131d16, 0x12064604, 0x241e1116, 0x38355840,
		0xfe223f5a, 0x0d0b1764, 0x03f10f1b, 0x24515b08, 0x001a2e3d, 0x022f0082, 0x5bff4700, 0xb502cc01, 0x33001b00, 0x82b9b100, 0xb3e825fe, 0x314d0012,
		0x4026ef82, 0x4d001113, 0x0d82102b, 0x82182b21, 0x20212109, 0x1720ec82, 0x7306cb49, 0xe8260a32, 0x000a08b4, 0x1882114c, 0x0f0eb422, 0x210eec74,
		0xe474000a, 0x082e2605, 0x044c0009, 0x08288310, 0x0f292925, 0x0c0c822d, 0x35148224, 0x007f1b1c, 0x01080101, 0x86280f34, 0x1f072929, 0x30511988,
		0x014d0788, 0x573f004b, 0x3920071d, 0x23097945, 0x32ed2f33, 0x200be251, 0x2200832b, 0x49112317, 0x781808dc, 0xe37609b4, 0x23262109, 0x0aca6718,
		0x9a157908, 0x41311d53, 0x2d3c2324, 0x252e301a, 0x230f2135, 0x3d244738, 0x1931142f, 0x15232e19, 0x07064e47, 0x262d3d2d, 0x02a5342c, 0x31493197,
		0x402c1618, 0x134b292b, 0x3a31270a, 0x314f381d, 0x114b1c17, 0x3220100f, 0x444f4522, 0x34333635, 0x0000413f, 0x1d000100, 0xd4015bff, 0x1500d001,
		0x19403300, 0x0f00030c, 0x15101082, 0x17078206, 0x16158200, 0x100c0c03, 0x10491506, 0x3324d183, 0x33113912, 0xc643ce82, 0x11ed2a06, 0x30313939,
		0x17161613, 0x4f441836, 0x232e0808, 0x7927032e, 0x39184124, 0x0a521142, 0x2a423121, 0x50020a08, 0x39362905, 0x5cd00116, 0xc2645bbe, 0x7b6f2b4f,
		0x502a3f82, 0xa6b45725, 0x7f823490, 0x18000221, 0x30099f57, 0x40a7003a, 0x0b103a0b, 0x10394d00, 0x284d000c, 0x058e4bb8, 0xf0280782, 0x000f3440,
		0x0e18164d, 0x10210482, 0x3d04820d, 0x000c0b20, 0x1138134c, 0x124c0012, 0x4d001108, 0x0d0c1810, 0x20104c00, 0x0a4d000b, 0x04821018, 0x780f1021,
		0xb320059f, 0x06250c82, 0x40f0ffb8, 0x3d108223, 0x820d1b1b, 0x26123c2e, 0x03151582, 0x123b3882, 0x00008829, 0x18000001, 0x51338808, 0x57188921,
		0x2f290896, 0x0132ed5d, 0x33edd610, 0xa748182f, 0x852b2010, 0x06132100, 0x14935718, 0x07171624, 0xd243032e, 0x17162105, 0x1f905718, 0x1149312f,
		0x1f150512, 0x1f0c1626, 0x282f131d, 0x8e571824, 0x183e3021, 0x09034008, 0x0b03070a, 0x25181215, 0x1831181c, 0x3c0e8d57, 0xff450001, 0x01d201f5,
		0x003500dc, 0x34354056, 0x000d0b18, 0x0a20344c, 0x10294d00, 0x8304820b, 0x14143c09, 0x2e372305, 0x3333820e, 0x2b00821b, 0x362b0801, 0x1486152e,
		0x881d0014, 0x430b5126, 0x112307e5, 0x42ed2f39, 0x332506b8, 0x1032ed2f, 0x08b742ce, 0x1e320123, 0x41e48502, 0x33210500, 0x24ee8515, 0x023e3233,
		0x0a065337, 0x032e7f08, 0x01363435, 0x272e1721, 0x050d071e, 0x132a251b, 0x1d124435, 0x5a591224, 0x14202a17, 0x2a341b83, 0x1116081f, 0x49214966,
		0x252c273c, 0x0d13160a, 0x04dc016e, 0x47030807, 0x06070802, 0x1a15231e, 0x0742050e, 0x49151d12, 0x040b0a07, 0x0b190946, 0x242c371f, 0x1004103e,
		0x43152119, 0x01000042, 0x58ff3f00, 0xaf02bf01, 0x8d002c00, 0xff2b00b9, 0x0e0bb4e8, 0xb8274c00, 0x10b3d0ff, 0x07824d00, 0x0fb3e022, 0xf02a0784,
		0x4d000eb3, 0xf8ffb823, 0x078412b3, 0x3840f027, 0x184d0011, 0x20048210, 0x2b048317, 0x000a1810, 0x0928104d, 0x201a4d00, 0x33082182, 0x041e1e1a,
		0x00038209, 0x1382252e, 0x2d131b1b, 0x0e0e8928, 0x851a1e2d, 0x4b034d1d, 0xed3f3f00, 0x2f331132, 0xc61001ed, 0xed102f32, 0xed32de10, 0x332f3332,
		0x27090561, 0x052b2b2b, 0x27070614, 0x0805dd45, 0x032e276b, 0x043e3435, 0x21352337, 0x15050e15, 0x1e171614, 0x1bbf0103, 0x0b044810, 0x1d0e080b,
		0x4630202d, 0x2d1b152c, 0x14373a38, 0x155601eb, 0x313d3f3b, 0x2c4a421e, 0x2f11253d, 0x16173f23, 0x1b191506, 0x0e140f0c, 0x1e08050b, 0x2c2e4430,
		0x3d474f55, 0x41461231, 0x493e3312, 0x412a544f, 0x15070b3b, 0x0000281e, 0xff470001, 0xd300195b, 0xa6340884, 0x0c1f382d, 0x78fe0405, 0x31000300,
		0xc301f2ff, 0x1300b502, 0x29001e00, 0x0b40bb00, 0x000e1828, 0x0d10284d, 0xb8214d00, 0x0db4f0ff, 0x1d4c000e, 0xb3e8ffb8, 0x07821582, 0x82b3f021,
		0x181c2018, 0x210a4758, 0xa1411540, 0x00122405, 0x8310164c, 0x1812212c, 0x2606934f, 0x000e0940, 0x82100c4d, 0x830c200d, 0x200c822f, 0x21478208,
		0x10820e40, 0x82100821, 0x8303200d, 0x82022068, 0x1f40211a, 0x253b1282, 0x2b058219, 0x0f821a24, 0x020f1f0f, 0x851a2a0f, 0x14002424, 0x1f510a88,
		0x4b4d0088, 0xd6200af5, 0x14c55618, 0x254b2b20, 0x097a4f05, 0x3e343539, 0x3e321302, 0x1e233702, 0x0e221303, 0x2e330702, 0x4c32fa03, 0x82191932,
		0x2a078704, 0x0e1c2b1e, 0x0e01eb02, 0x821e2c1d, 0x020f320a, 0x1c0f02eb, 0x31b5022b, 0x5252835c, 0x31315b83, 0x3607835b, 0x84fd315c, 0x3a5e4324,
		0x24435e3a, 0x3f223502, 0x59373759, 0x8200223f, 0x00013f00, 0x01f5ff36, 0x00d001c2, 0x40230015, 0x097f0c11, 0x17000a09, 0x8509160a, 0x8812490c,
		0xb5845103, 0x2406e651, 0x3031ed2f, 0x06714725, 0x35233525, 0x73141133, 0x22080570, 0x3c1cc201, 0x2238281c, 0x08d88610, 0x0e171e12, 0x0e0f1734,
		0x442b130c, 0xfe45e331, 0x1a2e24e5, 0x180c0a0a, 0x3912176d, 0x0100001d, 0x00b502d4, 0xb98a0024, 0xe0ff1d00, 0x4d000ab3, 0xd0ffb81c, 0x08824d40,
		0x08065363, 0x09081041, 0x180e4c00, 0x0e4d000e, 0x81080308, 0x09140e09, 0x001f0e09, 0x24810003, 0x2424141f, 0x0920031f, 0x03034d00, 0x17262409,
		0x00250917, 0xa01f4a24, 0xc003b003, 0x0e030303, 0x1a89130e, 0x7d09084d, 0x32260519, 0x335d3311, 0x4a43333f, 0x11ce2505, 0x2b2f3d39, 0x210fb152,
		0x00832b01, 0x15632120, 0x033e3206, 0x23032e37, 0x27070622, 0x32333636, 0x1e17021e, 0x84051903, 0x0f450810, 0x151e1919, 0x0c05110d, 0x1e162005,
		0x0b1b222d, 0x2b343c21, 0x5bc65b10, 0x5d65672f, 0x7c763224, 0x3a27377c, 0x02031326, 0x12050242, 0x4d1b2c20, 0x3b889399, 0xff000000, 0xff4700ff,
		0x01ad015b, 0x000602d0, 0x240f8490, 0x0100001e, 0x200f84d6, 0x36208259, 0xff400001, 0x02c30158, 0x003a00b5, 0x3a00b9d2, 0x0fb3e0ff, 0x423a4d00,
		0x362306bf, 0x83d0ffb8, 0x2407820f, 0x000eb3d8, 0x3b07824d, 0x000db3f8, 0xffb8354d, 0x0f3440d8, 0x101d4d00, 0x1c4d0010, 0x00121020, 0x09101c4c,
		0x08250a83, 0x28184d00, 0x2b048212, 0x00111020, 0x1018114c, 0x28104d00, 0x18210483, 0x05d84d08, 0x4883f020, 0xb8023d08, 0x2d40e0ff, 0x314d000d,
		0x22220331, 0x3c03820c, 0x1a822b17, 0x0082381a, 0x12080112, 0x8532173b, 0x001f3131, 0x3b0f0f89, 0x88262323, 0x06074d1f, 0x333f004b, 0x2f32ed3f,
		0xed2f3311, 0x220fc745, 0x1833edde, 0x26133ea4, 0x252b2b2b, 0x44151616, 0x262107b7, 0x05ad4a27, 0x06853720, 0x240a357d, 0x021e1415, 0x07f24533,
		0x01163308, 0x1b445629, 0x0b044711, 0x3d36080b, 0x291c605f, 0x3433132f, 0x2c4d3920, 0x0e0e412d, 0x2424350f, 0x180f2032, 0x44213a2a, 0x3f42173c,
		0x0f4d4c2c, 0xd5443538, 0x1e250808, 0x5a0f0b18, 0x2a3b2752, 0x5310071b, 0x2d422c2e, 0x47050d16, 0x1d110d05, 0x2a1c1627, 0x0b460d1b, 0x382b361e,
		0xc7721835, 0x01cc2608, 0x000602db, 0x220f8452, 0x41000047, 0x022105a7, 0x09ff49f2, 0x00da012a, 0x001f0010, 0x1d00b9a2, 0x2805ab53, 0xe8ffb81d,
		0x000f1d40, 0x05674f4d, 0x09822020, 0x10181625, 0x84164d00, 0x0e082509, 0xb80f4d00, 0x0a202982, 0xe8220784, 0x078409b3, 0x53b3e021, 0xe02005ed,
		0x0b200f83, 0x2f204183, 0x08311082, 0x00121110, 0x0a10084c, 0x20084d00, 0x074d0008, 0x392d8218, 0x210c8219, 0x007f1f03, 0x06080106, 0x09881c20,
		0x144b0550, 0x00510088, 0x5318ed3f, 0xd1530c49, 0x22052711, 0x23152726, 0x6a733411, 0x020e2205, 0xcd401827, 0x26370807, 0x15062223, 0x3b230801,
		0x59605211, 0x331a6963, 0x36189d49, 0x1e2e1f17, 0x323f360e, 0x0b160b37, 0x67a901bb, 0x34777c6f, 0x6c254059, 0x2e1a1014, 0x5b51243e, 0x4700514c,
		0x0132080b, 0x002600dc, 0x2500b97a, 0x0db3e8ff, 0xb8204d00, 0x0786e0ff, 0x1e40e836, 0x174d000c, 0x4d000e10, 0x100e1012, 0x20114c00, 0x114d000e,
		0x1121c783, 0x45d18210, 0x1b38082b, 0x03820c1b, 0x00822228, 0x14080114, 0x0f890027, 0x1c1c270f, 0x5019881f, 0x290d5742, 0x5ed61001, 0xde10ed5d,
		0xb15c33ed, 0x0e43420a, 0x35032e29, 0x33023e34, 0x4b071732, 0x392209fd, 0xfc463b4b, 0x2e293806, 0x1532533e, 0x3e5e3f1f, 0x14123b48, 0x5a551f36,
		0x483c2e1a, 0x4233360e, 0x25080821, 0x0b08191a, 0x2f4a3826, 0x27445932, 0x0c084516, 0x392e4e60, 0x02001121, 0xf4ff2800, 0xd001d901, 0x27001400,
		0x3969c500, 0x20cc8205, 0x85ed8321, 0x88f02007, 0x873b20f5, 0x101027f5, 0x104d0010, 0x04820f20, 0xef820820, 0x82180f21, 0x100f210e, 0x0b200e82,
		0x0b200983, 0x0a201883, 0x0a202283, 0x22820985, 0x4f830620, 0x20063b4a, 0x054b4ab3, 0x82b3e021, 0x4c052017, 0x0782063f, 0x9974e820, 0x40e82206,
		0x37678217, 0x1403821a, 0x23290314, 0x00280d82, 0x4912851e, 0x51088815, 0x3fed3f00, 0x4e054a4a, 0x0d420516, 0x832b2011, 0x16012200, 0x05637016,
		0x35022e26, 0x33023e34, 0x07996018, 0x49272621, 0x4308055c, 0x7b01021e, 0x361d2123, 0x4a262d4b, 0x41262339, 0xe5c72f54, 0x101e2c1d, 0x15122525,
		0x131e2c33, 0x8b012b21, 0x302d5e2b, 0x1d223c53, 0x423b5739, 0x451b3a5d, 0x2a19b3fe, 0x60301f37, 0x45260d24, 0x273c2837, 0x20052f5c, 0x0657463f,
		0x00162108, 0x051e4036, 0x000c0b18, 0x087f0d4c, 0x00000908, 0x0900180c, 0x17090801, 0x0a85080d, 0x02881349, 0xc622bb88, 0xbc835d5e, 0x23069b72,
		0x22230625, 0x3525a582, 0x15213523, 0x08d71823, 0xc2550808, 0x3f2a3f3b, 0x01621529, 0x160abb6f, 0x2e1f1a25, 0x111a0f17, 0xdc37482a, 0x23d64545,
		0x0b0b1b2d, 0x0001000b, 0x01f6ff47, 0x00d001ab, 0x403c0015, 0x12280c0b, 0x200c4d00, 0x0a4d0011, 0x40d8ffb8, 0x00121117, 0x117f0e4c, 0x007f0817,
		0x05080105, 0x49060f16, 0x064e430b, 0x6d423320, 0x30312508, 0x172b2b2b, 0x11227f83, 0x02571133, 0x08088305, 0xf9020e25, 0x0f284536, 0x302f3053,
		0x280f5230, 0x3c240a45, 0x0701274c, 0x414efdfe, 0x03014e41, 0x4c27f9fe, 0x8200243c, 0x00033300, 0x015bff1a, 0x00d801da, 0x000d0006, 0xb9940024,
		0x2d442200, 0x64222005, 0x07840627, 0x4d000923, 0x06fd4121, 0xd8280782, 0x000a0e40, 0x1020124d, 0x99780482, 0xb3d82506, 0x054d000e, 0x20065e43,
		0x45bf8202, 0xe83e06a9, 0x000d1f40, 0x7f24074d, 0x15101003, 0x261f820a, 0x25158200, 0x1a88040d, 0x88030750, 0x71181024, 0x1342092b, 0x100d5106,
		0x2b28de82, 0x17161437, 0x17060611, 0x0e257118, 0x2007fe57, 0x23711807, 0x3d23290e, 0x512e2f52, 0x341e233d, 0x18227118, 0x3c5a3c24, 0x04821e1e,
		0x3c573735, 0x00000120, 0x00ffff00, 0x0100001d, 0x02d001d8, 0x825b0006, 0x00012910, 0x015bff25, 0x00d001ce, 0x29080752, 0x4c00100f, 0xe8ffb819,
		0xd1820a40, 0x11101124, 0x2f6b0012, 0x00122305, 0x16820a4d, 0xb841b320, 0xb3e82105, 0x08051f4f, 0x1f40e028, 0x0c4d0009, 0x1b0f7f00, 0x7f04141b,
		0x7f171d07, 0x1b1b1c14, 0x01491505, 0x0f0c881a, 0x004b0e51, 0xed333f3f, 0x70183f32, 0x07520912, 0x1101210e, 0xf951ef82, 0x05177605, 0x0c833520,
		0x17162f08, 0x311e0111, 0x2b14522d, 0x2f492e43, 0x52142b42, 0x6501322c, 0x5704d7fe, 0x34e6da5f, 0x02264058, 0x26029b9b, 0xe6335841, 0x04575fda,
		0xcb842901, 0xf7ff2435, 0xda01d201, 0x83003400, 0xff3300b9, 0x0d0cb4f0, 0x84334c00, 0x000b23cb, 0xcb84294d, 0xffb81225, 0x453f40f0, 0x0c2405d6,
		0x18084d00, 0x03351982, 0x1d1d7f1e, 0x1f2a0f0b, 0xbf2aaf2a, 0x2a2a042a, 0x36308225, 0x38fb8200, 0x11b011a0, 0x16111104, 0x2b350b82, 0x101d1d10,
		0x19032250, 0x51060088, 0x82d28300, 0x4f2f20d3, 0x32250515, 0xde105d2f, 0x820582ed, 0x18ed20da, 0x21089c44, 0x10512205, 0x1737240b, 0x4215030e,
		0xdf8405b9, 0x36323328, 0x022e3435, 0x2c4e3727, 0x01430805, 0x10301b56, 0x231a3110, 0x0d0d1d2f, 0x4a142017, 0x0a151d14, 0x1d171913, 0x19171d4a,
		0x1e150a13, 0x21134a13, 0x1d0d0d17, 0x25220930, 0x351f2225, 0x53272747, 0x1a18424d, 0x4a49441b, 0x413f3020, 0x8257573f, 0x20303204, 0x1b44494a,
		0x4d42181a, 0x47272753, 0x00001f35, 0x08935d00, 0xe76b7920, 0xffd72208, 0x2d18823e, 0x0200b90d, 0x19b44fff, 0x500f0417, 0x2782342b, 0x00bcff2d,
		0x02cc0100, 0x03370279, 0x82eefed7, 0x00062221, 0x213f8328, 0x178288ff, 0x1782c720, 0x2b002622, 0x07200982, 0xba201d82, 0x01273f85, 0x0eb4cbfe,
		0x8601070c, 0x82b6203f, 0x849b201d, 0x862c2027, 0x87e82027, 0xb4f92527, 0x02040c0e, 0x00212785, 0x221d8259, 0x821a039b, 0x2127848f, 0x25828300,
		0x29658b20, 0xbf901805, 0xffff2415, 0x6bffb8ff, 0x9b83057b, 0x9b84ea20, 0x9b843220, 0x4b827e20, 0xb386e820, 0x1784b020, 0x17833c20, 0x830d0021,
		0x82638417, 0x0701210f, 0x132b638c, 0x500c0425, 0x4f1d0402, 0x65110401, 0xff200a5b, 0xe220bf83, 0x26224b82, 0xbf91a803, 0x002c2e23, 0x2abf8612,
		0x01f6ff31, 0x02bb02d7, 0x82a90326, 0x03063227, 0x00001ed6, 0x020b4010, 0x142c2e10, 0x00025009, 0x06a7662d, 0xf5ff4524, 0x2784d201, 0x2785ad20,
		0x27842b20, 0x38160129, 0x50232a36, 0x86370001, 0xff472427, 0x84b0015b, 0x85af2027, 0x85162027, 0x16112827, 0x50050014, 0x86150201, 0x82362027,
		0x84c2204f, 0x85b12027, 0x85092027, 0x18032827, 0x50000a16, 0x8c170b01, 0x828f2027, 0x2f27849f, 0x00dd8300, 0x02b11a00, 0xdbffb801, 0x2a180d40,
		0x02262b82, 0x014f220b, 0xa767160b, 0x8426200a, 0x87b9205b, 0xd8032733, 0x210000e6, 0x348503b2, 0x22281122, 0x03263482, 0x024f260b, 0x38821a0b,
		0x2b256883, 0x3434342b, 0x09a74900, 0x00219783, 0x29bf8b52, 0x20221202, 0x02500009, 0xe788210e, 0xab01f623, 0x20978302, 0x0dbb66bd, 0x2a180127,
		0x02501004, 0x20948206, 0x21948706, 0x3746ffff, 0x84ef8405, 0xd603212f, 0x22061741, 0x82161813, 0x0601212e, 0x4721ef87, 0x835783ff, 0x262785bb,
		0x000009d8, 0x8215401e, 0x280122bc, 0x21298222, 0xb8820603, 0xb8820620, 0xb8863184, 0x24225f82, 0x9f41f7ff, 0x85c12006, 0x411920b7, 0x4308054f,
		0x0a353714, 0x1001502f, 0x2b2b4f36, 0x00010034, 0x010102a4, 0x00bb0249, 0x401b0003, 0x01000309, 0x80030002, 0x2f000102, 0x32cd1a33, 0xc5192f01,
		0xc519dd18, 0x07013031, 0x49013727, 0x02653174, 0x98228e8f, 0x00275082, 0x01b701ce, 0x82790248, 0xb6122137, 0x012a3683, 0x3f004503, 0xcd2f01cd,
		0x2e86cddd, 0x3d3d4834, 0xae650229, 0x0000b30f, 0x40000300, 0xa2010402, 0x0982b902, 0x1b000f29, 0x15403000, 0x8319070d, 0x13022837, 0x40160a19,
		0x8a101004, 0x86332077, 0x82cd207d, 0x32cd2308, 0x5186dc10, 0x99181720, 0x99180a73, 0x37310c7f, 0x77502f5d, 0x151c1c15, 0xfe1c1c14, 0x1d1d14eb,
		0x29088214, 0x1c8e9202, 0x171a8e99, 0x98181b16, 0x00240bed, 0x00ffff00, 0x2005e342, 0x07e342b9, 0x82870421, 0xb91333a1, 0xf6ff0200, 0x372c0940,
		0x02500914, 0x2b4f3d00, 0x2b93342b, 0x0009c123, 0x242b8400, 0x300940ff, 0x202b843c, 0x432b8d2c, 0x0421083b, 0x6e578296, 0x2c2108ef, 0x232c823f,
		0x4f400003, 0x2b225c85, 0x8b8a3434, 0xa3203389, 0x2e21338b, 0x2033843d, 0x8333823e, 0x2b339764, 0x00002497, 0x03104017, 0x3e2c1a02, 0x3f203084,
		0xef88648a, 0xa4216389, 0x222f8612, 0x843c2e08, 0x8a3d202f, 0x212f8760, 0x1f411303, 0x88982008, 0x414b212f, 0x43202f84, 0x3c202f82, 0x24094f6a,
		0x01f6ff31, 0x202f8ad7, 0x8ac38ba5, 0x26c38b32, 0x01000006, 0x457a02eb, 0x042f07b7, 0xff4dff87, 0xb90d00c1, 0x4dff0200, 0x452217b4, 0xf52008b7,
		0xc122278e, 0x27873cff, 0x1bb43c23, 0x20278827, 0x20278445, 0x224f887c, 0x82e5fe96, 0xb10f2927, 0xfeb80203, 0x2a17b4e5, 0xd3432884, 0x58ff2105,
		0xa3222b8e, 0x2b88effe, 0x19b4ef23, 0x202b8b28, 0x222b8e78, 0x870eff97, 0x0eff242b, 0x8b2917b4, 0x8e62202b, 0xffa4222b, 0x222b8802, 0x8519b402,
		0x208386ac, 0x202b84ae, 0x25af88b4, 0xff2bff98, 0xaf8400a1, 0xb42bff24, 0x578b2c36, 0x2b8ea420, 0x21ffa522, 0x21202b88, 0x2b552b8d, 0xb9022505,
		0xad032602, 0x06233582, 0x431b8704, 0x092805f7, 0x232a4136, 0x47000150, 0x890cbf45, 0x06d74227, 0xf7ff0126, 0x463a0940, 0x22442a84, 0xffff2105,
		0xbb205386, 0x96205388, 0x24056f42, 0x36120102, 0x23298249, 0x4f4a0002, 0x2b235885, 0x92003434, 0x05d3422f, 0xb8010228, 0x0d40efff, 0x32844738,
		0x32824820, 0xd3426083, 0x0e4f4607, 0x00970422, 0x8207d745, 0x48362133, 0x49203384, 0x6793668a, 0x2306d742, 0x38000102, 0x0220c183, 0x0121ec82,
		0x2d648700, 0xb1ffffff, 0xcc010000, 0x26027a02, 0x09822800, 0x87040724, 0x4b42f8fe, 0xfe012705, 0x170cb4de, 0x03470a00, 0xb5ff2105, 0xc122278e,
		0x2787fcfe, 0x10b4e223, 0x2027881c, 0x20278407, 0x224f887c, 0x82a7fe96, 0xb10f2127, 0xfe24e982, 0x1f0cb48e, 0xef412884, 0x8e192006, 0xfea3222b,
		0x232b88b0, 0x1d0eb497, 0x1a202b8b, 0x97202b8e, 0x0c212b8c, 0x8f2b8b1e, 0x8ca42083, 0x850e2083, 0x208385ac, 0x058b4700, 0x2602b924, 0x1b42af03,
		0x00003205, 0x00b91300, 0x40feff01, 0x001f1409, 0x02015005, 0x07cb4425, 0xc1212b8f, 0x05474209, 0x24180722, 0x14202884, 0x4415df47, 0x022806f3,
		0xffffb801, 0x27140d40, 0x02232b82, 0x854f2802, 0x07eb4158, 0x200e1348, 0x091f4204, 0x16213382, 0x20338425, 0x83338226, 0x42339763, 0x3382091f,
		0x84261421, 0x9e272033, 0x081f4267, 0x24161022, 0x25203084, 0xff20648a, 0x22052b53, 0x411303b0, 0x9820081f, 0x82088342, 0x29332163, 0x2b203284,
		0x24203282, 0x840a5b48, 0x44338acb, 0xff8605fb, 0xcb8a338a, 0x0083ff28, 0x02c70100, 0x734a027a, 0x87042306, 0x5f42cafe, 0xb4ca2307, 0x734a170c,
		0x059b4a08, 0xc1222789, 0x2787cffe, 0x10b4cf23, 0x2127871c, 0x4f84d9fe, 0x4f887c20, 0x79fe9622, 0x23085b42, 0x1f0cb479, 0x03422884, 0xeafe2105,
		0xa3222b8e, 0x2b8881fe, 0x0eb48123, 0x202b8b1d, 0x222b8eec, 0x8882fe97, 0xb482232b, 0x2b8b1e0c, 0xa420838f, 0x0e20838c, 0x8385ac85, 0x841aff21,
		0x88b42057, 0xfe9825af, 0x00a1ff97, 0x23053743, 0x212bb497, 0x2b90578a, 0x2b99a520, 0x21055f56, 0xe749b902, 0x87042207, 0x06df42dd, 0x0940db2a,
		0x000a2116, 0x270b0150, 0x4a07df42, 0x2b89056f, 0x86e6c121, 0x40e4242b, 0x84261a09, 0x8d16202b, 0x88bb202b, 0x82962057, 0x05734a2b, 0x0d40e424,
		0x2c822916, 0x2a0b0222, 0x210b3071, 0x8b86ffff, 0xa3203389, 0x1821338b, 0x20338427, 0x0ea74a28, 0x220e034b, 0x45f89704, 0xf6200703, 0x28206782,
		0x29203384, 0xa420679e, 0x2308b772, 0x180d40ed, 0x0220c883, 0x0f4bf482, 0x2167840d, 0xcf881303, 0x9b8b9820, 0x842b3521, 0x722d2067, 0xcf870b64,
		0xa520338a, 0x774b3396, 0xb0ff270a, 0x9b010000, 0x0b4d7a02, 0x87042307, 0xbf42f7fe, 0xb4f72307, 0x334d170c, 0xb4ff2107, 0xc122278e, 0x2787fbfe,
		0x10b4fb23, 0x2027881c, 0x20278406, 0x224f887c, 0x42a6fe96, 0xa623088f, 0x841f0cb4, 0x06634228, 0x2b8e1820, 0xaffea322, 0xaf232b88, 0x8b1d0eb4,
		0x8e19202b, 0x8c97202b, 0x1e0c212b, 0x838f2b8b, 0x838ca420, 0xac850e20, 0x48208386, 0xb4205784, 0x9822af88, 0xe742c5fe, 0xb4c52308, 0x578b212b,
		0xa5202b8f, 0x00272b99, 0x01f5ff28, 0x82b902cc, 0x45522057, 0x102c08c7, 0x00020b40, 0x00092b20, 0x310e0250, 0x8f069b45, 0x06c34527, 0x24080223,
		0x20278430, 0x20278c20, 0x214f88bb, 0x1f4a0096, 0x20002206, 0x23288233, 0x4f340e03, 0xdf475485, 0x89578506, 0x88a3202f, 0x3122212f, 0x32202f84,
		0xfd772f82, 0xffff2107, 0x2f89af86, 0x2f889720, 0x84322021, 0x9d33202f, 0x08af4a5f, 0x30221222, 0x31202f84, 0xff275f8c, 0x01f3ffa2, 0x827a02d8,
		0x473220bf, 0xe92006d7, 0x27053f42, 0xb4e8fe02, 0x09002b20, 0x2006d747, 0x22278e86, 0x87cdfec1, 0xb4cc2327, 0x27873024, 0x84d6fe21, 0x887c2027,
		0xfe96224f, 0x081f4a76, 0x20b47623, 0x41288433, 0xfe2105e3, 0x222b8ee8, 0x887ffea3, 0xb47f232b, 0x2b8a3122, 0x8e19ff21, 0x0767422b, 0xb8020327,
		0x20b4affe, 0x202b8b32, 0x222b8e04, 0x88a4fea4, 0xb4a42257, 0x47ac8522, 0x234e08d7, 0x8704220c, 0x05ab4700, 0x21160028, 0x01501004, 0xa34e2706,
		0x084b4e0c, 0x0f420420, 0x09012306, 0x2784261a, 0x278c1620, 0x2602bb29, 0x0000bd03, 0x42040601, 0x0224060f, 0x29160101, 0x02232882, 0x854f2a06,
		0x060f4254, 0x8905a34e, 0x060f422f, 0x18212f82, 0x202f8427, 0x4e2f8228, 0x042019fb, 0x82060f42, 0x2816212f, 0x29202f84, 0xc7475f9d, 0x18132108,
		0x0220b883, 0x0120e082, 0x21105b4f, 0xbf881303, 0x6f429820, 0x215f8205, 0x5f842b35, 0x5f822d20, 0x20074177, 0x068b4fff, 0xa5202f8a, 0xbf892f93,
		0x0085ff2b, 0x02e80100, 0x0026027a, 0x2409823c, 0xfec10407, 0x054742cc, 0xcbfe0127, 0x042115b4, 0x056f420c, 0x82f3fe21, 0x02e8221d, 0x2227887c,
		0x448afea3, 0x8a230883, 0x842213b4, 0x05c34128, 0x8ec4fe21, 0xfea4222b, 0x222b8864, 0x8513b464, 0x202b8654, 0x202b84ff, 0x225788b4, 0x447cfea5,
		0x7c230857, 0x8a2630b4, 0x50002057, 0xb9240507, 0xc1032602, 0x2f082b44, 0x0100b913, 0x0940ffff, 0x2f0a4035, 0x46100150, 0x8f07e746, 0x08f3492b,
		0x84453921, 0x42352028, 0x5b50061f, 0x0df3490e, 0x82483521, 0x1002232b, 0x58854f49, 0x8f07bf49, 0x0cf34933, 0x84463721, 0x82472033, 0x97638333,
		0x0cf34933, 0x84473521, 0x9e482033, 0x082b4267, 0x45371122, 0x46203084, 0x2751648a, 0x13032107, 0x49081f41, 0x54210cf3, 0x2032844a, 0x2032824c,
		0x0af34945, 0x338acb84, 0x8a0cf349, 0x27cb8a33, 0x00009fff, 0x7a02e201, 0xa8206782, 0x07240982, 0xe6fe8704, 0x23073342, 0x372cb4e6, 0x21077f53,
		0x278e84ff, 0xcbfec122, 0x21095b42, 0x27873c30, 0x84d5fe21, 0x887c2027, 0xfe96224f, 0x082f4275, 0x2cb47523, 0x4228843f, 0xe720062f, 0xa3222b8e,
		0x2b887efe, 0x2eb47e23, 0x212b8a3d, 0x2b8e17ff, 0xadfe9722, 0xad232b88, 0x8b3e2cb4, 0x8e02202b, 0xfea4222b, 0x222b88a2, 0x852eb4a2, 0x218385ac,
		0x2b8456ff, 0xaf88b420, 0xd3fe9822, 0x2308b342, 0x414bb4d3, 0x3c20578b, 0xa5222b8e, 0x2b88b9fe, 0x2b8db920, 0x2006cb51, 0x08ab50b5, 0x0004b533,
		0x00b91300, 0x40faff02, 0x142d2f09, 0x00025009, 0x0d9f512e, 0xc0282b89, 0x1000001e, 0x13020b40, 0x8314db54, 0x05434f27, 0x012c5386, 0x0940f2ff,
		0x232a3739, 0x38000150, 0xb74e5387, 0x862b8905, 0x0c012153, 0x83140755, 0x057b4d27, 0x7b825383, 0x17020128, 0x50050015, 0x7b450201, 0x015b2309,
		0x278902b0, 0x1c204f87, 0x83142f55, 0x00b12627, 0x04060100, 0x0abf4ab5, 0x0a171927, 0x0b015000, 0x0dbf4a18, 0xc0222b89, 0xf74d00f8, 0x40f62205,
		0x0b5e5509, 0x82096b7d, 0x05ef542b, 0xa7860420, 0x23030228, 0x50000921, 0x42180e02, 0x0348072f, 0x86278905, 0x1d0221a7, 0x82141755, 0x064b4627,
		0x01284f86, 0x04171904, 0x06015010, 0x0f55a484, 0x86278908, 0x1e01214f, 0x250e0f55, 0x01f7ff24, 0x278302d2, 0x4105cf44, 0x38270847, 0x502f0a36,
		0x44371001, 0x27890ca3, 0x54084741, 0x77820bff, 0x56ff3125, 0x5402d701, 0x0036060b, 0x00870426, 0x04060100, 0x00001288, 0x0203b70c, 0x14422c05,
		0x8f445009, 0x212b8f07, 0x2b8b09c1, 0x41300a22, 0x73532b90, 0x20578206, 0x2a578896, 0x0304b211, 0xf6ffb802, 0x853f2cb4, 0x0034212f, 0x2f898788,
		0x2f91a320, 0x9a3d2e21, 0x2497212f, 0x0f228b87, 0x60820940, 0x56050a54, 0xbb8509c7, 0xa4215f89, 0x542f8d12, 0x2f8e050a, 0x03540320, 0x20bf8206,
		0x202f8f98, 0x43ed864b, 0x002005df, 0x2f8a5f84, 0xbf91a520, 0xff2d3189, 0xffb9ffff, 0x02f401f7, 0x0426027a, 0x050f4586, 0x4400ff21, 0x032705e7,
		0x29b4fbfe, 0x471d0334, 0xff210543, 0x22278ea8, 0x87effec1, 0xb4ea2327, 0x2787392d, 0x84f8fe21, 0x887c2027, 0xfe96224f, 0x29278298, 0x0304b10f,
		0xb494feb8, 0x28843c29, 0xff21ab85, 0x202b8e0b, 0x06b744a3, 0x9e232b83, 0x8b3a2bb4, 0x8e2b202b, 0xfe97222b, 0x235788c1, 0x3b29b4bd, 0x16202b8b,
		0xa4222b8e, 0x2b88b6fe, 0x2bb4b222, 0x8386ac85, 0x2b846020, 0xaf88b420, 0xddfe9825, 0x8500a1ff, 0xb4d923af, 0x578b3e48, 0x2b8e5720, 0xd4fea522,
		0xd0202b88, 0x00262b8d, 0x0156ff47, 0xe35102b0, 0x09cf4206, 0x82009521, 0x0102295b, 0xb4c6ffb8, 0x05001f2f, 0x6405d242, 0x2f8d051f, 0x8806d342,
		0xb4ca232f, 0x2f91242e, 0x2351bb20, 0x09d74205, 0x11202f82, 0x23055159, 0x2733b4f3, 0x34203085, 0x2f895f89, 0x8906d742, 0xb4ee232f, 0x2f9a2531,
		0x47429720, 0x212f8b05, 0x2f9a2633, 0x8906d742, 0xb4fc222f, 0x89c08631, 0x5103208f, 0xbf8206e3, 0x5f8f9820, 0x42b4e123, 0x8a5f8f29, 0x06d7422f,
		0x2f8d5f89, 0xff83ff22, 0x2005d742, 0x06d55137, 0x82040621, 0xffff212a, 0xc125178a, 0xc1ffcafe, 0x21178600, 0x3342d9fe, 0x22278208, 0x51040701,
		0x032907bb, 0x63feb802, 0x152d1ab4, 0x08ab410d, 0x8eeafe21, 0x07bb512b, 0x6b232b83, 0x8b2b1cb4, 0x8eec202b, 0x5197202b, 0x2b8306bb, 0x1ab46c23,
		0x8f2b8b2c, 0x07bb5183, 0x1c218385, 0x212b8a2a, 0x8b421aff, 0x51af8508, 0x2b8307bb, 0x39b48123, 0x512b9b2f, 0x2b9207bb, 0xff240026, 0x02d20156,
		0x4206a74a, 0x1b2b09b7, 0xb70c0000, 0x35130102, 0x452f0a4b, 0x2b8f0887, 0x8606b342, 0x3917222b, 0x262b904a, 0x032602bb, 0x420000c1, 0x2b8209af,
		0x2306af42, 0x4835b4ff, 0x34232f85, 0x86ffff00, 0x422f8987, 0x2f8b06af, 0x9a463721, 0x06af422f, 0x47205f8c, 0xaf422f9a, 0x252f8206, 0x0309400f,
		0xa64a0102, 0x09874505, 0x0320eb84, 0x42069f4a, 0x5f8b09af, 0xef865420, 0x2f8abf89, 0x9706af42, 0x96ff212f, 0x28085f45, 0x010000bf, 0xfe870407,
		0x055f45dd, 0xd4fe0227, 0x01493eb4, 0x0687453d, 0x278e7b20, 0xc2fec122, 0xb9232787, 0x874e42b4, 0xccfe2127, 0x85087742, 0xfe96224f, 0x08b74e6c,
		0x3eb46323, 0x45288451, 0xfe210503, 0x202b8ede, 0x06c34aa3, 0x2105a342, 0x2b8a4f40, 0x8e0eff21, 0x4f97202b, 0x9b230a0f, 0x8a503eb4, 0xf9fe212b,
		0xa4222b8e, 0x838899fe, 0x40b49022, 0x8385ac85, 0x4244ff21, 0xaf8508cf, 0xc1fe9824, 0x8759a1ff, 0xb8fe2405, 0x8a535db4, 0x2aff2157, 0xa5222b8e,
		0x2b88a7fe, 0x2b8d9e20, 0xff310027, 0x02d701f6, 0x07974a9d, 0x5c610121, 0x30210a63, 0x13375c3e, 0x2b877b20, 0x8a8a0021, 0x4a2c202b, 0x562010c3,
		0xc34a5782, 0x26002406, 0x4704b504, 0xb12708c7, 0xffb80203, 0x832fb4fa, 0x1b4b1831, 0xff312108, 0x01212f82, 0x081f4bda, 0x00128829, 0x02b60a00,
		0x8230350b, 0x342b2183, 0x8d06835c, 0x1ec02153, 0x4b0bd748, 0x7b5c051d, 0x21d7880d, 0x4f828a04, 0x0b401025, 0x833e0802, 0x00022150, 0x84077b52,
		0x82ff8777, 0x492782a7, 0x2d850a57, 0x09265387, 0xeb010000, 0x0b5b2803, 0x61012107, 0x8b21ff82, 0x25558300, 0x04291b00, 0x4d18500f, 0x2b850bab,
		0x2b870620, 0x4b180020, 0x02230833, 0x84181700, 0x4f19222b, 0x21d7852b, 0x5783bfff, 0x88760221, 0xff43222b, 0x06b3421c, 0xb419ff23, 0x822d831a,
		0xffff2328, 0x278ee2ff, 0x38ff8f22, 0x6209635c, 0x5d080743, 0x09000300, 0xf401f7ff, 0x0f006b02, 0x28001d00, 0x4b408800, 0x27262400, 0x0f091e28,
		0x0e780f1e, 0x0e0e1409, 0x20210109, 0x02081e1f, 0x0378021e, 0x03031408, 0xaf031e08, 0x020ebf0e, 0x0e010e39, 0x1873150e, 0x16031d18, 0x107c1d49,
		0x440e0f46, 0x01004109, 0x23232479, 0x41081e03, 0xb37b0302, 0x39123705, 0x32ed332f, 0x3f333f3f, 0x2f013fed, 0xed2f322f, 0x5d5d2f32, 0x2a773912,
		0x0e102605, 0x05c4c4c4, 0x064e6cc4, 0xc4260d86, 0x23373031, 0x047f2307, 0x23750806, 0x35032e17, 0x14113311, 0x0117021e, 0x3307030e, 0x84ee032e,
		0x190b4b16, 0x6612211c, 0x181c2012, 0x23e44e0b, 0x4909192d, 0x10140c04, 0x0b05b8fe, 0x700a110d, 0x0c0d110a, 0x9a42a2a2, 0x4a4aa3a2, 0x429aa2a3,
		0x21140309, 0x55011e2e, 0x1913b9fe, 0x01040a12, 0x4b3717e6, 0x63434262, 0x0100374a, 0x0102b900, 0xb9023a01, 0x18001100, 0x0c030940, 0x09060011,
		0x300c8203, 0xcddd332f, 0x32ce2f01, 0x303132cd, 0x37363613, 0xae681826, 0xb93a080b, 0x0f0a1c12, 0x17161e13, 0x241a1020, 0x0f200213, 0x1806111c,
		0x1c1b150f, 0x23220f1b, 0x00000d20, 0xb3000100, 0x480156ff, 0x0e00d3ff, 0x05b61300, 0x03070a00, 0x10000f0e, 0x5482dede, 0x31ccdd2c, 0x16140530,
		0x06153333, 0x56832223, 0x0133373b, 0x0f211305, 0x3d2e1317, 0x3a500101, 0x06301d1d, 0x0b043930, 0xff000005, 0x239f87ff, 0x87040602, 0x82205784,
		0x102bc018, 0x00100624, 0x5883332f, 0xcddecd22, 0x3224ac82, 0x2307021e, 0x2205df72, 0x18262307, 0x082a2bc0, 0x7000032a, 0x84010c02, 0x0b000403,
		0x2b001700, 0x11402800, 0x25261f1d, 0x030f1509, 0x1f221809, 0x0c061225, 0x322f0000, 0x32de32dd, 0x10216d86, 0x847285d4, 0x323326c5, 0x06141516,
		0x200b8a33, 0x2d8a8227, 0x26231515, 0x06222326, 0x34352307, 0xbf18023e, 0x6e2f0f3e, 0x14212b17, 0x23220230, 0x30022223, 0x182b2114, 0x30117bbd,
		0x281c0ef8, 0x2415021b, 0x1b021524, 0x000e1c28, 0x09834900, 0x4406534e, 0xe3490933, 0xb4d82308, 0xe3491521, 0xda012110, 0x2008075b, 0x28298288,
		0x0100b90d, 0x1db497ff, 0x95288418, 0x06374457, 0xe5235788, 0x8d1421b4, 0x015b2457, 0x889d02b0, 0x448a2057, 0x012505e7, 0x0940ffff, 0x21588326,
		0xbc430201, 0xffff2105, 0x8606c74a, 0x82b3822b, 0x0601222b, 0x28898304, 0x0102b10f, 0xb4e2ffb8, 0x458a8533, 0x842606c7, 0xcc010000, 0x8b5d7602,
		0x43002307, 0xc343e1fe, 0xfe012605, 0x0d0fb4c4, 0x07db5d00, 0x278e8620, 0xdcfe8f22, 0xc7232787, 0x880c0eb4, 0x82552027, 0x84c72027, 0x822b204f,
		0x82072009, 0x87b2204f, 0x82af2027, 0x08a35b4f, 0x278e5920, 0xaffe8f22, 0xb3202787, 0x23083f66, 0x2d000200, 0x08063b44, 0x19000d30, 0x2d404b00,
		0x30731418, 0x02154015, 0x73111915, 0x102f100f, 0x73051002, 0x081f080f, 0x0d080802, 0x18187913, 0x41160e15, 0x06441511, 0x2f6a0d49, 0x333f3206,
		0x3912333f, 0x2f01ed2f, 0xfd5d5ede, 0x32ed5dde, 0x2203822f, 0x43053031, 0x33220af0, 0x01842311, 0x33113324, 0xe643e901, 0x4afb2609, 0x4949794a,
		0x0ed64379, 0xfd2e022b, 0xfe200195, 0xfe6b02e0, 0x089f82fb, 0x01026021, 0xbb029401, 0x15001100, 0x17403400, 0x80134014, 0x110c1512, 0x0c030600,
		0x11141413, 0x43121215, 0x322108e7, 0x2e60822f, 0x2f01332f, 0x32cedd33, 0x1acdde10, 0x43cd1add, 0x373512f5, 0x60270717, 0x100a1a13, 0x15171b10,
		0x2119101f, 0x2f62b112, 0x0dfd4370, 0x0d212226, 0x8e2298ba, 0x6a207f82, 0x8a207f82, 0x36267f86, 0x40151840, 0x77828012, 0x14268085, 0x12111313,
		0x80951515, 0x2f331122, 0x25278197, 0x6a372707, 0x840b1a12, 0x0f1e2981, 0x0112211a, 0x612e7100, 0x8e248290, 0x0098228e, 0x83208382, 0x713b8382,
		0x10001303, 0x2c002400, 0x18161340, 0x101e1e1f, 0x0b020500, 0x1e181b11, 0x8202081e, 0x20f38218, 0x21ff82cd, 0xfd85cdde, 0xde207b82, 0xf044fb84,
		0x4313200d, 0xb32d10c9, 0x0e0b0e24, 0x1b151917, 0x10221c12, 0x0fc6432e, 0x131a2033, 0x100c1408, 0x111a1a1b, 0x09171b1f, 0x1c0e1201, 0x07c54329,
		0x0e1c2922, 0x09e79218, 0xb35b9d20, 0x61012107, 0x210adb5c, 0xaf5c281a, 0x677b2013, 0x8a200823, 0x16202b8a, 0x200e1b52, 0x0d1b6726, 0x82b30421,
		0x091b672b, 0x672e1c21, 0x18210c1b, 0x120a194f, 0x5d938908, 0x03220843, 0x5767f8d8, 0x40ed2108, 0x201e5767, 0x88778436, 0x8b0420cf, 0x1a2821a3,
		0x1b20cf84, 0x210cbf52, 0xaf5c0403, 0x8c8b2008, 0x2a1821a3, 0x3421a384, 0x0af8674f, 0x69093f4b, 0x2820058f, 0x4807835b, 0x0129095b, 0x041e1000,
		0x09015002, 0x1866840c, 0x21083744, 0xbb690603, 0x085b4808, 0x0c000123, 0x202b840d, 0x085b480e, 0x00008326, 0x76029b01, 0x43222b88, 0xf743e0fe,
		0xb4dd2207, 0x482d830f, 0x8520055b, 0x8f22278e, 0x2787dbfe, 0x376adf20, 0x002c0808, 0x02690002, 0x028b0101, 0x000f00bb, 0x40320013, 0x11401216,
		0x00131080, 0x09030c0f, 0x00121211, 0x06101013, 0x00000f0c, 0xcddd322f, 0x23087e43, 0x32ce32cd, 0x47087d43, 0x2c080970, 0x16160706, 0x07173717,
		0x3824c527, 0x1b17151f, 0x1a0a1010, 0x2f624313, 0x1c010270, 0x1c1b1f46, 0x180f151b, 0x0f1c1106, 0x8e22989b, 0x21008200, 0xfb430002, 0x257b8607,
		0x80104013, 0x7b841211, 0x11111226, 0x13131000, 0x07237bae, 0x8abc3727, 0x71b7237b, 0x7b8e612e, 0x228e6f23, 0x437b8598, 0x2e2c0b73, 0x10001440,
		0x1f18160b, 0x050e1e1e, 0x21067443, 0xf588100e, 0x01cdde34, 0x3232cd2f, 0xcddecd2f, 0x3132ce10, 0x032e0130, 0x70723435, 0x20f38205, 0x113e4717,
		0x1028012e, 0x1c121c22, 0x0e171914, 0x47240e0b, 0x2f0f7543, 0x1b170901, 0x1a1a111f, 0x140c101b, 0xf31a1308, 0x200d7443, 0x06175aff, 0x5a9d0221,
		0x01210747, 0x26b28261, 0x010b4010, 0x5b281a01, 0x7b20122f, 0x00212787, 0x2027878a, 0x13e35416, 0x20097f5b, 0x692782b3, 0x1c2106cb, 0x0ccb692e,
		0x880a6843, 0x31036a87, 0x5bff4722, 0x2105275e, 0xfb59b903, 0xff022c0b, 0x200940f0, 0x500b052b, 0x63310802, 0xcc210bef, 0x85638302, 0x08e7682b,
		0x0940f924, 0x2b843024, 0x2b892020, 0xab01f622, 0x20091741, 0x21ef8804, 0xc5821a28, 0x1b060122, 0x210b475c, 0x875b0403, 0x898b2008, 0x2a1821ef,
		0x3421ef84, 0x0a186b4f, 0x1805b443, 0x22078342, 0x5b022803, 0xb343065f, 0x2315240b, 0x6c500c04, 0x342105da, 0xaf421800, 0x06032108, 0x0f4c2b87,
		0x00012309, 0x2b841211, 0xb3431320, 0x00662608, 0x02e80100, 0x222b8876, 0x43c3fe43, 0xbf22078b, 0x2d8314b4, 0x2005b343, 0x24278642, 0xfe8f0037,
		0x22218298, 0x833c0006, 0xa4ff216b, 0xc7221782, 0xcf827a02, 0x0982a120, 0xc1040724, 0x3f85ebfe, 0xddfe0228, 0x092e22b4, 0x3f825002, 0x00030027,
		0x01040249, 0x08eb6aab, 0x17403439, 0x02131319, 0x00800140, 0x0d070303, 0x10400a16, 0x00030404, 0x6b020180, 0xed6a0565, 0x1acd2e0a, 0x33cd1add,
		0x3031cd2f, 0x27071713, 0x16274a07, 0x2f50f02c, 0x1c143b5d, 0x1c15141c, 0xf66aed1c, 0xb9022506, 0x678e1c99, 0x9210ed6a, 0x070d248b, 0x83400307,
		0x1e796b7d, 0x01238b89, 0x6b372707, 0x4020187b, 0x240b7b6b, 0x1d1d13ea, 0x6b918213, 0x0033177b, 0x02980001, 0x025b0106, 0x000300b5, 0x000a401a,
		0x85010203, 0x4700208c, 0x012405c4, 0x32cd332f, 0xc72bfd85, 0x02a02394, 0x712e81b5, 0x51000000, 0xcf570897, 0x09c34a06, 0x2206f351, 0x513d3804,
		0x01210ff3, 0x08d35bda, 0x25828820, 0x01b60a25, 0x84393e1d, 0x514f8a24, 0x032608e7, 0x010019d6, 0x29830406, 0x02b70c25, 0x8d371501, 0x01f7244f,
		0x889d02d2, 0x0bb74a4f, 0x53834720, 0x3a100122, 0x2009435d, 0x822b8956, 0x825182a7, 0x4a318357, 0xff2205b7, 0x6e5256b4, 0x22d78406, 0x6fff70ff,
		0x262205fb, 0x674a3200, 0x08936006, 0x23b4c924, 0xbb600021, 0x869c2007, 0x00372827, 0xfff2fe8f, 0x830600c1, 0xffff232f, 0x35826eff, 0x210ad76f,
		0x2f5c4300, 0xb4c82309, 0x575c2d2f, 0x8e9a2008, 0xfe8f2227, 0x05bb42f0, 0xf4fe0123, 0x07ff6fb4, 0x02002208, 0xf7ff1200, 0x7902f401, 0x3d002f00,
		0x00b9b400, 0x40f0ff27, 0x00100f0f, 0x1020234c, 0x18234d00, 0x0651780f, 0x07841420, 0x13b3f022, 0xe82a0784, 0x12115740, 0x100b4c00, 0x05821412,
		0x11185508, 0x5f174d00, 0x021b6f1b, 0x1613401b, 0x201b1b48, 0x18181276, 0x121f120f, 0x1203122f, 0x380f7335, 0x3d380801, 0xc02fb003, 0x032fd02f,
		0x2f012fa1, 0x08762a2f, 0x36080202, 0x30883d49, 0x0d7c2551, 0x2f2f1b45, 0x1a790317, 0x3f004400, 0x3232ed32, 0xed3f3311, 0x01320182, 0x102f332f,
		0x5d2f32ed, 0xde2f335d, 0xcefd5d5e, 0x0f84325d, 0x185d2b21, 0x260ae052, 0x33352333, 0x1835032e, 0x21087e42, 0x4418020e, 0x364b1398, 0x9a26080a,
		0x160d4388, 0x23110911, 0x37272738, 0x100a1123, 0x86410d16, 0x090f150c, 0x161c1007, 0x07111c16, 0x0c150f09, 0x4f4b4f01, 0x46270808, 0x514c4116,
		0x4c663927, 0x654c2d2d, 0x4c522739, 0x3c461641, 0x504b4015, 0x3c522f26, 0x523c2323, 0x4b50262f, 0x4f451540, 0x00200d45, 0x290ffb42, 0x02010003,
		0x80034000, 0xfb420102, 0x07012e0d, 0x5b013727, 0x0294249f, 0x812e7177, 0x4f378300, 0x102b0773, 0x09401800, 0x050d1000, 0x470d080b, 0x01230616,
		0x4732cd2f, 0x28080e0b, 0x17161607, 0x23141a01, 0x1720101a, 0x0a221d17, 0x0102121c, 0x2223200d, 0x1b1c1b0f, 0x110d2015, 0xff000f1c, 0xff0600ff,
		0x097f6d56, 0x6d270021, 0xa151057f, 0x05856c06, 0x17b4b623, 0x06856c2d, 0xffffff23, 0x242f8ef5, 0xff3cffc1, 0x232f8cc1, 0x2c1bb4ae, 0x45202f89,
		0x7c202f84, 0x82057b51, 0xfe96225f, 0x5b2f88e5, 0x56230601, 0x853117b4, 0x82342030, 0x206382e6, 0x22338e58, 0x8feffea3, 0xb45f2333, 0x338c2f19,
		0x338e7820, 0x0eff9722, 0x6f20338f, 0x6220678f, 0xa422338e, 0x338f02ff, 0x678f6420, 0x3384ae20, 0xcf88b420, 0x2bff9824, 0xff86a1ff, 0x8a23cf86,
		0x8c4036b4, 0x8ea4209b, 0xffa52233, 0x20338f21, 0x20338f85, 0x6a338283, 0x0025081b, 0xfe870427, 0x219b85ca, 0xc159001b, 0xb4792e06, 0x0107220c,
		0x34342b50, 0xffffff00, 0x222f8e88, 0x8ecffec1, 0xb47c222f, 0x07516910, 0xfeffff23, 0x202f84d9, 0x057b697c, 0x96225f82, 0x2f8879fe, 0x23061157,
		0x260cb424, 0x97416085, 0xeafe2105, 0xa322338e, 0x338f81fe, 0x0eb42d23, 0x20338c24, 0x22338eec, 0x8f82fe97, 0x8f2e2033, 0x209b8f67, 0x8d9b93a4,
		0x1aff2167, 0xb4206784, 0x9822cf88, 0x634197fe, 0x09f15605, 0x2bb44523, 0x909b8b35, 0xa2a52033, 0x829f2033, 0x08bf6167, 0x61270021, 0x314605bf,
		0x05d94506, 0x2cb48725, 0x41120042, 0x84200797, 0xc1222f8e, 0x9741cbfe, 0xb47a220e, 0x07f56030, 0xfeffff23, 0x612f84d5, 0x5f8206cf, 0x75fe9622,
		0x230f2f41, 0x462cb422, 0x97416085, 0x8ee72006, 0xfea32233, 0x23338f7e, 0x442eb42b, 0xff21338b, 0x22338e17, 0x8fadfe97, 0x8e432033, 0x02ff2167,
		0xa422338e, 0x338fa2fe, 0x678f3920, 0x33845620, 0x8206ef61, 0xfe9822cf, 0x0f9741d3, 0x4bb46323, 0x209b8c55, 0x22338e3c, 0x8fb9fea5, 0x8e562033,
		0x09002133, 0xeb223382, 0x97436b02, 0x068f4305, 0x02b60a28, 0x041b2015, 0x0756500f, 0x2d002105, 0xc7202382, 0x2b212384, 0x07e54700, 0x01b60a27,
		0x0710151e, 0x20238701, 0x207b8412, 0x069f6279, 0x83050948, 0x30352123, 0xb018a284, 0x54080827, 0x006b02d9, 0x40740028, 0x11200b40, 0x1d234d00,
		0x28781d22, 0x28281423, 0x06222223, 0x18157609, 0x11131616, 0x0f2a1511, 0x2807070f, 0x79071829, 0x1d081508, 0x20007928, 0x02003000, 0x00080008,
		0x44222310, 0x10790f13, 0xed3f0041, 0x12333f32, 0x2f2f3939, 0xc259185d, 0x2f32250a, 0xcc102f32, 0x02820582, 0xd5181682, 0x13370b66, 0x023e3233,
		0x33352337, 0x2323032e, 0x23072135, 0x07331716, 0x18030e23, 0x08076d52, 0x19413f46, 0x08253037, 0x1704f0ee, 0x73172a21, 0x7c0c9a01, 0x0d3b0927,
		0x3b290631, 0x3c19274a, 0x6114363b, 0x393b3a19, 0x083e0116, 0x40192113, 0x0714221b, 0x37214040, 0x23342640, 0x3e180412, 0x231f4645, 0x15384146,
		0x4308ea82, 0x3a000700, 0xbb013401, 0x1300b502, 0x2b001f00, 0x4e003c00, 0x6c006000, 0x1d403700, 0x5d284165, 0x37335e40, 0x5d5e2c37, 0x670a0004,
		0x5555254a, 0x3d141a50, 0x0f05064a, 0xcc3f004d, 0x33113917, 0x2f013311, 0x11260886, 0x31333333, 0x42190130, 0x1e250cdc, 0x06220502, 0x05307a15,
		0x26342008, 0x17060617, 0x36371616, 0x26262736, 0x37363427, 0x07060627, 0x07141516, 0x26371716, 0x84323726, 0x06273706, 0x26272627, 0x17072223,
		0x27221736, 0x32331607, 0x36373637, 0x2d843617, 0x82163721, 0x2f1e820b, 0x16060706, 0x351ebb01, 0x46282846, 0x341e1e34, 0x35270783, 0x0bbdfe1e,
		0x820b0f0f, 0x09ac2803, 0x14060506, 0x8205090a, 0x89390805, 0x11140f12, 0x0e0e0518, 0x0f14230b, 0x2a1e4b12, 0x12022503, 0x10100f0e, 0x1b120c01,
		0x0f101216, 0x1612100f, 0x010c121b, 0x0e0f1010, 0x03250212, 0x1409172a, 0x09050506, 0x2205820a, 0x8bf40106, 0x2a708260, 0x0a0b0f0e, 0x0b0a0f0f,
		0x8205750f, 0x063b0860, 0x09150506, 0x1456040a, 0x0c200b1f, 0x13091422, 0x1a270b11, 0x5f1f0b20, 0x15011d28, 0x07050e25, 0x0c04100a, 0x0797071f,
		0x10040c1f, 0x0e05070a, 0x1d011525, 0x0506a728, 0x8215090a, 0x0833089c, 0x0e00130b, 0x00005bff, 0xb4029902, 0x07000300, 0x0f000b00, 0x17001300,
		0x1f001b00, 0x27002300, 0x2f002b00, 0x37003300, 0x1f40af07, 0x00091033, 0x8218324d, 0x082b2104, 0x2a200482, 0x27200483, 0x26201383, 0x23240483,
		0xb3f0ffb8, 0x22251682, 0x40f8ffb8, 0x2008820e, 0x20158321, 0x20248320, 0x2012831e, 0x201282b9, 0x2012831d, 0x3d41831c, 0x1b261b06, 0x1b461b36,
		0x1b861b66, 0x1b073d06, 0x1a060901, 0x1a361a26, 0x1a661a46, 0x11821a86, 0x11821a20, 0x16139b08, 0x66132613, 0x12060413, 0x12261216, 0x3d041266,
		0x09010509, 0x093e0104, 0x02011901, 0x00190009, 0x26074102, 0x01250701, 0x07012207, 0x1f090121, 0x781c0901, 0x17094909, 0x09021769, 0x02146914,
		0x0e360e06, 0x06030e66, 0x660d360d, 0x0b09030d, 0x09020b39, 0x02083908, 0xaa319a3d, 0x31690231, 0x31893179, 0x0a403103, 0x310a480e, 0x802f3101,
		0x2f483b34, 0x288f287f, 0x6e285e02, 0x284d0228, 0x01283e01, 0x8001b828, 0x2b284e40, 0xaa289a48, 0x28690228, 0x28892879, 0x33832803, 0x09b02825,
		0x83242849, 0x7f260834, 0x02248f24, 0x246e245e, 0x01244d02, 0x243e242e, 0x1d240d02, 0x24fd0224, 0xaa249a01, 0x24690224, 0x24892479, 0x68842403,
		0x24012428, 0x80ffb836, 0x6c820940, 0x01360725, 0x83323536, 0x0c24080d, 0x1748130d, 0x37322732, 0x2b320332, 0x4000feb8, 0x48312d13, 0x20012b31,
		0x2b01012b, 0xf1022b11, 0x2b00012b, 0x10282887, 0x302b202b, 0x272b032b, 0xb3202882, 0x07822782, 0x28b34025, 0x8327482c, 0x82ff2020, 0x10730849,
		0x30272027, 0x1c270327, 0x0901200c, 0x2f222003, 0x02158f15, 0x3b011509, 0x159f158f, 0x5e0315ff, 0x15bd0115, 0x15fd15ed, 0x01155b03, 0x1b01154c,
		0x15aa0115, 0x790215ba, 0x15080115, 0x0a021518, 0x01130915, 0x0c0f133b, 0x0c6f0c3f, 0x0c4f3d03, 0x0cbf0c8f, 0x1e040cef, 0x0cad010c, 0x7b020ced,
		0x0c4c010c, 0x010c0b01, 0x0cda0caa, 0x690c3902, 0x8308020c, 0x2f0d090f, 0x02085f08, 0x3b010809, 0x8f0108e9, 0x0208bf08, 0xed01081e, 0x087b0108,
		0x01084c01, 0x08da08aa, 0x38080802, 0x080b0208, 0x1a861a66, 0x011a0702, 0x00191a33, 0x02176017, 0x8017503d, 0xf0179017, 0x17e10417, 0xb20217f1,
		0x17530117, 0x44171401, 0x17b50217, 0xa6177601, 0x17070217, 0x0a021717, 0x300f0017, 0x030f600f, 0xb00f803d, 0x030fe00f, 0x0f410f11, 0x010fe102,
		0x0fa20f72, 0x440f0402, 0x40d4020f, 0xa5010f3e, 0x0f66010f, 0x370f0701, 0x0f0b020f, 0x0a300a00, 0x0a903d02, 0x21020ac0, 0x0af1010a, 0x010a8201,
		0xe4010a54, 0x0ab5010a, 0x010a4601, 0x0a010a17, 0xe6390400, 0x06030103, 0xb81f1910, 0x094080ff, 0x1f484534, 0x38352c22, 0x00feb835, 0x3b313b40,
		0x01356148, 0x35503540, 0x31352102, 0x35100235, 0x01350101, 0x35f135e1, 0xc235b202, 0x0335d235, 0x35a33593, 0x01358202, 0x35733563, 0x01355402,
		0x00013543, 0x83258392, 0x0e12264d, 0x35334812, 0x08368201, 0x02352031, 0x03013508, 0xffb82235, 0x18164000, 0x22b5481d, 0x22d522c5, 0x0122a603,
		0x01335822, 0x012cdd33, 0x4001b82c, 0x26200c40, 0x5b2c4b48, 0x843c022c, 0x40003510, 0x481c171c, 0x2cba2caa, 0x2c032cca, 0x48131080, 0x49012c5a,
		0x402a1a82, 0x2c480d0a, 0x0002b81f, 0xb08232b7, 0x26313123, 0x2a0b8234, 0x483b30b3, 0xc001b834, 0x832f2cb3, 0x40803407, 0x482b2333, 0x348c347c,
		0x01346b02, 0x4b01345c, 0x84340134, 0x3f078243, 0x480e0a40, 0x2b231b34, 0x03233b23, 0x1a14c023, 0x29572348, 0x5b2b2901, 0x80feb82d, 0x482724b3,
		0xc0230782, 0x82231eb3, 0x00ff2407, 0x831d1ab3, 0xb3402307, 0x07831911, 0x0d408034, 0x0748100d, 0x272d172d, 0x2d0a032d, 0x00feb81e, 0x8682ae40,
		0x081e2308, 0x240f0124, 0x19205926, 0x19501940, 0x19801960, 0x170619a0, 0x19000119, 0x19c03b01, 0xb10219e0, 0x15850119, 0x01035108, 0x21191119,
		0x04194119, 0xa20119e1, 0x0219c219, 0x72011983, 0x19630119, 0x24190401, 0x03194419, 0x19c519a5, 0x19e519d5, 0x86196604, 0x19470219, 0x01193601,
		0x0b011907, 0x01062019, 0x3c010607, 0x800106d6, 0x06770106, 0x0106e101, 0xa5010643, 0x4d081584, 0x1769060c, 0x08021799, 0x17330117, 0x102f101f,
		0x107f103f, 0x01100804, 0xef10af3c, 0x109e0210, 0x8f104f01, 0x100d0210, 0x01b81001, 0x2aff4060, 0x5c104c49, 0xac106c10, 0x0510ec10, 0xcb01100b,
		0x10aa0110, 0x190210ba, 0x69102910, 0x38820310, 0x100b4808, 0x031f030f, 0x03d84102, 0x9f038f01, 0x03fd0203, 0x0103ee01, 0x035c034c, 0x0103bb02,
		0x090103aa, 0x02031903, 0x1517030f, 0x0a151501, 0x182f180f, 0x185f184f, 0x188f186f, 0x3b0718af, 0x18cf18bf, 0xae0318ef, 0x844f0118, 0x03b60813,
		0x181e180e, 0x8d03182e, 0xcd18ad18, 0x0418ed18, 0x186c184c, 0x0b03187c, 0x02182b18, 0x18eb18db, 0xaa188a02, 0x0318ca18, 0x18691849, 0x01183802,
		0x08011829, 0x180b0118, 0x3e01070f, 0x8e0107d9, 0x07780107, 0x0107ed01, 0xaa01074b, 0x07080107, 0x66070c01, 0x0d07010d, 0x0f0d3301, 0x1011005b,
		0x60112011, 0x803d0411, 0xa0119011, 0x0411e011, 0x11411101, 0xf111e102, 0x11a20211, 0x63115301, 0x11040211, 0x65021144, 0xb511a511, 0x3940c511,
		0x11070411, 0x11271117, 0x00110b03, 0x02021002, 0xf002e041, 0x02a70202, 0x01025001, 0xb2010241, 0x02a30102, 0x1a840001, 0x02600124, 0x00820270,
		0x0108af32, 0x00590a08, 0x3272cd3f, 0x715f5d5f, 0x7271715f, 0x5e260082, 0x5d5e325d, 0x0082715d, 0x5e727225, 0x82cd3f5d, 0x8810850c, 0x825d201b,
		0x831e8400, 0x39122420, 0x82335d2f, 0x83318323, 0x820b840f, 0x852b200c, 0x8e5d204b, 0x855c843f, 0x2042883f, 0x2165845d, 0x66822b32, 0x00832b20,
		0x5dcd3f29, 0x32712b32, 0x822b5d2b, 0x82712022, 0x25638211, 0x2b332b33, 0x12845d5d, 0x82712b21, 0x820b821f, 0x5f5d23b4, 0xba832b5d, 0xbd852783,
		0x012b7229, 0xdc32dc10, 0x82de2b32, 0xcc722404, 0x883232cd, 0x84d885ad, 0x82a883da, 0x200b846d, 0x20e58271, 0x20a58910, 0x85e68471, 0x070441a6,
		0x2d892a82, 0x5d232e82, 0x825fcd10, 0x5d32214d, 0x04829b82, 0x33835f20, 0x08822b20, 0x5dcd1022, 0x56820683, 0x72244482, 0x2b322b72, 0x0b83b383,
		0xbc82dc82, 0x30315d24, 0x8f835e00, 0x2b5d5d22, 0x01200785, 0x02870682, 0x835d5e21, 0x89528201, 0x11012402, 0x82031133, 0x35012303, 0x03841521,
		0x15200b82, 0x17860b83, 0x022a1b97, 0x1d1d1d7c, 0x3401affe, 0x0382ccfe, 0x841daf21, 0x1c9b2304, 0x13821c1c, 0xcbfe3527, 0xaefe3501, 0x2604851d,
		0xfe2a016b, 0x83b4fed6, 0x79022805, 0x68fd1c1c, 0x84011d1d, 0x821f2013, 0x83d32040, 0x4c012116, 0x002b22a0, 0x00030000, 0x01f3ff04, 0x82de01f0,
		0x001d3709, 0x40320029, 0x21091716, 0x111c0427, 0x00022727, 0x24040e14, 0x01820e1e, 0x0003012e, 0x3939cc2f, 0xde102f2f, 0x01ce10cd, 0x2f3a0b82,
		0x10ced4cd, 0x31cedcde, 0x17373730, 0x3e343707, 0x2e343502, 0x06222302, 0xa9571707, 0x020e2905, 0x32171715, 0x26343536, 0x57081482, 0x04161415,
		0x14f6f6f6, 0x09171c18, 0x15192315, 0x1d11122c, 0x1715121d, 0x1f01161b, 0x0e15150e, 0xe8161610, 0xb1f5f6f6, 0x201d2116, 0x151b0c16, 0x2e0c0b0e,
		0x100f0d11, 0x17201b18, 0x1114690a, 0x11151511, 0x00001411, 0xdeffffff, 0x1302f4ff, 0x27007902, 0x6aff6f01, 0x262ac182, 0x00001100, 0x74010701,
		0x0d829600, 0x013f0283, 0x22010000, 0x3e032201, 0x11000500, 0x000104b5, 0x00000502, 0x012fcd2f, 0x31cd2f2f, 0x82331130, 0xd2212a01, 0x01defe50,
		0xfdcc0172, 0x212c82e4, 0x2f82d200, 0x2f86f420, 0x03050224, 0x2f820205, 0x85cd2f21, 0x8213202f, 0x8215202f, 0xfed2272f, 0xfe3e03de, 0x2f845034,
		0x0156ff25, 0x847201f4, 0x0302245f, 0x82030500, 0x295f832f, 0x30312fcd, 0x23152113, 0x51822311, 0x0150d226, 0x34fe5072, 0x8f832f87, 0x0d000329,
		0x020203b3, 0x822f0001, 0x2a8b828c, 0x33112305, 0x50502201, 0x82e803aa, 0x83b785bb, 0x22278357, 0x82000102, 0x82848327, 0x213522b3, 0x82708215,
		0x82268229, 0x82002016, 0x294f837f, 0xb7150007, 0x04050207, 0xe5820306, 0xe2852f20, 0x57853320, 0x82352321, 0x295b82b7, 0xaa50d2d2, 0x0150cc01,
		0x378600cc, 0x37835f83, 0x05020627, 0x07050201, 0x218b8204, 0xea8332cd, 0x0120bb82, 0x1127ba83, 0xf4013523, 0x84d250d2, 0x833a82bd, 0x061f4137,
		0x05243784, 0x05030102, 0x33209b84, 0x7482c582, 0x6c829f83, 0x15331122, 0x22203583, 0xfe226b82, 0xa8825034, 0xd2000122, 0xf423a782, 0x83003e03,
		0x05032437, 0x41070001, 0x37820659, 0x8232cd21, 0x8213206f, 0x82728336, 0x50d22337, 0x36823e03, 0x83052f41, 0x333783df, 0x401e000b, 0x0609070c,
		0x0b020300, 0x06010904, 0x332f0002, 0x3e823882, 0x31220784, 0xe6841330, 0x23237982, 0x82d22311, 0x820282ea, 0xcc0121f3, 0x00234986, 0x87000200,
		0x0007324b, 0x4026000f, 0x0a070810, 0x0f020d05, 0x0f0e0a00, 0x2592830c, 0x32c52f00, 0x04822f2f, 0xc02f0122, 0xc0205484, 0x1d21ce88, 0x22558202,
		0x84352311, 0x01d22e9d, 0x7c015072, 0x505084fe, 0x0184fe50, 0x90df837c, 0x0d0b2f5b, 0x06020809, 0x06080407, 0x040a030d, 0xad82010f, 0x82332f21,
		0x0133215e, 0x63826083, 0x1720f282, 0x35245382, 0x023b1133, 0x5022b486, 0x52828282, 0xa5410482, 0x20b88705, 0x20b78401, 0x06634222, 0x00040125,
		0x82010402, 0x832f20aa, 0x24a08249, 0x11231121, 0x82e98223, 0xe4fd2395, 0xe787cc01, 0x4105f342, 0x0a210535, 0x26318206, 0x00060b09, 0x82000205,
		0xc52f217e, 0x09823b84, 0x20070243, 0x23448415, 0xdefe50d2, 0xc2204884, 0x3426dd82, 0x0134fe50, 0x0082007c, 0xbb410220, 0x00052108, 0x0b224f84,
		0x4f820a07, 0x090a0722, 0x48828886, 0x56828b83, 0x01303124, 0xc8411121, 0x21112a06, 0xdefef401, 0x50d2d250, 0x26bb8201, 0x84fecc01, 0x8684fef0,
		0xd200229f, 0x050b4201, 0x08214f85, 0x21988207, 0x6c430b0a, 0x32c52105, 0x2f214f87, 0x0a7f412f, 0xd2352126, 0x0cfed250, 0x20097a41, 0x209b8550,
		0x854b8200, 0x00092aeb, 0x060a401a, 0x01040705, 0x21e98909, 0x4f832f01, 0x1520e789, 0x2305ee43, 0x01defe22, 0x5024e585, 0xd2000200, 0x05288f86,
		0x1b000900, 0x06070b40, 0x0923de82, 0x825a0206, 0xc52f2406, 0x84c52f3f, 0x858c82dd, 0x210522dc, 0x82da8615, 0x20488344, 0x20dc8372, 0x278f87a0,
		0xf40156ff, 0x0700c201, 0x22062b41, 0x82020708, 0x02082556, 0x00040706, 0x8505fa41, 0x0962434d, 0x21023d23, 0x05654315, 0x2201f422, 0x21055142,
		0x4d825050, 0x20055342, 0x824b8222, 0x2cdb8340, 0x04010809, 0x03090600, 0x2f000005, 0x062441c5, 0x47823220, 0x11211126, 0x35231123, 0x22239683,
		0x8301d250, 0xfe222592, 0xf07c0134, 0x8f86db84, 0x05274388, 0x09060401, 0x42030401, 0x01200509, 0x43824983, 0x41822520, 0x25211122, 0xd221da84,
		0x25438650, 0x84fed2de, 0xd983cc01, 0x82000222, 0x72304782, 0x03003e03, 0x15000700, 0x020405b7, 0x07020403, 0x8305d642, 0x31c52a43, 0x11231730,
		0x2311023b, 0x29bc82d2, 0x03aa5050, 0x0018fce8, 0x73430400, 0x05220808, 0x11000b00, 0x36001700, 0x10071840, 0x0c0b0d0a, 0x01160512, 0x15090413,
		0x130a1607, 0x040d0110, 0x2343020e, 0x05274308, 0x06833320, 0x2f332f22, 0xbf410782, 0x05232106, 0x3328a583, 0x33112335, 0x33053311, 0x8220f583,
		0xf420f082, 0xd2240482, 0x0cfe8250, 0xd5410482, 0x83a02005, 0x015025b7, 0xa084fecc, 0x2005c542, 0x85878403, 0x430920bf, 0x0a2405fd, 0x0b060e09,
		0x0327c182, 0x050a0e0d, 0x83060009, 0x2fc5247d, 0x83332fc5, 0x227b84ce, 0x82013031, 0x82038263, 0x84152005, 0x2201256d, 0xdefe5050, 0x03256e85,
		0x0218fc3e, 0x0a29436c, 0x82000322, 0x2106e344, 0x63860003, 0x0e070b30, 0x02040f06, 0x000e0b03, 0x0806030d, 0x5f830005, 0xc520d282, 0xd9856384,
		0xcd821720, 0xd1840120, 0xdd841520, 0x5050d224, 0xc9822201, 0xaa226582, 0xbe82e803, 0x24093943, 0x00030000, 0x06ab4200, 0x0e2f6388, 0x030a000b,
		0x0e080509, 0x0c080b05, 0x86030206, 0x32c52163, 0x2f216386, 0x25c782c5, 0x35352115, 0xc3821133, 0x69842120, 0xfef40123, 0x215f820c, 0x6782f401,
		0xa020d383, 0x0120c683, 0x53436882, 0x03722309, 0xef43003e, 0x070a2506, 0x00060401, 0x08210583, 0x06254102, 0xc4830120, 0x53825983, 0x15215582,
		0x20078221, 0x23518321, 0x8efe5022, 0x24058341, 0xfd1c0250, 0x204f8594, 0x085f4382, 0x1e000b30, 0x0a070c40, 0x000b0104, 0x08020a07, 0xad850104,
		0x4f88c520, 0x84060941, 0x219e844f, 0x3f448efe, 0x6c022509, 0x0000e4fd, 0x2205cb41, 0x82c201f4, 0x06674109, 0x27070341, 0x0e050d07, 0x00010b08,
		0x45425584, 0x82c52005, 0x843320a9, 0x213522a9, 0x05614115, 0xcb412120, 0x82f42005, 0x053342af, 0x50507225, 0x8284fea0, 0x013423ff, 0x2746007c,
		0x82722006, 0x21ff865f, 0xb1830b00, 0x090a0723, 0x21af8a03, 0x59822fc5, 0x82303121, 0x112331f7, 0x11213523, 0xd2211123, 0x72018250, 0x01defe50,
		0x24057d43, 0x1c0294fd, 0x43008200, 0xaf83053b, 0x29084f41, 0x04010605, 0x070a0903, 0xa9830401, 0x83077342, 0x232521a5, 0x33204982, 0x01204f85,
		0xde24a184, 0xd2720150, 0x50249d83, 0x6c02e4fd, 0x00234f84, 0x8501d200, 0x000724ff, 0x8202b715, 0x04052346, 0x4a840100, 0xee830120, 0x35303122,
		0x2520ec82, 0x01260382, 0x010cfef4, 0xdf82d2f4, 0x9f445020, 0x0372220a, 0x089f443e, 0x06020a29, 0x060a0307, 0x82090502, 0x42332040, 0x2f2205ff,
		0x8b8332c5, 0x24069f46, 0x11231333, 0x23db8233, 0x50a05082, 0x24064048, 0xe80318fc, 0x89d78600, 0x09082b4b, 0x00010503, 0x08000b07, 0x8c830205,
		0x332f3323, 0x834a8301, 0x4601204b, 0x03270615, 0x01231133, 0x84825022, 0x06e6474c, 0x48052a44, 0x0b300a5b, 0x0c401e00, 0x0605090a, 0x05090003,
		0x0302070b, 0x33204d82, 0x2f204d84, 0xcf42a082, 0x20508206, 0x42038311, 0x502305cb, 0x82720150, 0xfecc2303, 0x03820134, 0x00239b82, 0x42012201,
		0x092605c3, 0x0b401c00, 0x45820607, 0x09020625, 0x47000409, 0x9a8205e6, 0x44844b85, 0x82012321, 0x05bf4297, 0x01284882, 0x02e4fdcc, 0x00e4fd1c,
		0x82204782, 0x2b080f4a, 0x401a0009, 0x0509080a, 0x08020203, 0x2005b941, 0x82e08432, 0x30312193, 0x2305b742, 0x33112305, 0x2005b542, 0x288c82de,
		0xfe1c0222, 0x1c025034, 0x0b6f4900, 0x0b2bdb84, 0x03070408, 0x080a0600, 0x83010b04, 0x8648848e, 0x351125db, 0x11231521, 0x01230185, 0x835082f4,
		0x50502148, 0x0121d785, 0x464b82cc, 0x72230517, 0x45007201, 0x072806d3, 0x01040506, 0x04060309, 0x33204b83, 0x9b429389, 0x82252005, 0x06e643d9,
		0xfd720126, 0x50cc01e4, 0xbb41d882, 0x82438906, 0x040123d7, 0x96830108, 0x2f332f27, 0x2f0133c5, 0x83d787c5, 0x23d784d3, 0xfed25082, 0xfe25d784,
		0xfd1c0234, 0x48d883e4, 0x2208059b, 0x003e03f4, 0xb30d0003, 0x02030003, 0x012f2f00, 0x30312f2f, 0x11211101, 0x0cfef401, 0x18fc3e03, 0x8200e803,
		0x002e2500, 0x016eff00, 0xdf542b85, 0x00460818, 0x003f003b, 0x00470043, 0x004f004b, 0x00570053, 0x005f005b, 0x00670063, 0x006f006b, 0x00770073,
		0x007f007b, 0x00870083, 0x008f008b, 0x00970093, 0x009f009b, 0x00a700a3, 0x00af00ab, 0x00b700b3, 0x15331100, 0x03821723, 0x07863720, 0x0fd20720,
		0x13205b83, 0x638b578a, 0x4f830bb3, 0x4e272722, 0xea200287, 0x9c220bbd, 0x02822727, 0x20214d83, 0x2808af20, 0x0320209c, 0x2727273e, 0x83038275,
		0x20078b02, 0x82179628, 0x03272216, 0x831c84d0, 0x8475202e, 0x2775223c, 0x83119076, 0x0000221d, 0x64074255, 0x00bb4c08, 0x00c300bf, 0x00cb00c7,
		0x00d300cf, 0x00db00d7, 0x00e300df, 0x00eb00e7, 0x00f300ef, 0x00fb00f7, 0x010301ff, 0x010b0107, 0x0113010f, 0x011b0117, 0x0123011f, 0x012b0127,
		0x0133012f, 0x013b0137, 0x0143013f, 0x014b0147, 0x4253014f, 0x37240555, 0x07231533, 0x83065942, 0x200f9b0b, 0x87278e05, 0x2017df2f, 0x97778213,
		0x40838363, 0x27238b1b, 0x83274e27, 0x21059a00, 0x0a437afe, 0x051f430a, 0x272412cb, 0x2cfe2020, 0x4e206190, 0x032115ef, 0x126d433e, 0x8f0b7d43,
		0x8676200b, 0x43178f2f, 0x178307ad, 0x43820321, 0x2d8508c4, 0x27211c8b, 0x43428b27, 0x299309ee, 0x0022378d, 0xd34b4900, 0x1aa75a08, 0x4340c745,
		0x3b2733bf, 0x33130000, 0x82172335, 0x86072003, 0x9e372007, 0x9e05200f, 0x403f8f1f, 0x1325bf2f, 0x23352311, 0x21039415, 0x09432711, 0x43119011,
		0xb646127d, 0x40088808, 0x47219324, 0x0a334320, 0xf0022722, 0x4616cb46, 0x064305c0, 0x2313870d, 0x28282876, 0x078b1983, 0x9505e446, 0x1343472f,
		0x03235f97, 0x8b18fc82, 0xe8032200, 0x095b4900, 0x00132008, 0x0314402e, 0x0a110600, 0x0c10070d, 0x070e1201, 0x00100a03, 0x0009050d, 0x332f332f,
		0x4a32c533, 0x0982063f, 0x2105534e, 0x424a3301, 0x06155308, 0x01331124, 0x5e528272, 0x50502106, 0x2606cf53, 0xcc0134fe, 0x83cc0150, 0x09a34a06,
		0x003e0322, 0x00356f84, 0x0f021311, 0x070c0509, 0x0c0f0d0a, 0x05020912, 0x00040813, 0x05c4522f, 0x2f32c523, 0x217a8201, 0x7a843232, 0x09596e18,
		0x53353321, 0xd2500884, 0x05885305, 0x5309d650, 0x6c820536, 0x011e0024, 0xe182006e, 0x00210a83, 0x85058249, 0x0001220b, 0x850d820b, 0x0002240b,
		0x86540007, 0x00032423, 0x865b0020, 0x8a04200b, 0x00052423, 0x867b000c, 0x00062417, 0x86870012, 0x0007240b, 0x86990040, 0x0008240b, 0x86d9000f,
		0x8a09200b, 0x000b240b, 0x86e8001a, 0x8a0c2017, 0x8a10200b, 0x8a11205f, 0x84122083, 0x00032417, 0x82090401, 0x019223af, 0x0b850002, 0x16000124,
		0x0b869401, 0x0e000224, 0x0b86aa01, 0x40000324, 0x0b86b801, 0x238a0420, 0x18000524, 0x1786f801, 0x24000624, 0x0b861002, 0x80000724, 0x0b863402,
		0x1e000824, 0x0b86b402, 0x0b8a0920, 0x34000b24, 0x1786d202, 0x0b8a0c20, 0x5f8a1020, 0x838a1120, 0x17831220, 0x6f433c08, 0x69727970, 0x20746867,
		0x31313032, 0x6e614320, 0x63696e6f, 0x4c206c61, 0x202e6474, 0x63694c20, 0x65736e65, 0x6e752064, 0x20726564, 0x20656874, 0x6e756255, 0x46207574,
		0x85746e6f, 0x6563251e, 0x302e3120, 0x4d2a1686, 0x526f6e6f, 0x6c756765, 0x118a7261, 0x12862020, 0x6556202c, 0x6f697372, 0x2e30206e, 0x0b8b3038,
		0x3c832b85, 0x3d8d2d20, 0x646e6122, 0x612b948a, 0x72206572, 0x73696765, 0x82726574, 0x72742c94, 0x6d656461, 0x736b7261, 0x8e666f20, 0x614423bb,
		0x6882746c, 0x61614d23, 0x2bcb8367, 0x70747468, 0x772f2f3a, 0x642e7777, 0x6d201984, 0x2e3e1882, 0x2f6d6f63, 0x6f004300, 0x79007000, 0x69007200,
		0x68006700, 0x20007400, 0x30003200, 0x01823100, 0x1d822020, 0x6e006122, 0x6e202182, 0x63241d82, 0x6c006100, 0x4c201d82, 0x64222382, 0x09822e00,
		0x4c002022, 0x65201784, 0x73242382, 0x64006500, 0x75201382, 0x64200b82, 0x72200b82, 0x74200b82, 0x65204f82, 0x55230782, 0x83006200, 0x82742017,
		0x00202205, 0x204f8446, 0x22498474, 0x82630069, 0x846e202b, 0x82202005, 0x822e2071, 0x202d8d79, 0x222d844d, 0x8252006f, 0x82672027, 0x006c223f,
		0x95ab8261, 0x8e202023, 0x00202225, 0x22358256, 0x82730072, 0x826f20a5, 0x82202097, 0x002e225d, 0x97058238, 0x87578b17, 0x8e2d2079, 0x207b8d55,
		0x41ef8461, 0xa9831529, 0x7220ff83, 0x6920bb84, 0x74208782, 0x29418f84, 0x82742005, 0x006122c7, 0x20118264, 0x20d3846d, 0x201f826b, 0x21ed8220,
		0x4d950066, 0x20077741, 0x222d8244, 0x8274006c, 0x826e2029, 0x824d2029, 0x0061220d, 0x85098267, 0x8268201f, 0x00742619, 0x003a0070, 0x2101822f,
		0x01830077, 0x65822e20, 0x87006121, 0x836d8333, 0x002e2231, 0x20438263, 0x2125826d, 0x00840002, 0x0085ff23, 0x086f4414, 0x02870882, 0x10052908,
		0x02010000, 0x03000200, 0x05000400, 0x07000600, 0x09000800, 0x0b000a00, 0x0d000c00, 0x0f000e00, 0x11001000, 0x13001200, 0x15343f82, 0x17001600,
		0x19001800, 0x1b001a00, 0x1d001c00, 0x1f001e00, 0x213a9d82, 0x23002200, 0x25002400, 0x27002600, 0x29002800, 0x2b002a00, 0x2d002c00, 0x81822e00,
		0x31003032, 0x33003200, 0x35003400, 0x37003600, 0x39003800, 0x0907c182, 0x3c003bbb, 0x3e003d00, 0x40003f00, 0x42004100, 0x44004300, 0x46004500,
		0x48004700, 0x4a004900, 0x4c004b00, 0x4e004d00, 0x50004f00, 0x52005100, 0x54005300, 0x56005500, 0x58005700, 0x5a005900, 0x5c005b00, 0x5e005d00,
		0x60005f00, 0x03016100, 0xa600c400, 0xab00c500, 0xc2008200, 0xc600d800, 0xbe00e400, 0xb600b000, 0xb400b700, 0x8700b500, 0xb300b200, 0x8c00d900,
		0xbf00e500, 0xbb00b100, 0xa3000401, 0x85008400, 0x9600bd00, 0x8600e800, 0x8b008e00, 0xa9009d00, 0x0501a400, 0x06018a00, 0x93008300, 0xf300f200,
		0x97008d00, 0x07018800, 0xf100de00, 0xaa009e00, 0xf400f500, 0xa200f600, 0xc900ad00, 0xae00c700, 0x63006200, 0x64009000, 0x6500cb00, 0xca00c800,
		0xcc00cf00, 0xce00cd00, 0x6600e900, 0xd000d300, 0xaf00d100, 0xf0006700, 0xd6009100, 0xd500d400, 0xeb006800, 0x8900ed00, 0x69006a00, 0x6d006b00,
		0x6e006c00, 0x6f00a000, 0x70007100, 0x73007200, 0x74007500, 0x77007600, 0x7800ea00, 0x79007a00, 0x7d007b00, 0xb8007c00, 0x7f00a100, 0x80007e00,
		0xec008100, 0xba00ee00, 0x09010801, 0x0b010a01, 0x0d010c01, 0xfe00fd00, 0x0f010e01, 0x11011001, 0x0001ff00, 0x13011201, 0x15011401, 0x17011601,
		0x19011801, 0x1b011a01, 0x1d011c01, 0x1f011e01, 0x21012001, 0xf900f800, 0x23012201, 0x25012401, 0x27012601, 0x29012801, 0x2b012a01, 0x2d012c01,
		0x2f012e01, 0x31013001, 0xd7003201, 0x34013301, 0x36013501, 0x38013701, 0x3a013901, 0x3c013b01, 0x3e013d01, 0x40013f01, 0x42014101, 0xe2004301,
		0x4401e300, 0x46014501, 0x48014701, 0x4a014901, 0x4c014b01, 0x4e014d01, 0x50014f01, 0x52015101, 0x54015301, 0x56015501, 0x58015701, 0x5a015901,
		0x5c015b01, 0xfb005d01, 0x5e01fc00, 0x60015f01, 0x62016101, 0x64016301, 0x66016501, 0x68016701, 0x6a016901, 0x6c016b01, 0x6e016d01, 0x70016f01,
		0x72017101, 0x74017301, 0x76017501, 0xe6007701, 0x7801e700, 0x7a017901, 0x7c017b01, 0x7e017d01, 0x7f01e100, 0xdc00db00, 0xe000dd00, 0x8001df00,
		0x82018101, 0x84018301, 0x86018501, 0xbc008701, 0x89018801, 0x8b018a01, 0x8d018c01, 0x8f018e01, 0x91019001, 0x93019201, 0x95019401, 0x97019601,
		0x99019801, 0x9b019a01, 0x9d019c01, 0x9f019e01, 0xa101a001, 0xa301a201, 0xa501a401, 0xa701a601, 0xa901a801, 0xab01aa01, 0xad01ac01, 0xaf01ae01,
		0xb101b001, 0x9800b201, 0x9a00b301, 0xb4019900, 0xb501ef00, 0xa500b601, 0x9c009200, 0x8f00a700, 0x95009400, 0xc000b900, 0xc100b701, 0xb901b801,
		0xbb01ba01, 0xbd01bc01, 0xbf01be01, 0xc101c001, 0xc301c201, 0xc501c401, 0xc701c601, 0xc901c801, 0xcb01ca01, 0xcd01cc01, 0xcf01ce01, 0xd101d001,
		0xd301d201, 0xd501d401, 0xd701d601, 0xd901d801, 0xdb01da01, 0xdd01dc01, 0xdf01de01, 0xe101e001, 0xe301e201, 0xe501e401, 0xe701e601, 0xe901e801,
		0xeb01ea01, 0xed01ec01, 0xef01ee01, 0xf101f001, 0xf301f201, 0xf501f401, 0xf701f601, 0xf901f801, 0xfb01fa01, 0xfd01fc01, 0xff01fe01, 0x01020002,
		0x03020202, 0x05020402, 0x07020602, 0x09020802, 0x0b020a02, 0x0d020c02, 0x0f020e02, 0x11021002, 0x13021202, 0x15021402, 0x17021602, 0x19021802,
		0x1b021a02, 0x1d021c02, 0x1f021e02, 0x21022002, 0x23022202, 0x25022402, 0x27022602, 0x29022802, 0x2b022a02, 0x2d022c02, 0x2f022e02, 0x31023002,
		0x33023202, 0x35023402, 0x37023602, 0x39023802, 0x3b023a02, 0x3d023c02, 0x3f023e02, 0x41024002, 0x43024202, 0x45024402, 0x47024602, 0x49024802,
		0x4b024a02, 0x4d024c02, 0x4f024e02, 0x51025002, 0x53025202, 0x55025402, 0x57025602, 0x59025802, 0x5b025a02, 0x5d025c02, 0x5f025e02, 0x61026002,
		0x63026202, 0x65026402, 0x67026602, 0x69026802, 0x6b026a02, 0x6d026c02, 0x6f026e02, 0x71027002, 0x73027202, 0x75027402, 0x77027602, 0x79027802,
		0x7b027a02, 0x7d027c02, 0x7f027e02, 0x81028002, 0x83028202, 0x85028402, 0x87028602, 0x89028802, 0x8b028a02, 0x8d028c02, 0x8f028e02, 0x91029002,
		0x93029202, 0x95029402, 0x97029602, 0x99029802, 0x9b029a02, 0x9d029c02, 0x9f029e02, 0xa102a002, 0xa302a202, 0xa502a402, 0xa702a602, 0xa902a802,
		0xab02aa02, 0xad02ac02, 0xaf02ae02, 0xb102b002, 0xb302b202, 0xb502b402, 0xb702b602, 0xb902b802, 0xbb02ba02, 0xbd02bc02, 0xbf02be02, 0xc102c002,
		0xc302c202, 0xc502c402, 0xc702c602, 0xc902c802, 0xcb02ca02, 0xcd02cc02, 0xcf02ce02, 0xd102d002, 0xd302d202, 0xd502d402, 0xd702d602, 0xd902d802,
		0xdb02da02, 0xdd02dc02, 0xdf02de02, 0xe102e002, 0xe302e202, 0xe502e402, 0xe702e602, 0xe902e802, 0xeb02ea02, 0xed02ec02, 0xef02ee02, 0xf102f002,
		0xf302f202, 0xf502f402, 0xf702f602, 0xf902f802, 0xfb02fa02, 0xfd02fc02, 0xff02fe02, 0x01030003, 0x03030203, 0x05030403, 0x07030603, 0x09030803,
		0x0b030a03, 0x0d030c03, 0x0f030e03, 0x11031003, 0x13031203, 0x15031403, 0x17031603, 0x19031803, 0x1b031a03, 0x1d031c03, 0x1f031e03, 0x21032003,
		0x23032203, 0x25032403, 0x27032603, 0x29032803, 0x2b032a03, 0x2d032c03, 0x2f032e03, 0x31033003, 0x33033203, 0x35033403, 0x37033603, 0x39033803,
		0x3b033a03, 0x3d033c03, 0x3f033e03, 0x41034003, 0x43034203, 0x45034403, 0x47034603, 0x49034803, 0x4b034a03, 0x4d034c03, 0x4f034e03, 0x51035003,
		0x53035203, 0x55035403, 0x57035603, 0x59035803, 0x5b035a03, 0x5d035c03, 0x5f035e03, 0x61036003, 0x63036203, 0x65036403, 0x67036603, 0x69036803,
		0x6b036a03, 0x6d036c03, 0x6f036e03, 0x71037003, 0x73037203, 0x75037403, 0x77037603, 0x79037803, 0x7b037a03, 0x7d037c03, 0x7f037e03, 0x81038003,
		0x83038203, 0x85038403, 0x87038603, 0x89038803, 0x8b038a03, 0x8d038c03, 0x8f038e03, 0x91039003, 0x93039203, 0x95039403, 0x97039603, 0x99039803,
		0x9b039a03, 0x9d039c03, 0x9f039e03, 0xa103a003, 0xa303a203, 0xa503a403, 0xa703a603, 0xa903a803, 0xab03aa03, 0xad03ac03, 0xaf03ae03, 0xb103b003,
		0x9f00b203, 0xb403b303, 0xb603b503, 0xb803b703, 0xba03b903, 0xbc03bb03, 0xbe03bd03, 0xc003bf03, 0x9b00c103, 0xc303c203, 0xc503c403, 0xc703c603,
		0xc903c803, 0xcb03ca03, 0xcd03cc03, 0xcf03ce03, 0xd103d003, 0xd303d203, 0xd503d403, 0xd703d603, 0xd903d803, 0xdb03da03, 0xdd03dc03, 0xdf03de03,
		0xe103e003, 0xe303e203, 0xe503e403, 0xe703e603, 0xe903e803, 0xeb03ea03, 0xed03ec03, 0xef03ee03, 0xf103f003, 0xf303f203, 0xf503f403, 0xf703f603,
		0xf903f803, 0xfb03fa03, 0xfd03fc03, 0xff03fe03, 0x01040004, 0x03040204, 0x05040404, 0x07040604, 0x09040804, 0x0b040a04, 0x0d040c04, 0x0f040e04,
		0x11041004, 0x13041204, 0x15041404, 0x17041604, 0x19041804, 0x1b041a04, 0x1d041c04, 0x1f041e04, 0x21042004, 0x23042204, 0x25042404, 0x27042604,
		0x29042804, 0x2b042a04, 0x2d042c04, 0x2f042e04, 0x31043004, 0x33043204, 0x35043404, 0x37043604, 0x39043804, 0x3b043a04, 0x3d043c04, 0x3f043e04,
		0x41044004, 0x43044204, 0x45044404, 0x47044604, 0x49044804, 0x4b044a04, 0x4d044c04, 0x4f044e04, 0x51045004, 0x53045204, 0x55045404, 0x57045604,
		0x59045804, 0x5b045a04, 0x5d045c04, 0x5f045e04, 0x61046004, 0x63046204, 0x65046404, 0x67046604, 0x69046804, 0x6b046a04, 0x6d046c04, 0x6f046e04,
		0x71047004, 0x73047204, 0x75047404, 0x77047604, 0x79047804, 0x7b047a04, 0x7d047c04, 0x7f047e04, 0x81048004, 0x83048204, 0x85048404, 0x87048604,
		0x89048804, 0x8b048a04, 0x8d048c04, 0x8f048e04, 0x91049004, 0x93049204, 0x95049404, 0x97049604, 0x99049804, 0x9b049a04, 0x9d049c04, 0x9f049e04,
		0xa104a004, 0xa304a204, 0xa504a404, 0xa704a604, 0xa904a804, 0xab04aa04, 0xad04ac04, 0xaf04ae04, 0xb104b004, 0xb304b204, 0xb504b404, 0xb704b604,
		0xb904b804, 0xbb04ba04, 0xbd04bc04, 0xbf04be04, 0xc104c004, 0xc304c204, 0xc504c404, 0xc704c604, 0xc904c804, 0xcb04ca04, 0xcd04cc04, 0xcf04ce04,
		0xd104d004, 0xd304d204, 0xd504d404, 0xd704d604, 0xd904d804, 0xdb04da04, 0xdd04dc04, 0xdf04de04, 0xe104e004, 0xe304e204, 0xe504e404, 0xe704e604,
		0xe904e804, 0x1905ea04, 0x1b051a05, 0x1d051c05, 0x1f051e05, 0x21052005, 0xf5042205, 0x2305f604, 0xf904f804, 0xfb04fa04, 0xfd04fc04, 0xff04fe04,
		0x01050005, 0x03050205, 0x05050405, 0x07050605, 0x09050805, 0x0b050a05, 0x0d050c05, 0x0f050e05, 0x11051005, 0x13051205, 0x15051405, 0x17051605,
		0x2e051805, 0x6c6c756e, 0x72754504, 0x6e75076f, 0x41303069, 0x38078630, 0x616d0644, 0x6e6f7263, 0x7265700e, 0x63646f69, 0x65746e65, 0x07646572,
		0x21168541, 0x07856107, 0x62410628, 0x65766572, 0x06846106, 0x6f410729, 0x656e6f67, 0x8561076b, 0x430b2d07, 0x63726963, 0x6c666d75, 0x630b7865,
		0x0a260b89, 0x746f6443, 0x54836361, 0x88630a21, 0x4406230a, 0x71826163, 0x85640621, 0x63442506, 0x74616f72, 0x06830d82, 0x85450721, 0x6507216f,
		0x06210785, 0x21708445, 0x06846506, 0x88450a21, 0x650a2144, 0x07210a88, 0x21858545, 0x07856507, 0x85450621, 0x84652058, 0x470b2106, 0x0b218f89,
		0x210b8967, 0x4b89470a, 0x0a886720, 0x63470c26, 0x616d6d6f, 0x0c21b385, 0x210c8a67, 0x3b89480b, 0x89680b21, 0x4804260b, 0x04726162, 0x28048268,
		0x69744906, 0x0665646c, 0x21068469, 0xc1854907, 0x85690721, 0x49062107, 0x0621c284, 0x21068469, 0xab854907, 0x85690721, 0x490a2107, 0x062e8288,
		0x6f6c2e69, 0x49026c63, 0x6a69024a, 0x69894a0b, 0x896a0b21, 0x4b0c210b, 0x0c219a8a, 0x320c8a6b, 0x72676b11, 0x6c6e6565, 0x69646e61, 0x61632e63,
		0x8b0c6573, 0x4c062811, 0x74756361, 0x846c0665, 0x4c0c2106, 0x0c21398a, 0x280c8a6c, 0x61634c06, 0x066e6f72, 0x2106846c, 0x9e824c04, 0x826c0421,
		0x4e062104, 0x6e203f85, 0x4e203f85, 0x0c21328a, 0x210c8a6e, 0x38844e06, 0x846e0621, 0x6e102b06, 0x736f7061, 0x706f7274, 0x93846568, 0x108a0b20,
		0x6e450329, 0x6e650367, 0x414f0767, 0x07210529, 0x2807856f, 0x72624f06, 0x06657665, 0x2f06846f, 0x75684f0d, 0x7261676e, 0x616c6d75, 0x6f0d7475,
		0x06210d8b, 0x218d8452, 0x06847206, 0x8a520c21, 0x720c2187, 0x06210c8a, 0x218d8452, 0x06857206, 0x2e845320, 0x84730621, 0x530b2106, 0x21095d41,
		0x0b89730b, 0x6e750727, 0x36313069, 0x22078632, 0x85540633, 0x8474203c, 0x54042606, 0x04726162, 0x28048274, 0x69745506, 0x0665646c, 0x21068475,
		0xc3855507, 0x85750721, 0x55062107, 0x0621c484, 0x27068475, 0x69725505, 0x7505676e, 0x0d210583, 0x20d78c55, 0x210d8b75, 0x1d425507, 0x75072105,
		0x0b210785, 0x21978957, 0x0b8a770b, 0x0b8a5920, 0x0b897920, 0x845a0621, 0x7a0621da, 0x0a210684, 0x0863425a, 0x887a0a21, 0x6c05270a, 0x73676e6f,
		0x2641530c, 0x730c210a, 0xf7840c8a, 0x41313222, 0x42210786, 0x25398208, 0x7373656c, 0xd2410a6a, 0x2a1b8509, 0x57063943, 0x76617267, 0x85770665,
		0x84572006, 0x77062176, 0x092b0684, 0x65696457, 0x69736572, 0x87770973, 0x59062109, 0x79202885, 0x0c310684, 0x6f72657a, 0x65707573, 0x726f6972,
		0x756f660c, 0x220c8972, 0x87657669, 0x730b230c, 0x0b877869, 0x65730d25, 0x886e6576, 0x6965240d, 0x88746867, 0x696e2234, 0x8434886e, 0x6e69225b,
		0x235b8466, 0x656e6f0b, 0x74220b88, 0x0b876f77, 0x68740d24, 0x19886572, 0x1a878184, 0x82660c21, 0x82338881, 0x84338881, 0x840d8881, 0x83348881,
		0x3d0c8781, 0x69666109, 0x32313669, 0x65093938, 0x6d697473, 0x64657461, 0x656e6f08, 0x72696874, 0x85820964, 0x73210884, 0x84128209, 0x0c682144,
		0x0b858d84, 0x830b7321, 0x200b867f, 0x8672840c, 0x2442830c, 0x74666966, 0x84428368, 0x0b732108, 0x0b853884, 0x6f660a24, 0x0a857275, 0xb8822983,
		0x0a687422, 0x09844b83, 0x820a7321, 0x224d846d, 0x820b6874, 0x200a8682, 0x05084173, 0x0c200d87, 0x0c894383, 0x65766922, 0x0b200c87, 0x0b874582,
		0x4a820820, 0x8885ef82, 0x73200884, 0x0a877c84, 0x0a853682, 0x31840b20, 0xc5840b86, 0x052d0b85, 0x746c6544, 0x6e750761, 0x32313269, 0x22078436,
		0x86353132, 0x03392407, 0x82695f66, 0x096c2a03, 0x6f72657a, 0x7075732e, 0x85708373, 0x84b98208, 0x840a2008, 0x200a84f8, 0x86b38309, 0x84798209,
		0x82082009, 0x200884ad, 0x8581840a, 0x8480840a, 0x8209200a, 0x85652086, 0x22638509, 0x85666e69, 0x84088363, 0x87088263, 0x860a8263, 0x84098463,
		0x85098263, 0x87088263, 0x860a8363, 0x860a8263, 0x29098363, 0x6f726163, 0x6c612e6e, 0x6c430b74, 0x720e230a, 0x0e8a7665, 0x24880f20, 0x68732e30,
		0x0974726f, 0x65726150, 0x66656c6e, 0x09840a74, 0x6769723c, 0x48067468, 0x65687079, 0x6c53056e, 0x02687361, 0x420b7441, 0x6b636172, 0x26837465,
		0x82420921, 0x8373200a, 0x860c2018, 0x20328415, 0x200c8309, 0x84478465, 0x29148409, 0x6975470d, 0x6e69736c, 0x18836c67, 0x75420622, 0x74240782,
		0x646e4506, 0x06225682, 0x06836d45, 0x22880e20, 0x0a2a3184, 0x6c637845, 0x6f646d61, 0x3c846e77, 0x6d656c23, 0x8476846f, 0x840d8427, 0x510c2827,
		0x74736575, 0x836e6f69, 0x75072629, 0x3130696e, 0x057f4838, 0x31383122, 0x5f450f86, 0x33382106, 0x34200f86, 0x35200786, 0x36200786, 0x37200786,
		0x38200786, 0x39200786, 0x9f440786, 0x38312205, 0x200f8642, 0x20078643, 0x20078644, 0x20078645, 0x21078546, 0x07863039, 0x07863120, 0x39207786,
		0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39207786, 0x39297786, 0x684f0546,
		0x056e726f, 0x8505836f, 0x86412073, 0x864120f3, 0x8641207b, 0x8641207b, 0x8641207b, 0x8641207b, 0x8641207b, 0x8641207b, 0x8641207b, 0x8641207b,
		0x8641207b, 0x8641207b, 0x4541237b, 0x73845505, 0x73897520, 0x85314221, 0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b,
		0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b, 0x8642207b, 0x464221f7, 0x43216f85, 0x20078630, 0x86078631, 0x8643207f,
		0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f, 0x8643207f,
		0x3044217f, 0x44217785, 0x86078631, 0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f,
		0x8644207f, 0x8644207f, 0x8644207f, 0x8644207f, 0x3045217f, 0x45217785, 0x86078631, 0x8645207f, 0x8645207f, 0x3545237f, 0xbd4a4706, 0x84672005,
		0x862d8606, 0x8645207d, 0x8645207d, 0x8645207d, 0x8645207d, 0x4445217d, 0x7d862f86, 0x7d864520, 0x85304621, 0x31462117, 0x7d860786, 0x7d864620,
		0x7d864620, 0xfd864620, 0xfd864620, 0xfd864620, 0x7f864620, 0x0a39462e, 0x6e697241, 0x75636167, 0x610a6574, 0x07220a88, 0x12844541, 0x65610722,
		0x0b260784, 0x616c734f, 0x0b856873, 0x0b896f20, 0x32227d84, 0x07863030, 0x32218d85, 0x218d8530, 0x8d853032, 0x85303221, 0x3032218d, 0x32218d85,
		0x218d8530, 0x8d853032, 0x85303221, 0x3032218d, 0x21050d41, 0x0d413032, 0x30322105, 0x21050d41, 0x0d413032, 0x30322105, 0x21050d41, 0x0d413032,
		0x30322105, 0x22050d41, 0x85303132, 0x3131217f, 0x7f860786, 0x7f863120, 0x7f863120, 0x22057c46, 0x86313230, 0x8631207f, 0x8631207f, 0x8631205f,
		0x8631205f, 0x8631205f, 0x8632205f, 0x8632205f, 0x8632205f, 0x8632205f, 0x8632205f, 0x8632205f, 0x05ec46df, 0x32323022, 0x32205f86, 0x3220df86,
		0x3220df86, 0x3220df86, 0x3220df86, 0x32207f86, 0x32207f86, 0x32207f86, 0x33217f86, 0x21d78530, 0x07863133, 0x33207f86, 0x33207f86, 0x33207f86,
		0x33207f86, 0x3320df86, 0x33207786, 0x33207786, 0x33207786, 0x33207786, 0x33207786, 0x33207786, 0x33207786, 0x34217786, 0x216f8530, 0x07863134,
		0x34207786, 0x34207786, 0x34207786, 0x34207786, 0x34207786, 0x3420f786, 0x34207f86, 0x34207f86, 0x34207f86, 0x34207f86, 0x34207f86, 0x34207f86,
		0x34207f86, 0x29087f86, 0x620e3239, 0x65766572, 0x766e695f, 0x65747265, 0x6f640c64, 0x656c6275, 0x6172675f, 0x720a6576, 0x5f676e69, 0x74756361,
		0x7f4a0f65, 0x4b5f2007, 0x0a23059c, 0x86746f64, 0x880e200a, 0x8934841a, 0x8938840e, 0x2568840e, 0x6c69740c, 0x39866564, 0x21840920, 0x73612e24,
		0x804b0e63, 0x210e8309, 0xe9476309, 0x63732205, 0x235c8d12, 0x7061632e, 0x3e851289, 0x6484128c, 0x07312583, 0x30696e75, 0x09303034, 0x69696661,
		0x32303031, 0x21098733, 0x09883135, 0x09883220, 0x34201d89, 0x35201388, 0x36200988, 0x37200988, 0x38200988, 0x39200988, 0x36200987, 0x36216d88,
		0x207f8631, 0x871b8844, 0x3431216b, 0x31205788, 0x31204d88, 0x31204d88, 0x32204d88, 0xb188bb89, 0xb1883220, 0xa7883220, 0x4f883220, 0xa7883220,
		0x59883220, 0x59883220, 0x59883220, 0x59883320, 0x59883320, 0x59883320, 0x0b413320, 0x88332008, 0x88332063, 0x88332063, 0x88332063, 0x88332063,
		0x88332063, 0x88342063, 0x88342063, 0x88342063, 0x88342063, 0x88342063, 0x09174163, 0x63883420, 0x63883420, 0x63883420, 0x63883420, 0x95883620,
		0x31883620, 0x31883620, 0x31883620, 0x31883620, 0x95883720, 0x8b883720, 0x8b883720, 0x8b883720, 0x59883720, 0x59883720, 0x59883720, 0x59883720,
		0x59883720, 0x59883820, 0xef883820, 0x63883820, 0x63883820, 0x63883820, 0x63883820, 0x63883820, 0x63883820, 0x63883820, 0x63883820, 0x63883920,
		0x63883920, 0x63883920, 0x63883920, 0x63883920, 0x63883920, 0x63883920, 0x3b443920, 0x35342105, 0x37204d88, 0x6b874d89, 0x39433120, 0x30312108,
		0x31211d87, 0x08c34230, 0x6b873020, 0x87303121, 0x3031216b, 0x31216b87, 0x216b8730, 0xcf873031, 0x87303121, 0x463120cf, 0x34210683, 0x071b4335,
		0x30313122, 0x23062543, 0x0e333931, 0x2606af43, 0x6c2e3636, 0x436c636f, 0x4a500546, 0x36342106, 0x21051645, 0x26453734, 0x37342105, 0x26450f87,
		0x37342105, 0x21052645, 0x06453834, 0x4a342005, 0x342106da, 0x05064538, 0x45383421, 0x34210506, 0x05064538, 0x46383422, 0x4108c443, 0xae4a080c,
		0x39342106, 0x39206386, 0x39206386, 0x39206386, 0x39206386, 0x20058a45, 0x074e4134, 0x8a453788, 0x4a342005, 0x342006e6, 0x2006e64a, 0x06e64a34,
		0xe64a3420, 0x39342106, 0x39208386, 0x20058a45, 0x065e5434, 0x31413422, 0xea4af385, 0x4a342006, 0x342006ea, 0x2006ea4a, 0x06ea4a34, 0xea4a3420,
		0x4a342006, 0x342006ea, 0x2006ea4a, 0x06ea4a34, 0xea4a3420, 0x4a342006, 0x342006ea, 0x2006ea4a, 0x06ea4a34, 0x86413421, 0x8641207f, 0x3042217f,
		0x42207785, 0xee4a7f86, 0x4a342006, 0x342006ee, 0x2106ee4a, 0xff864234, 0x2006ee4a, 0x06ee4a34, 0xee4a3420, 0x42342106, 0xee4aff86, 0x4a342006,
		0x342006ee, 0x2006ee4a, 0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342006ee, 0x2106ee4a, 0x7f864334, 0x7f414320, 0x06ee4a06, 0xee4a3420, 0x4a342006,
		0x342006ee, 0x2006ee4a, 0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342006ee, 0x2006ee4a, 0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342006ee, 0x2006ee4a,
		0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342106ee, 0x4a7f8644, 0x342006ee, 0x2006ee4a, 0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342006ee, 0x2006ee4a,
		0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342006ee, 0x2006ee4a, 0x06ee4a34, 0xee4a3420, 0x4a342006, 0x342006ee, 0x2006ee4a, 0x06ee4a34, 0x86453421,
		0x06ee4a7f, 0xee4a3420, 0x45342106, 0x20067f41, 0x067f4245, 0xce434520, 0x48452006, 0x3420050a, 0x2006f04a, 0x06f04a34, 0xf04a3420, 0x4a342006,
		0x342006f0, 0x2106f04a, 0xff414534, 0x06f04a06, 0xf04a3420, 0x46342106, 0x20067f41, 0x4a7f8646, 0x342006f0, 0x2106f04a, 0x7f864634, 0x2006f04a,
		0x06f04a34, 0xf04a3420, 0x46342106, 0x23054244, 0x35333136, 0x21052e44, 0x7e4a3030, 0x30322106, 0x08054342, 0x4130323a, 0x65740545, 0x0665676e,
		0x62756f72, 0x6b06656c, 0x6b746172, 0x6c410561, 0x04616870, 0x61746542, 0x6d614705, 0x7507616d, 0x3330696e, 0x45073439, 0x6c697370, 0x5a046e6f,
		0x03211a82, 0x211e8245, 0x09826854, 0x6f490422, 0x2f080a82, 0x7070614b, 0x614c0661, 0x6164626d, 0x02754d02, 0x5802754e, 0x6d4f0769, 0x6f726369,
		0x6950026e, 0x6f685203, 0x67695305, 0x5403616d, 0x55077561, 0x03254a85, 0x03696850, 0x24038243, 0x05697350, 0x20778461, 0x21528262, 0x77836705,
		0x65640527, 0x0761746c, 0x212a8565, 0x18827a04, 0x03820320, 0x84740521, 0x83692075, 0x846b2075, 0x846c2075, 0x29a68575, 0x6e024342, 0x69780275,
		0x7a856f07, 0x68720325, 0x8373066f, 0x05312177, 0x03210684, 0x207e8274, 0x21538575, 0x7a827003, 0x03826320, 0x05260e82, 0x67656d6f, 0xfc840a61,
		0x6e6f7425, 0x860c736f, 0x200c84ee, 0x84ee8208, 0x83092008, 0x200984ed, 0x4909830c, 0x0c200717, 0x1985e986, 0x5e855520, 0x0f200c84, 0x29870c86,
		0x834f0a21, 0x201a8467, 0x85f1840a, 0x85e5866c, 0x85e5826c, 0x85e4836c, 0x8709836c, 0x8b112042, 0x861e850c, 0x200c84ed, 0x88dd860f, 0x840f869b,
		0x8e14201c, 0x2014841c, 0x84fb840a, 0x8405200a, 0x84092005, 0x632e2405, 0x870d7061, 0x25118445, 0x696e7507, 0x064d4631, 0x20078205, 0x200f8631,
		0x20078632, 0x20078633, 0x20078634, 0x20078635, 0x20078636, 0x20078637, 0x20078638, 0x20078639, 0x20078641, 0x20078642, 0x20078643, 0x20078644,
		0x20078645, 0x4d078546, 0x31210506, 0x05064d46, 0x7f860782, 0x7f863120, 0x7f863120, 0x7f863120, 0x6f863120, 0x6f863120, 0x6f863120, 0x6f863120,
		0x6f863120, 0x85443121, 0x05064d5f, 0x4d463121, 0x07820506, 0x064d5f86, 0x860f8205, 0x05064d5f, 0xdf860f82, 0x8205064d, 0x4d6f860f, 0x0f820506,
		0x064d6f86, 0x860f8205, 0x05064d6f, 0xdf860f82, 0x2105064d, 0x064d4631, 0x20078205, 0x208f8531, 0x4d7f8633, 0x17820506, 0x17863420, 0x064ddf86,
		0x41178205, 0x0e4d065f, 0x860f8205, 0x863320ef, 0x050e4d7f, 0x7f861782, 0x82050e4d, 0x4d7f860f, 0x3121050e, 0x050e4d46, 0x7f860782, 0x7f863420,
		0x82050e4d, 0x4d7f8617, 0x0f82050e, 0xfe4cef86, 0x860f8205, 0x05fe4c6f, 0x6f860f82, 0x2305fe4c, 0x30354631, 0x3520bf85, 0x35205f86, 0x35205f86,
		0x2006bf41, 0x205f8635, 0x20df8635, 0x065f4135, 0xdf863520, 0xd7863520, 0xbf413520, 0x41352006, 0x352006b7, 0x20061f42, 0x4b5f8636, 0x312105fe,
		0x05b74846, 0x5f860782, 0x5f863620, 0x5f863620, 0x5f863620, 0x5f863620, 0xcf863620, 0x67863620, 0xcf863620, 0x6f863620, 0xcf863620, 0x77863620,
		0x3f413620, 0x86362006, 0x8637207f, 0x3137217f, 0x2749e785, 0x46312105, 0x82052749, 0x497f8607, 0x0f820527, 0x37207f86, 0x37207f86, 0x37207f86,
		0x37207f86, 0x37207f86, 0x37207f86, 0x37207f86, 0x38207f86, 0x92546f86, 0x46312205, 0x064f4138, 0xef863820, 0x6f863820, 0xef863820, 0x6f863820,
		0x6f863820, 0x6f863820, 0x6f863820, 0x8205b749, 0x496f8647, 0x0f8205b7, 0xef866f87, 0xef863820, 0x85303921, 0x313921e7, 0x7f860786, 0x2205b349,
		0x86394631, 0x05b3497f, 0x7f860f82, 0x8205b349, 0x207f860f, 0x497f8639, 0x178205b3, 0xb3497f86, 0x860f8205, 0x05b3497f, 0x7f860f82, 0x2105b349,
		0xb3494631, 0x86078205, 0x05b3497f, 0x7f860f82, 0x8205b349, 0x497f860f, 0x0f8205b3, 0xb3497f86, 0x410f8205, 0xb349066f, 0x410f8205, 0xb349066f,
		0x860f8205, 0x05b349ff, 0x49463121, 0x078205b3, 0xb349ff86, 0x410f8205, 0x6f47067f, 0x860f8205, 0x05ab4977, 0x77860f82, 0x8205ab49, 0x4977860f,
		0x0f8205ab, 0xab497786, 0x860f8205, 0x05ab4977, 0x49463121, 0x078205ab, 0xab497786, 0x860f8205, 0x05ab4977, 0x77860f82, 0x8205a349, 0x4977860f,
		0x0f8205a3, 0xa3497786, 0x860f8205, 0x05a34977, 0x77860f82, 0x2105a349, 0xa3494631, 0x86078205, 0x05a34977, 0x77860f82, 0x82059349, 0x065f420f,
		0x82059349, 0x06df410f, 0x82059349, 0x06df410f, 0x82058b49, 0x4967860f, 0x3121058b, 0x058b4946, 0x31200782, 0x49055742, 0x0f82058b, 0x8b496786,
		0x420f8205, 0x8b4906d7, 0x860f8205, 0x058b4977, 0x77860f82, 0x82058b49, 0x4977860f, 0x0f82058b, 0x49065742, 0x0f82058b, 0x49065742, 0x3121057b,
		0x057b4946, 0x47420782, 0x05734906, 0x67860f82, 0x82057349, 0x2067860f, 0x064f4146, 0x67864620, 0x4f414620, 0x86462006, 0x45462d67, 0x696e750b,
		0x38384631, 0x746c612e, 0x39200b86, 0x41200b8a, 0x42200b8a, 0x43200b8a, 0x44200b8a, 0x45200b8a, 0x46200b8a, 0x39200b89, 0x39205f8a, 0x39205f8a,
		0x39205f8a, 0x39205f8a, 0x39205f8a, 0x39205f8a, 0x39205f8a, 0x41205f8a, 0x41205f8a, 0x41205f8a, 0x41205f8a, 0x41205f8a, 0x41205f8a, 0x41205f8a,
		0x41205f8a, 0x42205f8a, 0x43202f8a, 0x46200b8a, 0x07250b84, 0x32696e75, 0x053b4330, 0x46304523, 0x230f8346, 0x30303046, 0x46200784, 0x20056b41,
		0x24078245, 0x3046530c, 0x24178234, 0x30302e30, 0x200c8331, 0x200c8b32, 0x200c8a31, 0x830c8c31, 0x20338818, 0x21268a39, 0x0c8b3630, 0x0c8b3720,
		0x0c8b3820, 0x0c8a3520, 0x818b3520, 0x8a333521, 0x88302019, 0x5308230c, 0x67843146, 0x33200882, 0x08826384, 0x45843420, 0x32200882, 0x08825b84,
		0x30201084, 0x34200882, 0x08827a84, 0xd1843220, 0x35220882, 0x00823031, 0x32200882, 0x08826e84, 0x08873420, 0x66843220, 0x2c871183, 0x47831984,
		0x6b873220, 0x62873320, 0x47883420, 0x35826c84, 0x98873320, 0x47873420, 0x3e834684, 0x86873320, 0x47873420, 0x11883220, 0x59873588, 0x86313221,
		0x843520a1, 0x62052e3f, 0x6b636f6c, 0x73746c07, 0x65646168, 0x22058405, 0x846b6407, 0x41758207, 0x08830528, 0x0882ac84, 0x8305c941, 0x833f8408,
		0x41518708, 0x118205bd, 0x99831084, 0x7e873020, 0x8205b141, 0x8730201a, 0x87302099, 0x87302090, 0x058741e1, 0x00840020, 0xffff0126, 0x01000200,
		0x0a390b82, 0x16077401, 0x79630300, 0x14006c72, 0x6b657267, 0x616c9000, 0xb0006e74, 0x37158200, 0x20524742, 0x4b4d2e00, 0x48002044, 0x20425253,
		0x00006200, 0x0900ffff, 0x0b2e3782, 0x1f001400, 0x3e003000, 0x56004b00, 0x17846100, 0x51820a20, 0x15000c2e, 0x2a002000, 0x3f003100, 0x57004c00,
		0x0a203186, 0x0d206d82, 0x212c5182, 0x32002b00, 0x4d004000, 0x63005800, 0x03343386, 0x17000e00, 0x2c002200, 0x41003300, 0x59004e00, 0x04006400,
		0x69836182, 0x09820b20, 0x18000f32, 0x34002300, 0x42003c00, 0x4f004900, 0x65005a00, 0x053e2d82, 0x20455a41, 0x52434000, 0x5a002054, 0x204c4f4d,
		0x4f527400, 0x8a00204d, 0x204b5254, 0x5b84a000, 0x05000c38, 0x19001000, 0x35002400, 0x3d003b00, 0x4a004300, 0x5b005000, 0x1d846600, 0x06000a34,
		0x1a001100, 0x2d002500, 0x44003600, 0x5c005100, 0x19866700, 0x12000732, 0x26001b00, 0x37002e00, 0x52004500, 0x68005d00, 0x08301984, 0x1c000800,
		0x38002700, 0x53004600, 0x69005e00, 0x092e1586, 0x28001d00, 0x47003900, 0x5f005400, 0x15846a00, 0x0a000a3c, 0x1e001300, 0x2f002900, 0x48003a00,
		0x60005500, 0x6c006b00, 0x63726661, 0x05848a02, 0x05849420, 0x05849e20, 0x0584a820, 0x0584b220, 0x0584bc20, 0x0584c620, 0x0584d020, 0x0584da20,
		0x0584e420, 0x6163ee26, 0xf8026573, 0x03210583, 0x20058400, 0x20058408, 0x20058410, 0x20058418, 0x20058420, 0x20058428, 0x26058430, 0x6f6e6438,
		0x8440036d, 0x84462005, 0x844c2005, 0x84522005, 0x84582005, 0x845e2005, 0x84642005, 0x846a2005, 0x84702005, 0x84762005, 0x667c2605, 0x03636172,
		0x20058482, 0x2005848a, 0x20058492, 0x2005849a, 0x200584a2, 0x200584aa, 0x200584b2, 0x200584ba, 0x200584c2, 0x260584ca, 0x636f6cd2, 0x84da036c,
		0x84e02005, 0x84e62005, 0x84ec2005, 0x84f22005, 0x6ef82605, 0x03726d75, 0x210583fe, 0x05840404, 0x05840a20, 0x05841020, 0x05841620, 0x05841c20,
		0x05842220, 0x05842820, 0x05842e20, 0x05843420, 0x726f3a2c, 0x40046e64, 0x746c6173, 0x05844604, 0x69735026, 0x5a04666e, 0x60200584, 0x66200584,
		0x6c200584, 0x72200584, 0x78200584, 0x7e200584, 0x84200584, 0x8a200584, 0x90200584, 0x96260584, 0x31307373, 0x05849c04, 0x0582a620, 0xb0043222,
		0xba200584, 0xc4200584, 0xce200584, 0xd8200584, 0xe2200584, 0xec200584, 0xf6200584, 0x05210583, 0x20058400, 0x2605840a, 0x62757314, 0x841e0573,
		0x84242005, 0x842a2005, 0x84302005, 0x84362005, 0x843c2005, 0x84422005, 0x84482005, 0x844e2005, 0x84542005, 0x735a2605, 0x05737075, 0x20058460,
		0x20058466, 0x2005846c, 0x20058472, 0x20058478, 0x2005847e, 0x20058484, 0x2005848a, 0x20058490, 0x25058496, 0x0000009c, 0x7f720003, 0x2409e505,
		0x00110002, 0xbf758212, 0x00012207, 0xbb458208, 0x00022405, 0x820d000c, 0x2207cf43, 0x84030001, 0x84042099, 0x84052005, 0x27048205, 0x02000100,
		0x01000000, 0x05830182, 0x0b840620, 0x072005bb, 0x03214182, 0x05317400, 0x89000021, 0x00012209, 0xb95b840b, 0x42559305, 0x01226d25, 0xc3840a00,
		0x092005bb, 0x05b74184, 0x00172e08, 0x00380030, 0x00480040, 0x00580050, 0x00680060, 0x00780070, 0x00880080, 0x00980090, 0x00a800a0, 0x00b800b0,
		0x00c800c0, 0x00d800d0, 0x06d541e0, 0x0786b820, 0x0786b620, 0x0786b420, 0x0786b220, 0x0786b020, 0x0786ae20, 0x0786ac20, 0x0786fa20, 0x0785fc20,
		0x864a0121, 0x86982007, 0x85e62007, 0x34022307, 0xd5830400, 0x85360221, 0x321d210f, 0x34220786, 0x17830600, 0x86821d21, 0x868c200f, 0x207f8607,
		0x2177861e, 0x1785c01e, 0x86d01e21, 0x27b78207, 0xc100f21e, 0xec1e0100, 0xe6200584, 0x2f200586, 0xe0211182, 0x20058300, 0x2c0582da, 0x00da1e02,
		0x006f0128, 0x008d0094, 0x0c2d748e, 0x002913ba, 0x009a1e02, 0x00850002, 0x20098295, 0x225f8298, 0x74770176, 0x01210d75, 0x220f847f, 0x74760177,
		0x13820989, 0x13922793, 0x64205582, 0x4d745582, 0xb3013308, 0xb501b401, 0xb701b601, 0xb101b001, 0xae01af01, 0x138ab201, 0x13922793, 0x30205582,
		0xb8205582, 0x22127374, 0x82bb01ba, 0x74b82015, 0x27930c87, 0x00231392, 0xd4da1d02, 0xa65c0855, 0x6e010200, 0x01006e01, 0x2800a41d, 0xe8015600,
		0x7c03b202, 0xde041404, 0x78051205, 0x7606ac05, 0xd2084007, 0x340a6a09, 0xce0a680a, 0x940c020b, 0x280e5e0d, 0x8a0fc00e, 0x2410be0f, 0xea115810,
		0x7e13b412, 0xe0141614, 0x7a151415, 0x4017ae15, 0xd4180a18, 0x361a6c19, 0xd01a6a1a, 0x52085182, 0x005a0052, 0x006a0062, 0x007a0072, 0x008a0082,
		0x009a0092, 0x00aa00a2, 0x00ba00b2, 0x00ca00c2, 0x00da00d2, 0x00ea00e2, 0x01fa00f2, 0x010a0102, 0x011a0112, 0x012a0122, 0x013a0132, 0x014a0142,
		0x015a0152, 0x016a0162, 0x017a0172, 0x008a0182, 0x82030098, 0x011522ad, 0x22078482, 0x84970016, 0x01172207, 0x22078488, 0x848c0118, 0x01192207,
		0x2207848e, 0x8484011a, 0x011b2207, 0x20078494, 0x203f861c, 0x203f868d, 0x213f858e, 0x3f857001, 0x85710121, 0x846d823f, 0x7301213f, 0x01213f85,
		0x213f8574, 0x3f857501, 0x85780121, 0x7901213f, 0x7a203f86, 0x7b203f86, 0x7c203f86, 0x01217f85, 0x203f867d, 0x203f867e, 0x203f867f, 0x203f86b0,
		0x203f86b1, 0x203f86b2, 0x203f86b3, 0x203f86b4, 0x203f86b5, 0x203f86b6, 0x203f86b7, 0x203f86ba, 0x203f86bb, 0x203f86bc, 0x203f86bd, 0x203f86be,
		0x203f86bf, 0x2d3f86c0, 0x001400c1, 0x0032002a, 0x0042003a, 0x9b41004a, 0x8301291c, 0x6e010300, 0x89011600, 0x18220784, 0x07848f01, 0x95011a22,
		0x1c200784, 0x8e201f86, 0x01211f85, 0x211f8571, 0x1f857301, 0x85750121, 0x7901211f, 0x7b201f86, 0x7d201f86, 0x7f201f86, 0xb1201f86, 0xb3201f86,
		0xb5201f86, 0xb7201f86, 0xbb201f86, 0xbd201f86, 0xbf201f86, 0xc9aa1f86, 0x84990021, 0x011722b1, 0x2207848a, 0x84900118, 0x011a2207, 0x20078485,
		0x211f851b, 0x1f857001, 0x1f84c982, 0x1f84c982, 0x86740121, 0x867a201f, 0x857b201f, 0x7d01213f, 0x01213f85, 0x201f867e, 0x201f86b2, 0x201f86b3,
		0x201f86b5, 0x201f86b6, 0x201f86bc, 0x201f86bd, 0x261f86bf, 0x000f00c0, 0x46280020, 0x0121194d, 0x22a7848b, 0x84910118, 0x011a2207, 0x20078496,
		0x8217851c, 0x821784af, 0x211784af, 0x17867501, 0x2f857b20, 0x1785a782, 0x17867f20, 0x1786b320, 0x4785b520, 0x86b70121, 0x86bd2017, 0x86bf2017,
		0x2a614117, 0x848d0121, 0x01192291, 0x22078492, 0x8486011a, 0x011b2107, 0x20059d43, 0x211f851c, 0x1f857201, 0x1f84a982, 0x85740121, 0x84b1821f,
		0x7c01213f, 0x7d201f86, 0x01213f85, 0x201f867e, 0x203f867f, 0x201f86b4, 0x201f86b5, 0x201f86b6, 0x201f86b7, 0x201f86be, 0x201f86bf, 0x2e1f86c0,
		0x000500c1, 0x0014000c, 0x0024001c, 0x8493012c, 0x851a209b, 0x848b8207, 0x7d01210f, 0xb5200f86, 0xbf380786, 0x16000a00, 0x26001e00, 0x36002e00,
		0x46003e00, 0x56004e00, 0x87015e00, 0x1b213d84, 0x05874401, 0x0f851c20, 0x0f84c982, 0x1f84c982, 0x0f85b982, 0x1f867f20, 0x2f85b620, 0x86b70121,
		0x86c0200f, 0x42998d0f, 0x1c2105a7, 0x82078401, 0x2007854b, 0x200f867f, 0x410786b7, 0x03102b97, 0x206901c3, 0x1d4d4528, 0x01e90610, 0x55051072,
		0x03102f02, 0x109101c1, 0xc303ab0a, 0x0a550510, 0x020222ab, 0x060d5b98, 0x0a020222, 0x2452cf5c, 0x02010003, 0x2403826e, 0x0000007e, 0x26038201,
		0x02020016, 0x18150082, 0x23258350, 0x2d003600, 0x80222f82, 0x53187f00, 0xce0834e1, 0x006d006b, 0x009c009b, 0x009e009d, 0x00a0009f, 0x00a200a1,
		0x00a400a3, 0x00a600a5, 0x00a800a7, 0x00aa00a9, 0x00ac00ab, 0x00ae00ad, 0x00b000af, 0x00b300b1, 0x00b500b4, 0x00b700b6, 0x00b900b8, 0x00db007a,
		0x00df00dd, 0x00e300e1, 0x00e700e5, 0x00eb00e9, 0x00ef00ed, 0x00f300f1, 0x00f700f5, 0x00fb00f9, 0x01ff00fd, 0x01030101, 0x01070105, 0x010b0109,
		0x0110010e, 0x01140112, 0x01180116, 0x011c011a, 0x0120011e, 0x01240122, 0x01280126, 0x012c012a, 0x0130012e, 0x01340132, 0x01380136, 0x013c013a,
		0x0140013e, 0x01440142, 0x01480146, 0x014c014a, 0x0150014e, 0x01540152, 0x01590156, 0x0166015b, 0x016a0168, 0x0202006c, 0x1809007e, 0x2010bb4b,
		0x201782da, 0x18178276, 0x200fc34b, 0x201782db, 0x1817826e, 0x260fcb4b, 0x000200dc, 0x5e0a00f0, 0x0021133f, 0x20018201, 0x2203824c, 0x82e40201,
		0x00032a25, 0x001c0013, 0x01760100, 0x242f827f, 0x00c101ae, 0x241b8214, 0x00440002, 0x201d8252, 0x271d8505, 0x8e008d00, 0x94000a00, 0x0c270182,
		0x75016f01, 0x85010d00, 0x00022129, 0x7f202195, 0xb8202182, 0x1e204b82, 0x21834398, 0xb701ae24, 0x6d841e00, 0xa0011222, 0x07202982, 0x1b227b82,
		0x6d840000, 0x6d840820, 0x70010a3a, 0x0b007401, 0x7e017701, 0xaf011000, 0x1800b601, 0xc001b901, 0x02002000, 0x8506cb42, 0x840120b9, 0x828d20c9,
		0x840020a5, 0x84022037, 0x820320a5, 0x152a085b, 0x0c000b00, 0x12001000, 0x3e002300, 0x40003f00, 0x60005e00, 0x72006c00, 0x74007300, 0x7c007800,
		0x96008600, 0x58019a00, 0x2d825d01, 0x56187f20, 0xd808341f, 0x00790077, 0x00bc00bb, 0x00be00bd, 0x00c000bf, 0x00c200c1, 0x00c400c3, 0x00c600c5,
		0x00c800c7, 0x00ca00c9, 0x00cc00cb, 0x00ce00cd, 0x00d000cf, 0x00d300d1, 0x00d500d4, 0x00d700d6, 0x00d900d8, 0x00dc00da, 0x00e000de, 0x00e400e2,
		0x00e800e6, 0x00ec00ea, 0x00f000ee, 0x00f400f2, 0x00f800f6, 0x00fc00fa, 0x010001fe, 0x01040102, 0x01080106, 0x010d010a, 0x0111010f, 0x01150113,
		0x01190117, 0x011d011b, 0x0121011f, 0x01250123, 0x01290127, 0x012d012b, 0x0131012f, 0x01350133, 0x01390137, 0x013d013b, 0x0141013f, 0x01450143,
		0x01490147, 0x014d014b, 0x0151014f, 0x01550153, 0x015a0157, 0x0167015c, 0x016b0169, 0x0002006d, 0x04530402, 0x0400005a, 0x00860486, 0x280f8408,
		0x006a0463, 0x04950400, 0x220f8695, 0x827a0473, 0x04bf220f, 0x220f82bf, 0x84010000, 0x26078301, 0x001a1900, 0x82140000, 0x08028203, 0x3012192e,
		0x060e1982, 0x48862a09, 0x010df786, 0x82a00207, 0x8230ff18, 0x0102fb18, 0x300b3101, 0x2b050609, 0x1a02030e, 0x61300005, 0x062b0a06, 0x8221d882,
		0x25de8237, 0x513053a0, 0x118a2c30, 0x1ea21c26, 0x3c001c80, 0x4f2c0184, 0x73006200, 0x6c006f00, 0x74006500, 0x3e210382, 0x21018200, 0x4c8a2130,
		0x14042c08, 0x381c7860, 0x0dc93bd3, 0xf1b582cc, 0x072d286c, 0x8e0b8379, 0x821382a0, 0x56058230, 0x3e048230, 0x010203a0, 0x20020202, 0x880d3005,
		0x0501219c, 0x81218682, 0x2c9684cf, 0x06045503, 0x53550213, 0x0e301031, 0x2d0c8206, 0x41071308, 0x6f7a6972, 0x1331616e, 0x11831130, 0x0a130730,
		0x746f6353, 0x61647374, 0x2531656c, 0x14832330, 0x130a2208, 0x6174531c, 0x65696672, 0x5420646c, 0x6e686365, 0x676f6c6f, 0x2c736569, 0x636e4920,
		0x303a312e, 0x37268338, 0x6831130b, 0x3a707474, 0x65632f2f, 0x66697472, 0x74616369, 0x732e7365, 0x74203a87, 0x2e333982, 0x2f6d6f63, 0x6f706572,
		0x6f746973, 0x312f7972, 0x83343036, 0x1303223b, 0x2e62892d, 0x76726553, 0x73656369, 0x6f6f5220, 0x89432074, 0x4120334c, 0x6f687475, 0x79746972,
		0x0d171e30, 0x35303131, 0x0d6b3330, 0x825a2005, 0x8a36200e, 0x8130220e, 0x22f1dbc1, 0x85313033, 0x8a2a20f1, 0x22ea9ff1, 0x852d302f, 0x922620ea,
		0x695428ea, 0x7473656d, 0x8a706d61, 0x018222e3, 0x0bc84122, 0x05012d09, 0x01820300, 0x8230000f, 0x82020a01, 0xf2000101, 0xbaa591b3, 0x0d49d6d7,
		0xc2d67df6, 0xfbce902d, 0x1a5a60e9, 0x9c191563, 0x9ba030b4, 0x06ea78d4, 0x9ded3b43, 0x26322823, 0xe825325f, 0x3e0d8595, 0x20b4804f, 0x5ea29cb0,
		0xfa8f513e, 0xb2bb2e93, 0x113bc6ca, 0x20005602, 0x8429418b, 0x79352bb4, 0x0769b0fb, 0x725d88f1, 0xcbe2c0ad, 0xaf250e45, 0xd6c2b4c4, 0x61b465ac,
		0x2ddfe21a, 0x97760c12, 0x794c1963, 0x740cbb3c, 0x1901f566, 0x0de25059, 0x24595f9b, 0x991f39fa, 0x557089d3, 0xa699a648, 0xa67be00b, 0x8ae52028,
		0xad925dcb, 0x80ff2850, 0x2f2acc20, 0xb9f1bfd3, 0x3d5e4aab, 0x08757a97, 0x029915a1, 0xcced5e5f, 0x81d640a7, 0x45e85d55, 0xffbbee27, 0xc218f89d,
		0xecb7f580, 0xc2ceb074, 0xf7333e3f, 0x0b1cc1ef, 0x65c948d5, 0x0b6d3732, 0x4f55c955, 0xbf1c22cd, 0x2f94f19f, 0xa8a0ab2b, 0x2c437430, 0x204b8ae7,
		0x40ab220d, 0x02cb5178, 0x01000103, 0x460182a3, 0x42018230, 0x03060c30, 0x01131d55, 0x0204ff01, 0x0e300030, 0x0f200d83, 0x04260d83, 0xc0060203,
		0x0f831630, 0x0f832520, 0x0a300c2e, 0x062b0806, 0x07050501, 0x1d300803, 0x0e3a1783, 0x14041604, 0x20a323ca, 0x726bb1b4, 0x9a6fba9f, 0xc90b3e83,
		0xa7d8b1d8, 0x1e831f30, 0x1804233c, 0x14801630, 0x1a7fc6b4, 0x759bcc43, 0x4bc42f5d, 0x10988bf2, 0x1051f1e9, 0x4b873a30, 0x04010127, 0x302c302e,
		0x230f872a, 0x1e860130, 0x23061c42, 0x7073636f, 0x21120643, 0x5c833930, 0x32041f2c, 0x2e303030, 0x2aa02ca0, 0x30862886, 0x6c726322, 0x73272f92,
		0x6f727366, 0x822e746f, 0x5330211d, 0x20373a83, 0x4a304c04, 0x0b064830, 0x01488660, 0x016efd86, 0x30021807, 0x87373039, 0x01022382, 0x51832b16,
		0x92437320, 0x1ea04206, 0x090e3444, 0x0182030c, 0x53180001, 0xa7ac747e, 0xea2ba37a, 0x3cd25978, 0xf7c2f9c2, 0x37425f25, 0x61113c5b, 0xff03a61c,
		0xbe686a34, 0x21a422da, 0x9085485a, 0xabce4d55, 0xc634cba6, 0xbaadc6c0, 0x0bbe80b6, 0xe4a7c079, 0xe71aa7da, 0xc81e57cf, 0xdfeff939, 0xa0d03030,
		0x8d5caf2a, 0x4c2d5325, 0xb46df5f7, 0x52ae727b, 0xeab9b7a3, 0x3a3e8355, 0x1a944b45, 0xd6166496, 0xafe360e8, 0x25548d35, 0xd6f85b4c, 0xab04d937,
		0x4ae036b8, 0x690afb89, 0xe157cc6f, 0xb222dcea, 0x1e41c5b5, 0x9ee963d7, 0xc3b2ac64, 0x77dabec7, 0x369d58e0, 0x86ae9901, 0x1d386617, 0xc6f664bd,
		0x2f105e52, 0xcbcad060, 0x6f72c4c3, 0x22448536, 0x41c59c40, 0x6c233354, 0xd98ea37b, 0xaaf18558, 0xbb7e34b8, 0x5468aeb5, 0x520c2078, 0x4bb24d93,
		0x88c1f201, 0x6ccd9547, 0x4ca853d2, 0x8c3e18f0, 0x8ac4a333, 0x9273cecf, 0xed8f2249, 0x7c9cc8bb, 0x8230ab63, 0x82300004, 0x5945e802, 0x00012105,
		0x210e2341, 0x65446330, 0x3021220d, 0x0530451f, 0x68541832, 0x6f472065, 0x64614420, 0x47207964, 0x70756f72, 0x22062c45, 0x442f3031, 0x2820053a,
		0x43261e88, 0x7373616c, 0xe9443220, 0x6f69220a, 0x0a07446e, 0x0d171e2a, 0x36303430, 0x37313932, 0x30240582, 0x330d175a, 0x84e50e8b, 0x20018222,
		0x09118c44, 0x30000d13, 0x02080182, 0x00010182, 0xead79dde, 0xa1491857, 0x5fd7eb5b, 0xbeea8648, 0xefe4ffdd, 0x65f41c67, 0x7157b368, 0xbb775ea0,
		0xe9499bed, 0x563d8070, 0x6f086318, 0xd0ccf2da, 0x54027f3f, 0xd8105422, 0xc0d481b2, 0x7f4b3d75, 0x3ec377c7, 0x031aab78, 0x2f6b20b5, 0xc5b12b6a,
		0xbbc47e88, 0xd8c1b01e, 0xaa6f2745, 0x87f75837, 0x2dd8d726, 0xb717a9f6, 0x4e36721f, 0x653f17a6, 0x2adb9298, 0xfea25d6e, 0xde0be088, 0x158de57f,
		0x3acbebe1, 0xa212e2d5, 0x8ed82d13, 0x3d125faf, 0x080508a0, 0x65a55cb6, 0x99450438, 0x6060a31e, 0xa541c574, 0x621b6272, 0x5f6f1fc5, 0x02be421a,
		0xaea86551, 0xfc6a1823, 0x4da90378, 0xfac3807f, 0xa1fc5aab, 0x19caa440, 0xc8b2fe16, 0x0d735eef, 0x9abd77ee, 0xbc9879f6, 0xa26707b1, 0xa0dd0d15,
		0x7b44c658, 0x28623e0a, 0x0741ba5f, 0x11cf5853, 0xc574387e, 0x69b5fff8, 0x74848f90, 0xaf1b97ea, 0xa3030102, 0x8130c081, 0x0a5244bd, 0xb0c4d236,
		0x4cd491d2, 0x61b37111, 0xfea13dcb, 0xd46aa8dd, 0x8d8130e3, 0x26055344, 0x81308581, 0x93148082, 0x67a12323, 0xd54165a4, 0x01822264, 0x06374500,
		0x30050426, 0xff010103, 0x090edf42, 0x0182030c, 0x4b320001, 0x3ecab2f3, 0xc612fc91, 0x8e8c07a1, 0x0633a077, 0x1e905c14, 0xa608f718, 0xf9190a3d,
		0x6e118087, 0x1796e469, 0x9134ff30, 0xee387263, 0xa3011ccc, 0xa428941d, 0xc47af631, 0xe5f6d754, 0xa2035831, 0xdb62cecc, 0xb5734594, 0x24c945bf,
		0x0282d5b5, 0x697923ad, 0x4db6b88d, 0xca4ccfce, 0x1ce82333, 0x8b9daa88, 0xc9166e41, 0x9e89e520, 0x70da3bcd, 0x26997ef7, 0x25541420, 0x85736eab,
		0x9d219be6, 0x0e826c0a, 0x0cc2f8a8, 0x6c1e10fa, 0x0d87ef96, 0x8b610fc4, 0x2b83eead, 0x928ef895, 0xeb397284, 0xed83ea20, 0x6e97cd83, 0x4eebbc08,
		0x2b73b626, 0x4cf6d3e4, 0xe27126fe, 0x4a741161, 0x871a57ff, 0x2e48750f, 0x176951cf, 0x611202a0, 0x40d1d595, 0xee4c10b2, 0x4310acc4, 0x0a9ea5a6,
		0x9a6295d5, 0x8288cf0d, 0xe40c32c5, 0xe6459f2b, 0x9c289f0d, 0x5a2ab9b1, 0x0f37ad57, 0xdb7f1daf, 0x82309fbd, 0x8230de04, 0x0344c603, 0x03022205,
		0x0e244101, 0x3364a941, 0x0d171e30, 0x31313630, 0x31303631, 0x37333435, 0x320d175a, 0x30220e8b, 0x8a44ca81, 0x26e2490d, 0x18301a22, 0x2b05b144,
		0x446f4711, 0x79646461, 0x6d6f632e, 0x4806aa44, 0xd74914e5, 0x6f672208, 0x492f8764, 0x31230ad1, 0x482e3030, 0x272005e5, 0x2508df44, 0x75636553,
		0xde446572, 0x11312317, 0x31830f30, 0x0813052b, 0x36393730, 0x37383239, 0x1ff94830, 0x2dc4ff08, 0x9c8c15d5, 0x32ec4c26, 0xb85feb35, 0xa65a0159,
		0x3b598161, 0xe3ab6370, 0x2ac73ddc, 0xd333c9b8, 0xed3ae479, 0x8423303c, 0x1430b38e, 0xc387b2b6, 0x0454953d, 0xdd99df9e, 0x211e250b, 0x7e2965de,
		0x54a9a835, 0x32f7f6eb, 0x5526d439, 0xfbefad95, 0xd78658fe, 0x8d00f49e, 0xbd0c2a8c, 0xa7ce0442, 0xeef6043f, 0xefaaf280, 0x6669a152, 0xad1abeda,
		0x662cda5d, 0xbb6b1aea, 0x4a511ae5, 0xc7482f00, 0xb9d87598, 0xf8eec829, 0x9c0a6d66, 0x78fcf3b3, 0xa3f8a27c, 0xf3c3b5f2, 0xc1917ab9, 0x2e25e6a7,
		0x12eda89c, 0xf66a6e65, 0x70534412, 0x9cc39530, 0x3d2b582b, 0xf24a7408, 0xbfb051be, 0x274cd087, 0x35b56b58, 0x17af9dc5, 0x8f0bf831, 0x3681adee,
		0x98088905, 0x25af3acf, 0xea49c087, 0xf767fda7, 0xcc978e45, 0x36e23914, 0x1a7eb585, 0xf616fd37, 0x749a1171, 0x13fe1630, 0x843fa394, 0xf9484f0d,
		0x30322407, 0x442e0182, 0xfd330a70, 0x933261ac, 0xe2d6456c, 0x9a5f85ee, 0x9976e7ba, 0x48e7cc68, 0x6d440cc3, 0x12302113, 0x2a083949, 0x01063008,
		0x0102ff01, 0x48333000, 0x01270744, 0x30270401, 0x48233025, 0x17200ad7, 0x2406a648, 0x7073636f, 0x0a06422e, 0x48463021, 0x3f2a05d0, 0x3b303d30,
		0x37a039a0, 0x104c3586, 0x15384213, 0x64672f22, 0x2008dd48, 0x05dd484b, 0x4230442e, 0x04064030, 0x00201d55, 0x36303830, 0x4b0ad648, 0x90420b76,
		0x0d094a1e, 0x43060121, 0x0c090ebc, 0x01018203, 0xc086d200, 0xa1f9bdec, 0x66ee67b6, 0x3a06a20b, 0x158e5004, 0x744aac72, 0x37cb5395, 0xef4944cb,
		0x336b9007, 0x94f096d9, 0x3013a556, 0x32853c05, 0xc7c97b21, 0xa424a80a, 0xd346de90, 0x03142325, 0xd610c267, 0x7b5d0f6f, 0xc59fcc7a, 0xc4c12a58,
		0x5aa8219e, 0x46a4acf3, 0x63e49ef3, 0xa4902fcb, 0xd9012929, 0xdf292c72, 0xbc270137, 0xd368ee4f, 0xb3c08f21, 0xed09f5e4, 0x53aa10d2, 0xccf0beb4,
		0x3bd60b59, 0x24951c96, 0xeccedf49, 0x9148a7fd, 0x3a0e4514, 0x45da6f36, 0x41a245b3, 0x44d7d4c9, 0x74b93e4e, 0x13a2d576, 0x87c62c55, 0xac99b5a3,
		0x7f878406, 0xbffc0675, 0xcc0e4c14, 0x3ddfc46e, 0xf47112b7, 0x4051f1e8, 0xe0492822, 0xa8874b1d, 0xa206cc34, 0xd15a12dd, 0x03643686, 0x776f6f35,
		0x85f2eb6e, 0xab5e9850, 0x91ad5303, 0x161f6323, 0xb2b9cd9c, 0xe13a6305, 0x171b68f4, 0x53953505, 0x058230ee, 0x0482303e, 0x05e14426, 0xef0b0626,
		0x7b69bff4, 0x440e2841, 0x1e33cd60, 0x39300d17, 0x34323930, 0x34343331, 0x175a3332, 0x8a32310d, 0x6b30210e, 0x250a4c45, 0x0f314247, 0x2f4f0d30,
		0x4c062605, 0x6f646e6f, 0x2110876e, 0x10871307, 0x1a301c22, 0x21054745, 0x6a184413, 0x69260b5b, 0x6574696d, 0x1d863164, 0x93130321, 0x20ed441d,
		0x04a2ff08, 0xdbd8e65f, 0xf3a2a1d2, 0xe734c57e, 0xfbaed872, 0xa4eccf95, 0x001d0eea, 0x16db9207, 0x1f53acf6, 0x0194f135, 0x908ea39c, 0xe0460899,
		0x912b0f05, 0x0bffa6b6, 0x2bba0c1b, 0xe6626e46, 0x410ba789, 0xc0e614f5, 0x72556bea, 0xcf8e5d11, 0x893358dc, 0x7590e5ff, 0x2dccc3dc, 0x03d63e60,
		0x54c6a9e9, 0xecbc943e, 0x7a36918a, 0xd8fd55ed, 0x46276b3d, 0xdbd45f09, 0xf7a25fc1, 0x7e88e488, 0xe082e3fa, 0x5162422f, 0x30c6bb46, 0xccb27b71,
		0xed76338c, 0xad99b5e0, 0xe30d1dc3, 0x31787788, 0x1552543c, 0xccdcde6c, 0x9b1c9770, 0xf738f485, 0x274b4705, 0x3ca35db0, 0x28a52266, 0x94760a97,
		0x8fbbc167, 0x06f01a9f, 0x5891807c, 0x2020751a, 0x0b5a9406, 0xed26ef71, 0xd3825ef2, 0x93e60b9a, 0x411607b7, 0xd4d562ea, 0xaa938cd2, 0xd734c1f8,
		0x458dfb8a, 0x8c6f6e4c, 0x8d01af7c, 0xeb31f466, 0xed441dae, 0x30862607, 0x30820182, 0x08ad440f, 0x03300527, 0x30000101, 0x21108313, 0xd74d0425,
		0x4303200b, 0x07230df5, 0x44323080, 0x2b2a059a, 0x27302930, 0x23a025a0, 0x6b4d2186, 0x0b91440a, 0x73646725, 0x4d302d32, 0x6d231864, 0x4d170701,
		0xf6501464, 0x16e5440f, 0x80813022, 0x240a5945, 0x30723074, 0x0a594524, 0x59451820, 0x302f2216, 0x2225884a, 0x453e8602, 0x5f2c2c55, 0x65746e69,
		0x64656d72, 0x65746169, 0x7420d782, 0x460c1046, 0x144f1431, 0x66683309, 0x55671030, 0xe9a1b3a1, 0x1175c637, 0x85e33389, 0x184413d7, 0x0312090e,
		0x00010182, 0x093e56bd, 0xfa7d13b4, 0x45fed3ed, 0x19dfdfb6, 0x8ca3f848, 0x8f5411d5, 0x134492d4, 0xa36971c1, 0x800630c3, 0xae37da1d, 0xd96847ca,
		0x360925b3, 0x3b04e90c, 0x1051dbe2, 0x5e10fe74, 0x0f3bdec9, 0x9eb10324, 0xa0c39639, 0xca524c0f, 0x116642e7, 0x4968755a, 0x6b232d3a, 0x43c4065e,
		0xb1019ef1, 0x9ca50b2f, 0x3d3e1e12, 0xb05a6e18, 0x2e3f7495, 0x6d30e14b, 0x6f9ec373, 0x470fe3af, 0x6024ddfa, 0x635ca764, 0xb7a9dd00, 0xc7653450,
		0xfe490528, 0xea187a5a, 0xb646c01c, 0x81d92a9a, 0xca91b265, 0x887bd60c, 0xe93eeaf0, 0x87305518, 0xa891afcf, 0x6b08231e, 0x06999045, 0x0d3791dc,
		0x66ddd4bf, 0xf400555f, 0x60ede3f1, 0x973e9534, 0x6acac2a2, 0x3040618d, 0x01a5c491, 0x60d05b06, 0x1f344f6d, 0x31099d7e, 0x78e9e553, 0xc483d096,
		0x62e5bdaa, 0x221c32aa, 0x2e124e23, 0x9fb6087c, 0x96235cdf, 0xfe048231, 0xfa048230, 0x30010102, 0x2b45d581, 0x460220cc, 0xd654070f, 0x81a02409,
		0x54103086, 0x0c290ac7, 0x00300231, 0x09061430, 0x05eb542b, 0x3101282c, 0x00050307, 0x00000003, 0x89541930, 0x03092308, 0x348a0c31, 0x1c300422,
		0x0b230d8a, 0x8b300e31, 0x3015221d, 0x38388923, 0x04163104, 0x7bbc4914, 0xe8f32059, 0xf7d4101e, 0x174116d9, 0x486fcd0b, 0x0b8a426a, 0x05010e09,
		0x01820400, 0x1ac15a00, 0x7c62e627, 0x81377520, 0x3f5b3af2, 0x2b804396, 0xba63d13b, 0xd45d48a4, 0x244d4c56, 0x31a79a6b, 0xbcd40a76, 0xb2806f21,
		0x416dbdf2, 0xa0faf966, 0x4b46cd4f, 0xe704a875, 0xa3fce5ef, 0x82fe4f9d, 0x57bcbe33, 0x6e41439c, 0x23bc502c, 0x17dcd1f2, 0xa42badb8, 0xfd200255,
		0x7d20d12e, 0x6cf54cfa, 0xc8d2a5d0, 0xd129c6aa, 0x94524633, 0xae271fde, 0xe606c6f9, 0xfcc4df0b, 0x8aea412d, 0xb7abb5de, 0x9efdbeb7, 0x2804dbe0,
		0x1fd9d76c, 0xadb29cb8, 0xb1dda831, 0xb7307203, 0x97a25ef2, 0xf6ef6825, 0xe172eb61, 0x624498c3, 0xf2e99372, 0x5e89171a, 0x3d2c1f42, 0x5b4bd427,
		0x9a302643, 0xc2ba409c, 0xcf8f9b45, 0x686b3300, 0x0fd240b9, 0x61f082ff, 0xdf81c2e2, 0xf9349852, 0x2f098df2, 0xae8b96ef, 0x5c326604, 0xf4aa05d8,
		0xcee65392, 0xbccfbce3, 0x151d8eaa, 0x038f1ebc, 0x4c855556, 0x0282a16e, 0x02823074, 0x093d4170, 0x82310624, 0x12826102, 0x01025d27, 0xd6813001,
		0xd00c5630, 0x2312f156, 0x18305da0, 0x22090141, 0x880b3103, 0x0107230c, 0x0c881c30, 0x31050932, 0x310d170f, 0x32393031, 0x34353132, 0x5a333430,
		0x33107742, 0xe8263897, 0xfe04f700, 0x7fcb23b2, 0x485da4d1, 0x34392dd8, 0x09127742, 0x91f5c801, 0x3190f2e0, 0xb28684cc, 0x15896650, 0x4c0576a7,
		0x80523da2, 0x5670d239, 0x891d3388, 0x86e7c443, 0xc21b7b8c, 0xbf71b344, 0xba8c0a44, 0xc2cd67b1, 0xa826e8dc, 0x43429969, 0x61489346, 0x76560c9d,
		0xcd30afa1, 0x34fd134c, 0xafa56d74, 0x777a3c5b, 0x3e7c96f8, 0x89cfcef8, 0x3b625052, 0x76a1ce42, 0x1815a0f3, 0x9701ac24, 0xe34c8689, 0x2491c2ea,
		0x512a11a9, 0xdae001ad, 0xbab76b76, 0xc645e1b2, 0x6cc5eb3c, 0x9265156d, 0x1fbeb480, 0xb70af670, 0x7d5f0213, 0x0ccc6c2b, 0xc1380e86, 0xe1451ff6,
		0x9a3a17b8, 0xeed36ff8, 0xd5939d56, 0xee01a60b, 0xfd83928a, 0x4bce3300, 0xe633851a, 0x88d0d3c0, 0x98b977b1, 0xb130c6c2, 0x925aeb86, 0x4a0298e8,
		0x41c30b1a, 0x865c4594, 0x0258f271, 0x7fff46d8, 0x230031bd, 0x696419b1, 0xbacee821, 0x9271a56e, 0x1cd0616b, 0x68cee50c, 0x594e1437, 0x050000d1,
		0x5e827afa, 0x00000001,
};

static const char* GetDefaultCompressedFontDataTTFBase85()
{
  return proggy_clean_ttf_compressed_data_base85;
}

#endif // #ifndef IMGUI_DISABLE